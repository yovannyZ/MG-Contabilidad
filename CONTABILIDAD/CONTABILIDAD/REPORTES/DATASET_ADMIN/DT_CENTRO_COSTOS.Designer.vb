'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.8000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DT_CENTRO_COSTOS"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DT_CENTRO_COSTOS
    Inherits Global.System.Data.DataSet
    
    Private tableCENTRO_COSTOS As CENTRO_COSTOSDataTable
    
    Private tablePROYECTO As PROYECTODataTable
    
    Private tableAUX_COMPROBANTE As AUX_COMPROBANTEDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CENTRO_COSTOS")) Is Nothing) Then
                MyBase.Tables.Add(New CENTRO_COSTOSDataTable(ds.Tables("CENTRO_COSTOS")))
            End If
            If (Not (ds.Tables("PROYECTO")) Is Nothing) Then
                MyBase.Tables.Add(New PROYECTODataTable(ds.Tables("PROYECTO")))
            End If
            If (Not (ds.Tables("AUX_COMPROBANTE")) Is Nothing) Then
                MyBase.Tables.Add(New AUX_COMPROBANTEDataTable(ds.Tables("AUX_COMPROBANTE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CENTRO_COSTOS() As CENTRO_COSTOSDataTable
        Get
            Return Me.tableCENTRO_COSTOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PROYECTO() As PROYECTODataTable
        Get
            Return Me.tablePROYECTO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AUX_COMPROBANTE() As AUX_COMPROBANTEDataTable
        Get
            Return Me.tableAUX_COMPROBANTE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DT_CENTRO_COSTOS = CType(MyBase.Clone,DT_CENTRO_COSTOS)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("CENTRO_COSTOS")) Is Nothing) Then
                MyBase.Tables.Add(New CENTRO_COSTOSDataTable(ds.Tables("CENTRO_COSTOS")))
            End If
            If (Not (ds.Tables("PROYECTO")) Is Nothing) Then
                MyBase.Tables.Add(New PROYECTODataTable(ds.Tables("PROYECTO")))
            End If
            If (Not (ds.Tables("AUX_COMPROBANTE")) Is Nothing) Then
                MyBase.Tables.Add(New AUX_COMPROBANTEDataTable(ds.Tables("AUX_COMPROBANTE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCENTRO_COSTOS = CType(MyBase.Tables("CENTRO_COSTOS"),CENTRO_COSTOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCENTRO_COSTOS) Is Nothing) Then
                Me.tableCENTRO_COSTOS.InitVars
            End If
        End If
        Me.tablePROYECTO = CType(MyBase.Tables("PROYECTO"),PROYECTODataTable)
        If (initTable = true) Then
            If (Not (Me.tablePROYECTO) Is Nothing) Then
                Me.tablePROYECTO.InitVars
            End If
        End If
        Me.tableAUX_COMPROBANTE = CType(MyBase.Tables("AUX_COMPROBANTE"),AUX_COMPROBANTEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAUX_COMPROBANTE) Is Nothing) Then
                Me.tableAUX_COMPROBANTE.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DT_CENTRO_COSTOS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DT_CENTRO_COSTOS.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCENTRO_COSTOS = New CENTRO_COSTOSDataTable
        MyBase.Tables.Add(Me.tableCENTRO_COSTOS)
        Me.tablePROYECTO = New PROYECTODataTable
        MyBase.Tables.Add(Me.tablePROYECTO)
        Me.tableAUX_COMPROBANTE = New AUX_COMPROBANTEDataTable
        MyBase.Tables.Add(Me.tableAUX_COMPROBANTE)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCENTRO_COSTOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePROYECTO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAUX_COMPROBANTE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DT_CENTRO_COSTOS = New DT_CENTRO_COSTOS
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub CENTRO_COSTOSRowChangeEventHandler(ByVal sender As Object, ByVal e As CENTRO_COSTOSRowChangeEvent)
    
    Public Delegate Sub PROYECTORowChangeEventHandler(ByVal sender As Object, ByVal e As PROYECTORowChangeEvent)
    
    Public Delegate Sub AUX_COMPROBANTERowChangeEventHandler(ByVal sender As Object, ByVal e As AUX_COMPROBANTERowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CENTRO_COSTOSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_AREA As Global.System.Data.DataColumn
        
        Private columnDESC_AREA As Global.System.Data.DataColumn
        
        Private columnDESC_CORTA As Global.System.Data.DataColumn
        
        Private columnCTA_ANA As Global.System.Data.DataColumn
        
        Private columnExpr1 As Global.System.Data.DataColumn
        
        Private columnExpr2 As Global.System.Data.DataColumn
        
        Private columnSTATUS_SUMARIO As Global.System.Data.DataColumn
        
        Private columnTIPO_DIST As Global.System.Data.DataColumn
        
        Private columnCOD_NEG As Global.System.Data.DataColumn
        
        Private columnDESC_NEG As Global.System.Data.DataColumn
        
        Private columnCOD_ZONA As Global.System.Data.DataColumn
        
        Private columnDESC_ZONA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CENTRO_COSTOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_CORTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_CORTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTA_ANAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTA_ANA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_SUMARIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_SUMARIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_DISTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_DIST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_NEGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_NEG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_NEGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_NEG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_ZONAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_ZONA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_ZONAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_ZONA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CENTRO_COSTOSRow
            Get
                Return CType(Me.Rows(index),CENTRO_COSTOSRow)
            End Get
        End Property
        
        Public Event CENTRO_COSTOSRowChanging As CENTRO_COSTOSRowChangeEventHandler
        
        Public Event CENTRO_COSTOSRowChanged As CENTRO_COSTOSRowChangeEventHandler
        
        Public Event CENTRO_COSTOSRowDeleting As CENTRO_COSTOSRowChangeEventHandler
        
        Public Event CENTRO_COSTOSRowDeleted As CENTRO_COSTOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCENTRO_COSTOSRow(ByVal row As CENTRO_COSTOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCENTRO_COSTOSRow(ByVal COD_AREA As String, ByVal DESC_AREA As String, ByVal DESC_CORTA As String, ByVal CTA_ANA As String, ByVal Expr1 As String, ByVal Expr2 As String, ByVal STATUS_SUMARIO As String, ByVal TIPO_DIST As String, ByVal COD_NEG As String, ByVal DESC_NEG As String, ByVal COD_ZONA As String, ByVal DESC_ZONA As String) As CENTRO_COSTOSRow
            Dim rowCENTRO_COSTOSRow As CENTRO_COSTOSRow = CType(Me.NewRow,CENTRO_COSTOSRow)
            Dim columnValuesArray() As Object = New Object() {COD_AREA, DESC_AREA, DESC_CORTA, CTA_ANA, Expr1, Expr2, STATUS_SUMARIO, TIPO_DIST, COD_NEG, DESC_NEG, COD_ZONA, DESC_ZONA}
            rowCENTRO_COSTOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCENTRO_COSTOSRow)
            Return rowCENTRO_COSTOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOD_AREA(ByVal COD_AREA As String) As CENTRO_COSTOSRow
            Return CType(Me.Rows.Find(New Object() {COD_AREA}),CENTRO_COSTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CENTRO_COSTOSDataTable = CType(MyBase.Clone,CENTRO_COSTOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CENTRO_COSTOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_AREA = MyBase.Columns("COD_AREA")
            Me.columnDESC_AREA = MyBase.Columns("DESC_AREA")
            Me.columnDESC_CORTA = MyBase.Columns("DESC_CORTA")
            Me.columnCTA_ANA = MyBase.Columns("CTA_ANA")
            Me.columnExpr1 = MyBase.Columns("Expr1")
            Me.columnExpr2 = MyBase.Columns("Expr2")
            Me.columnSTATUS_SUMARIO = MyBase.Columns("STATUS_SUMARIO")
            Me.columnTIPO_DIST = MyBase.Columns("TIPO_DIST")
            Me.columnCOD_NEG = MyBase.Columns("COD_NEG")
            Me.columnDESC_NEG = MyBase.Columns("DESC_NEG")
            Me.columnCOD_ZONA = MyBase.Columns("COD_ZONA")
            Me.columnDESC_ZONA = MyBase.Columns("DESC_ZONA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_AREA = New Global.System.Data.DataColumn("COD_AREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AREA)
            Me.columnDESC_AREA = New Global.System.Data.DataColumn("DESC_AREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_AREA)
            Me.columnDESC_CORTA = New Global.System.Data.DataColumn("DESC_CORTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_CORTA)
            Me.columnCTA_ANA = New Global.System.Data.DataColumn("CTA_ANA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTA_ANA)
            Me.columnExpr1 = New Global.System.Data.DataColumn("Expr1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr1)
            Me.columnExpr2 = New Global.System.Data.DataColumn("Expr2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr2)
            Me.columnSTATUS_SUMARIO = New Global.System.Data.DataColumn("STATUS_SUMARIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_SUMARIO)
            Me.columnTIPO_DIST = New Global.System.Data.DataColumn("TIPO_DIST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_DIST)
            Me.columnCOD_NEG = New Global.System.Data.DataColumn("COD_NEG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_NEG)
            Me.columnDESC_NEG = New Global.System.Data.DataColumn("DESC_NEG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_NEG)
            Me.columnCOD_ZONA = New Global.System.Data.DataColumn("COD_ZONA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_ZONA)
            Me.columnDESC_ZONA = New Global.System.Data.DataColumn("DESC_ZONA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_ZONA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_AREA}, true))
            Me.columnCOD_AREA.AllowDBNull = false
            Me.columnCOD_AREA.Unique = true
            Me.columnCOD_AREA.MaxLength = 5
            Me.columnDESC_AREA.MaxLength = 30
            Me.columnDESC_CORTA.MaxLength = 15
            Me.columnCTA_ANA.MaxLength = 2
            Me.columnExpr1.ReadOnly = true
            Me.columnExpr1.MaxLength = 1
            Me.columnExpr2.ReadOnly = true
            Me.columnExpr2.MaxLength = 3
            Me.columnSTATUS_SUMARIO.ReadOnly = true
            Me.columnSTATUS_SUMARIO.MaxLength = 2
            Me.columnTIPO_DIST.MaxLength = 1
            Me.columnCOD_NEG.ReadOnly = true
            Me.columnCOD_NEG.MaxLength = 2
            Me.columnDESC_NEG.ReadOnly = true
            Me.columnDESC_NEG.MaxLength = 60
            Me.columnCOD_ZONA.ReadOnly = true
            Me.columnCOD_ZONA.MaxLength = 2
            Me.columnDESC_ZONA.ReadOnly = true
            Me.columnDESC_ZONA.MaxLength = 60
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCENTRO_COSTOSRow() As CENTRO_COSTOSRow
            Return CType(Me.NewRow,CENTRO_COSTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CENTRO_COSTOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CENTRO_COSTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CENTRO_COSTOSRowChangedEvent) Is Nothing) Then
                RaiseEvent CENTRO_COSTOSRowChanged(Me, New CENTRO_COSTOSRowChangeEvent(CType(e.Row,CENTRO_COSTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CENTRO_COSTOSRowChangingEvent) Is Nothing) Then
                RaiseEvent CENTRO_COSTOSRowChanging(Me, New CENTRO_COSTOSRowChangeEvent(CType(e.Row,CENTRO_COSTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CENTRO_COSTOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent CENTRO_COSTOSRowDeleted(Me, New CENTRO_COSTOSRowChangeEvent(CType(e.Row,CENTRO_COSTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CENTRO_COSTOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent CENTRO_COSTOSRowDeleting(Me, New CENTRO_COSTOSRowChangeEvent(CType(e.Row,CENTRO_COSTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCENTRO_COSTOSRow(ByVal row As CENTRO_COSTOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_CENTRO_COSTOS = New DT_CENTRO_COSTOS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CENTRO_COSTOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PROYECTODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_PROYECTO As Global.System.Data.DataColumn
        
        Private columnDESC_PROYECTO As Global.System.Data.DataColumn
        
        Private columnFECHA_INICIO As Global.System.Data.DataColumn
        
        Private columnOBSERVACION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PROYECTO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PROYECTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PROYECTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PROYECTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_PROYECTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_INICIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_INICIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OBSERVACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOBSERVACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PROYECTORow
            Get
                Return CType(Me.Rows(index),PROYECTORow)
            End Get
        End Property
        
        Public Event PROYECTORowChanging As PROYECTORowChangeEventHandler
        
        Public Event PROYECTORowChanged As PROYECTORowChangeEventHandler
        
        Public Event PROYECTORowDeleting As PROYECTORowChangeEventHandler
        
        Public Event PROYECTORowDeleted As PROYECTORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPROYECTORow(ByVal row As PROYECTORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPROYECTORow(ByVal COD_PROYECTO As String, ByVal DESC_PROYECTO As String, ByVal FECHA_INICIO As Date, ByVal OBSERVACION As String) As PROYECTORow
            Dim rowPROYECTORow As PROYECTORow = CType(Me.NewRow,PROYECTORow)
            Dim columnValuesArray() As Object = New Object() {COD_PROYECTO, DESC_PROYECTO, FECHA_INICIO, OBSERVACION}
            rowPROYECTORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPROYECTORow)
            Return rowPROYECTORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOD_PROYECTO(ByVal COD_PROYECTO As String) As PROYECTORow
            Return CType(Me.Rows.Find(New Object() {COD_PROYECTO}),PROYECTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PROYECTODataTable = CType(MyBase.Clone,PROYECTODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PROYECTODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_PROYECTO = MyBase.Columns("COD_PROYECTO")
            Me.columnDESC_PROYECTO = MyBase.Columns("DESC_PROYECTO")
            Me.columnFECHA_INICIO = MyBase.Columns("FECHA_INICIO")
            Me.columnOBSERVACION = MyBase.Columns("OBSERVACION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_PROYECTO = New Global.System.Data.DataColumn("COD_PROYECTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PROYECTO)
            Me.columnDESC_PROYECTO = New Global.System.Data.DataColumn("DESC_PROYECTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PROYECTO)
            Me.columnFECHA_INICIO = New Global.System.Data.DataColumn("FECHA_INICIO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_INICIO)
            Me.columnOBSERVACION = New Global.System.Data.DataColumn("OBSERVACION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOBSERVACION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_PROYECTO}, true))
            Me.columnCOD_PROYECTO.AllowDBNull = false
            Me.columnCOD_PROYECTO.Unique = true
            Me.columnCOD_PROYECTO.MaxLength = 5
            Me.columnDESC_PROYECTO.MaxLength = 60
            Me.columnOBSERVACION.MaxLength = 60
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPROYECTORow() As PROYECTORow
            Return CType(Me.NewRow,PROYECTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PROYECTORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PROYECTORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PROYECTORowChangedEvent) Is Nothing) Then
                RaiseEvent PROYECTORowChanged(Me, New PROYECTORowChangeEvent(CType(e.Row,PROYECTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PROYECTORowChangingEvent) Is Nothing) Then
                RaiseEvent PROYECTORowChanging(Me, New PROYECTORowChangeEvent(CType(e.Row,PROYECTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PROYECTORowDeletedEvent) Is Nothing) Then
                RaiseEvent PROYECTORowDeleted(Me, New PROYECTORowChangeEvent(CType(e.Row,PROYECTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PROYECTORowDeletingEvent) Is Nothing) Then
                RaiseEvent PROYECTORowDeleting(Me, New PROYECTORowChangeEvent(CType(e.Row,PROYECTORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePROYECTORow(ByVal row As PROYECTORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_CENTRO_COSTOS = New DT_CENTRO_COSTOS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PROYECTODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AUX_COMPROBANTEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_COMP As Global.System.Data.DataColumn
        
        Private columnCOD_AUX As Global.System.Data.DataColumn
        
        Private columnDESC_COMP As Global.System.Data.DataColumn
        
        Private columnCOD_SUCURSAL As Global.System.Data.DataColumn
        
        Private columnDESC_AUX As Global.System.Data.DataColumn
        
        Private columnDESC_SUCURSAL As Global.System.Data.DataColumn
        
        Private columnSTATUS_EXT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AUX_COMPROBANTE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_SUCURSALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_SUCURSAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_SUCURSALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_SUCURSAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_EXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_EXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AUX_COMPROBANTERow
            Get
                Return CType(Me.Rows(index),AUX_COMPROBANTERow)
            End Get
        End Property
        
        Public Event AUX_COMPROBANTERowChanging As AUX_COMPROBANTERowChangeEventHandler
        
        Public Event AUX_COMPROBANTERowChanged As AUX_COMPROBANTERowChangeEventHandler
        
        Public Event AUX_COMPROBANTERowDeleting As AUX_COMPROBANTERowChangeEventHandler
        
        Public Event AUX_COMPROBANTERowDeleted As AUX_COMPROBANTERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAUX_COMPROBANTERow(ByVal row As AUX_COMPROBANTERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAUX_COMPROBANTERow(ByVal COD_COMP As String, ByVal COD_AUX As String, ByVal DESC_COMP As String, ByVal COD_SUCURSAL As String, ByVal DESC_AUX As String, ByVal DESC_SUCURSAL As String, ByVal STATUS_EXT As String) As AUX_COMPROBANTERow
            Dim rowAUX_COMPROBANTERow As AUX_COMPROBANTERow = CType(Me.NewRow,AUX_COMPROBANTERow)
            Dim columnValuesArray() As Object = New Object() {COD_COMP, COD_AUX, DESC_COMP, COD_SUCURSAL, DESC_AUX, DESC_SUCURSAL, STATUS_EXT}
            rowAUX_COMPROBANTERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAUX_COMPROBANTERow)
            Return rowAUX_COMPROBANTERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOD_COMPCOD_AUX(ByVal COD_COMP As String, ByVal COD_AUX As String) As AUX_COMPROBANTERow
            Return CType(Me.Rows.Find(New Object() {COD_COMP, COD_AUX}),AUX_COMPROBANTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AUX_COMPROBANTEDataTable = CType(MyBase.Clone,AUX_COMPROBANTEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AUX_COMPROBANTEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnDESC_COMP = MyBase.Columns("DESC_COMP")
            Me.columnCOD_SUCURSAL = MyBase.Columns("COD_SUCURSAL")
            Me.columnDESC_AUX = MyBase.Columns("DESC_AUX")
            Me.columnDESC_SUCURSAL = MyBase.Columns("DESC_SUCURSAL")
            Me.columnSTATUS_EXT = MyBase.Columns("STATUS_EXT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_COMP = New Global.System.Data.DataColumn("COD_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnCOD_AUX = New Global.System.Data.DataColumn("COD_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnDESC_COMP = New Global.System.Data.DataColumn("DESC_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_COMP)
            Me.columnCOD_SUCURSAL = New Global.System.Data.DataColumn("COD_SUCURSAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_SUCURSAL)
            Me.columnDESC_AUX = New Global.System.Data.DataColumn("DESC_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_AUX)
            Me.columnDESC_SUCURSAL = New Global.System.Data.DataColumn("DESC_SUCURSAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_SUCURSAL)
            Me.columnSTATUS_EXT = New Global.System.Data.DataColumn("STATUS_EXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_EXT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_COMP, Me.columnCOD_AUX}, true))
            Me.columnCOD_COMP.AllowDBNull = false
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnCOD_AUX.AllowDBNull = false
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnDESC_COMP.AllowDBNull = false
            Me.columnDESC_COMP.MaxLength = 30
            Me.columnCOD_SUCURSAL.MaxLength = 2
            Me.columnDESC_AUX.MaxLength = 30
            Me.columnDESC_SUCURSAL.MaxLength = 60
            Me.columnSTATUS_EXT.ReadOnly = true
            Me.columnSTATUS_EXT.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAUX_COMPROBANTERow() As AUX_COMPROBANTERow
            Return CType(Me.NewRow,AUX_COMPROBANTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AUX_COMPROBANTERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AUX_COMPROBANTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AUX_COMPROBANTERowChangedEvent) Is Nothing) Then
                RaiseEvent AUX_COMPROBANTERowChanged(Me, New AUX_COMPROBANTERowChangeEvent(CType(e.Row,AUX_COMPROBANTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AUX_COMPROBANTERowChangingEvent) Is Nothing) Then
                RaiseEvent AUX_COMPROBANTERowChanging(Me, New AUX_COMPROBANTERowChangeEvent(CType(e.Row,AUX_COMPROBANTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AUX_COMPROBANTERowDeletedEvent) Is Nothing) Then
                RaiseEvent AUX_COMPROBANTERowDeleted(Me, New AUX_COMPROBANTERowChangeEvent(CType(e.Row,AUX_COMPROBANTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AUX_COMPROBANTERowDeletingEvent) Is Nothing) Then
                RaiseEvent AUX_COMPROBANTERowDeleting(Me, New AUX_COMPROBANTERowChangeEvent(CType(e.Row,AUX_COMPROBANTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAUX_COMPROBANTERow(ByVal row As AUX_COMPROBANTERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_CENTRO_COSTOS = New DT_CENTRO_COSTOS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AUX_COMPROBANTEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CENTRO_COSTOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableCENTRO_COSTOS As CENTRO_COSTOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCENTRO_COSTOS = CType(Me.Table,CENTRO_COSTOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AREA() As String
            Get
                Return CType(Me(Me.tableCENTRO_COSTOS.COD_AREAColumn),String)
            End Get
            Set
                Me(Me.tableCENTRO_COSTOS.COD_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_AREA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCENTRO_COSTOS.DESC_AREAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_AREA' de la tabla 'CENTRO_COSTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCENTRO_COSTOS.DESC_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_CORTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCENTRO_COSTOS.DESC_CORTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_CORTA' de la tabla 'CENTRO_COSTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCENTRO_COSTOS.DESC_CORTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTA_ANA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCENTRO_COSTOS.CTA_ANAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTA_ANA' de la tabla 'CENTRO_COSTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCENTRO_COSTOS.CTA_ANAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCENTRO_COSTOS.Expr1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Expr1' de la tabla 'CENTRO_COSTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCENTRO_COSTOS.Expr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCENTRO_COSTOS.Expr2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Expr2' de la tabla 'CENTRO_COSTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCENTRO_COSTOS.Expr2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_SUMARIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCENTRO_COSTOS.STATUS_SUMARIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_SUMARIO' de la tabla 'CENTRO_COSTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCENTRO_COSTOS.STATUS_SUMARIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_DIST() As String
            Get
                Try 
                    Return CType(Me(Me.tableCENTRO_COSTOS.TIPO_DISTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_DIST' de la tabla 'CENTRO_COSTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCENTRO_COSTOS.TIPO_DISTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_NEG() As String
            Get
                Try 
                    Return CType(Me(Me.tableCENTRO_COSTOS.COD_NEGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_NEG' de la tabla 'CENTRO_COSTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCENTRO_COSTOS.COD_NEGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_NEG() As String
            Get
                Try 
                    Return CType(Me(Me.tableCENTRO_COSTOS.DESC_NEGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_NEG' de la tabla 'CENTRO_COSTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCENTRO_COSTOS.DESC_NEGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_ZONA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCENTRO_COSTOS.COD_ZONAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_ZONA' de la tabla 'CENTRO_COSTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCENTRO_COSTOS.COD_ZONAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_ZONA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCENTRO_COSTOS.DESC_ZONAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_ZONA' de la tabla 'CENTRO_COSTOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCENTRO_COSTOS.DESC_ZONAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_AREANull() As Boolean
            Return Me.IsNull(Me.tableCENTRO_COSTOS.DESC_AREAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_AREANull()
            Me(Me.tableCENTRO_COSTOS.DESC_AREAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_CORTANull() As Boolean
            Return Me.IsNull(Me.tableCENTRO_COSTOS.DESC_CORTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_CORTANull()
            Me(Me.tableCENTRO_COSTOS.DESC_CORTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTA_ANANull() As Boolean
            Return Me.IsNull(Me.tableCENTRO_COSTOS.CTA_ANAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTA_ANANull()
            Me(Me.tableCENTRO_COSTOS.CTA_ANAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tableCENTRO_COSTOS.Expr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpr1Null()
            Me(Me.tableCENTRO_COSTOS.Expr1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpr2Null() As Boolean
            Return Me.IsNull(Me.tableCENTRO_COSTOS.Expr2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpr2Null()
            Me(Me.tableCENTRO_COSTOS.Expr2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_SUMARIONull() As Boolean
            Return Me.IsNull(Me.tableCENTRO_COSTOS.STATUS_SUMARIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_SUMARIONull()
            Me(Me.tableCENTRO_COSTOS.STATUS_SUMARIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_DISTNull() As Boolean
            Return Me.IsNull(Me.tableCENTRO_COSTOS.TIPO_DISTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_DISTNull()
            Me(Me.tableCENTRO_COSTOS.TIPO_DISTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_NEGNull() As Boolean
            Return Me.IsNull(Me.tableCENTRO_COSTOS.COD_NEGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_NEGNull()
            Me(Me.tableCENTRO_COSTOS.COD_NEGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_NEGNull() As Boolean
            Return Me.IsNull(Me.tableCENTRO_COSTOS.DESC_NEGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_NEGNull()
            Me(Me.tableCENTRO_COSTOS.DESC_NEGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_ZONANull() As Boolean
            Return Me.IsNull(Me.tableCENTRO_COSTOS.COD_ZONAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_ZONANull()
            Me(Me.tableCENTRO_COSTOS.COD_ZONAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_ZONANull() As Boolean
            Return Me.IsNull(Me.tableCENTRO_COSTOS.DESC_ZONAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_ZONANull()
            Me(Me.tableCENTRO_COSTOS.DESC_ZONAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PROYECTORow
        Inherits Global.System.Data.DataRow
        
        Private tablePROYECTO As PROYECTODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePROYECTO = CType(Me.Table,PROYECTODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PROYECTO() As String
            Get
                Return CType(Me(Me.tablePROYECTO.COD_PROYECTOColumn),String)
            End Get
            Set
                Me(Me.tablePROYECTO.COD_PROYECTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PROYECTO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROYECTO.DESC_PROYECTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_PROYECTO' de la tabla 'PROYECTO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROYECTO.DESC_PROYECTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_INICIO() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePROYECTO.FECHA_INICIOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_INICIO' de la tabla 'PROYECTO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROYECTO.FECHA_INICIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OBSERVACION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROYECTO.OBSERVACIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OBSERVACION' de la tabla 'PROYECTO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROYECTO.OBSERVACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PROYECTONull() As Boolean
            Return Me.IsNull(Me.tablePROYECTO.DESC_PROYECTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PROYECTONull()
            Me(Me.tablePROYECTO.DESC_PROYECTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_INICIONull() As Boolean
            Return Me.IsNull(Me.tablePROYECTO.FECHA_INICIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_INICIONull()
            Me(Me.tablePROYECTO.FECHA_INICIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOBSERVACIONNull() As Boolean
            Return Me.IsNull(Me.tablePROYECTO.OBSERVACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOBSERVACIONNull()
            Me(Me.tablePROYECTO.OBSERVACIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AUX_COMPROBANTERow
        Inherits Global.System.Data.DataRow
        
        Private tableAUX_COMPROBANTE As AUX_COMPROBANTEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAUX_COMPROBANTE = CType(Me.Table,AUX_COMPROBANTEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Return CType(Me(Me.tableAUX_COMPROBANTE.COD_COMPColumn),String)
            End Get
            Set
                Me(Me.tableAUX_COMPROBANTE.COD_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Return CType(Me(Me.tableAUX_COMPROBANTE.COD_AUXColumn),String)
            End Get
            Set
                Me(Me.tableAUX_COMPROBANTE.COD_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_COMP() As String
            Get
                Return CType(Me(Me.tableAUX_COMPROBANTE.DESC_COMPColumn),String)
            End Get
            Set
                Me(Me.tableAUX_COMPROBANTE.DESC_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_SUCURSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableAUX_COMPROBANTE.COD_SUCURSALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_SUCURSAL' de la tabla 'AUX_COMPROBANTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAUX_COMPROBANTE.COD_SUCURSALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_AUX() As String
            Get
                Try 
                    Return CType(Me(Me.tableAUX_COMPROBANTE.DESC_AUXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_AUX' de la tabla 'AUX_COMPROBANTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAUX_COMPROBANTE.DESC_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_SUCURSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableAUX_COMPROBANTE.DESC_SUCURSALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_SUCURSAL' de la tabla 'AUX_COMPROBANTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAUX_COMPROBANTE.DESC_SUCURSALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_EXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAUX_COMPROBANTE.STATUS_EXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_EXT' de la tabla 'AUX_COMPROBANTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAUX_COMPROBANTE.STATUS_EXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_SUCURSALNull() As Boolean
            Return Me.IsNull(Me.tableAUX_COMPROBANTE.COD_SUCURSALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_SUCURSALNull()
            Me(Me.tableAUX_COMPROBANTE.COD_SUCURSALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_AUXNull() As Boolean
            Return Me.IsNull(Me.tableAUX_COMPROBANTE.DESC_AUXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_AUXNull()
            Me(Me.tableAUX_COMPROBANTE.DESC_AUXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_SUCURSALNull() As Boolean
            Return Me.IsNull(Me.tableAUX_COMPROBANTE.DESC_SUCURSALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_SUCURSALNull()
            Me(Me.tableAUX_COMPROBANTE.DESC_SUCURSALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_EXTNull() As Boolean
            Return Me.IsNull(Me.tableAUX_COMPROBANTE.STATUS_EXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_EXTNull()
            Me(Me.tableAUX_COMPROBANTE.STATUS_EXTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CENTRO_COSTOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CENTRO_COSTOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CENTRO_COSTOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CENTRO_COSTOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PROYECTORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PROYECTORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PROYECTORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PROYECTORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AUX_COMPROBANTERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AUX_COMPROBANTERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AUX_COMPROBANTERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AUX_COMPROBANTERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DT_CENTRO_COSTOSTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CENTRO_COSTOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CENTRO_COSTOS"
            tableMapping.ColumnMappings.Add("COD_AREA", "COD_AREA")
            tableMapping.ColumnMappings.Add("DESC_AREA", "DESC_AREA")
            tableMapping.ColumnMappings.Add("DESC_CORTA", "DESC_CORTA")
            tableMapping.ColumnMappings.Add("CTA_ANA", "CTA_ANA")
            tableMapping.ColumnMappings.Add("Expr1", "Expr1")
            tableMapping.ColumnMappings.Add("Expr2", "Expr2")
            tableMapping.ColumnMappings.Add("STATUS_SUMARIO", "STATUS_SUMARIO")
            tableMapping.ColumnMappings.Add("TIPO_DIST", "TIPO_DIST")
            tableMapping.ColumnMappings.Add("COD_NEG", "COD_NEG")
            tableMapping.ColumnMappings.Add("DESC_NEG", "DESC_NEG")
            tableMapping.ColumnMappings.Add("COD_ZONA", "COD_ZONA")
            tableMapping.ColumnMappings.Add("DESC_ZONA", "DESC_ZONA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AREA] WHERE (([COD_AREA] = @Original_COD_AREA) AND ((@IsNull_D"& _ 
                "ESC_AREA = 1 AND [DESC_AREA] IS NULL) OR ([DESC_AREA] = @Original_DESC_AREA)) AN"& _ 
                "D ((@IsNull_DESC_CORTA = 1 AND [DESC_CORTA] IS NULL) OR ([DESC_CORTA] = @Origina"& _ 
                "l_DESC_CORTA)) AND ((@IsNull_CTA_ANA = 1 AND [CTA_ANA] IS NULL) OR ([CTA_ANA] = "& _ 
                "@Original_CTA_ANA)) AND ((@IsNull_TIPO_DIST = 1 AND [TIPO_DIST] IS NULL) OR ([TI"& _ 
                "PO_DIST] = @Original_TIPO_DIST)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COD_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESC_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_AREA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESC_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESC_CORTA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_CORTA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESC_CORTA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_CORTA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CTA_ANA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_ANA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CTA_ANA", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_ANA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TIPO_DIST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_DIST", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TIPO_DIST", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_DIST", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AREA] ([COD_AREA], [DESC_AREA], [DESC_CORTA], [CTA_ANA], [TIPO"& _ 
                "_DIST]) VALUES (@COD_AREA, @DESC_AREA, @DESC_CORTA, @CTA_ANA, @TIPO_DIST);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT COD_AREA, DESC_AREA, DESC_CORTA, CTA_ANA, SUBSTRING(COD_AREA, 1, 1) AS Expr1,"& _ 
                " CASE WHEN len(SUBSTRING(COD_AREA , 1 , 3)) = '1' THEN '  ' ELSE SUBSTRING(COD_A"& _ 
                "REA , 1 , 3) END AS Expr2, CASE WHEN STATUS_SUMARIO = '1' THEN 'Si' ELSE 'No' EN"& _ 
                "D AS STATUS_SUMARIO, TIPO_DIST, ISNULL(COD_NEGOCIO, '') AS COD_NEG, (SELECT DESC"& _ 
                "RIPCION FROM DIRECTORIO WHERE (TABLA_COD = 'TNEGO') AND (TIPO <> 'T') AND (CODIG"& _ 
                "O = ISNULL(AREA.COD_NEGOCIO, ''))) AS DESC_NEG, ISNULL(COD_ZONA, '') AS COD_ZONA"& _ 
                ", (SELECT DESCRIPCION FROM DIRECTORIO AS DIRECTORIO_1 WHERE (TABLA_COD = 'TNEGZ'"& _ 
                ") AND (TIPO <> 'T') AND (CODIGO = ISNULL(AREA.COD_ZONA, ''))) AS DESC_ZONA FROM "& _ 
                "AREA WHERE (COD_AREA = @COD_AREA)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESC_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESC_CORTA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_CORTA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_ANA", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_ANA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_DIST", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_DIST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[AREA] SET [COD_AREA] = @COD_AREA, [DESC_AREA] = @DESC_AREA, [DESC_C"& _ 
                "ORTA] = @DESC_CORTA, [CTA_ANA] = @CTA_ANA, [TIPO_DIST] = @TIPO_DIST WHERE (([COD"& _ 
                "_AREA] = @Original_COD_AREA) AND ((@IsNull_DESC_AREA = 1 AND [DESC_AREA] IS NULL"& _ 
                ") OR ([DESC_AREA] = @Original_DESC_AREA)) AND ((@IsNull_DESC_CORTA = 1 AND [DESC"& _ 
                "_CORTA] IS NULL) OR ([DESC_CORTA] = @Original_DESC_CORTA)) AND ((@IsNull_CTA_ANA"& _ 
                " = 1 AND [CTA_ANA] IS NULL) OR ([CTA_ANA] = @Original_CTA_ANA)) AND ((@IsNull_TI"& _ 
                "PO_DIST = 1 AND [TIPO_DIST] IS NULL) OR ([TIPO_DIST] = @Original_TIPO_DIST)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT COD_AREA, DESC_AREA, DESC_CORTA, CTA_ANA, SUBSTRING(COD_AREA, 1, 1) AS Ex"& _ 
                "pr1, CASE WHEN len(SUBSTRING(COD_AREA , 1 , 3)) = '1' THEN '  ' ELSE SUBSTRING(C"& _ 
                "OD_AREA , 1 , 3) END AS Expr2, CASE WHEN STATUS_SUMARIO = '1' THEN 'Si' ELSE 'No"& _ 
                "' END AS STATUS_SUMARIO, TIPO_DIST, ISNULL(COD_NEGOCIO, '') AS COD_NEG, (SELECT "& _ 
                "DESCRIPCION FROM DIRECTORIO WHERE (TABLA_COD = 'TNEGO') AND (TIPO <> 'T') AND (C"& _ 
                "ODIGO = ISNULL(AREA.COD_NEGOCIO, ''))) AS DESC_NEG, ISNULL(COD_ZONA, '') AS COD_"& _ 
                "ZONA, (SELECT DESCRIPCION FROM DIRECTORIO AS DIRECTORIO_1 WHERE (TABLA_COD = 'TN"& _ 
                "EGZ') AND (TIPO <> 'T') AND (CODIGO = ISNULL(AREA.COD_ZONA, ''))) AS DESC_ZONA F"& _ 
                "ROM AREA WHERE (COD_AREA = @COD_AREA)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESC_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_AREA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESC_CORTA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_CORTA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTA_ANA", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_ANA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO_DIST", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_DIST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COD_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESC_AREA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_AREA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESC_AREA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_AREA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESC_CORTA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_CORTA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESC_CORTA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_CORTA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CTA_ANA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_ANA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CTA_ANA", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CTA_ANA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TIPO_DIST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_DIST", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TIPO_DIST", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TIPO_DIST", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"COD_AREA, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"DESC_AREA, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"DESC_CORTA,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"CTA_ANA, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SUBSTRING(COD_AREA,"& _ 
                " 1, 1) AS Expr1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"CASE WHEN len(SUBSTRING(COD_AREA, 1, 3)) = '1' THEN '  ' "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"EL"& _ 
                "SE SUBSTRING(COD_AREA, 1, 3) END AS Expr2,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"CASE WHEN STATUS_SUMARIO='1' THEN 'S"& _ 
                "i' else 'No' end as STATUS_SUMARIO,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"TIPO_DIST,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"isnull(COD_NEGOCIO,'') AS [COD_"& _ 
                "NEG],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(select DESCRIPCION from directorio where tabla_cod='TNEGO' and TIPO<>'T'"& _ 
                " and codigo=isnull(COD_NEGOCIO,'')) AS [DESC_NEG],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"isnull(COD_ZONA,'') AS [COD_"& _ 
                "ZONA],"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(select DESCRIPCION from directorio where tabla_cod='TNEGZ' and TIPO<>'T"& _ 
                "' and codigo=isnull(COD_ZONA,'')) AS [DESC_ZONA]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM dbo.AREA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_CENTRO_COSTOS.CENTRO_COSTOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DT_CENTRO_COSTOS.CENTRO_COSTOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DT_CENTRO_COSTOS.CENTRO_COSTOSDataTable = New DT_CENTRO_COSTOS.CENTRO_COSTOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DT_CENTRO_COSTOS.CENTRO_COSTOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DT_CENTRO_COSTOS) As Integer
            Return Me.Adapter.Update(dataSet, "CENTRO_COSTOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COD_AREA As String, ByVal Original_DESC_AREA As String, ByVal Original_DESC_CORTA As String, ByVal Original_CTA_ANA As String, ByVal Original_TIPO_DIST As String) As Integer
            If (Original_COD_AREA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COD_AREA")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COD_AREA,String)
            End If
            If (Original_DESC_AREA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DESC_AREA,String)
            End If
            If (Original_DESC_CORTA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DESC_CORTA,String)
            End If
            If (Original_CTA_ANA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CTA_ANA,String)
            End If
            If (Original_TIPO_DIST Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_TIPO_DIST,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COD_AREA As String, ByVal DESC_AREA As String, ByVal DESC_CORTA As String, ByVal CTA_ANA As String, ByVal TIPO_DIST As String) As Integer
            If (COD_AREA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_AREA")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(COD_AREA,String)
            End If
            If (DESC_AREA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DESC_AREA,String)
            End If
            If (DESC_CORTA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DESC_CORTA,String)
            End If
            If (CTA_ANA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CTA_ANA,String)
            End If
            If (TIPO_DIST Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TIPO_DIST,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COD_AREA As String, ByVal DESC_AREA As String, ByVal DESC_CORTA As String, ByVal CTA_ANA As String, ByVal TIPO_DIST As String, ByVal Original_COD_AREA As String, ByVal Original_DESC_AREA As String, ByVal Original_DESC_CORTA As String, ByVal Original_CTA_ANA As String, ByVal Original_TIPO_DIST As String) As Integer
            If (COD_AREA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_AREA")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COD_AREA,String)
            End If
            If (DESC_AREA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DESC_AREA,String)
            End If
            If (DESC_CORTA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DESC_CORTA,String)
            End If
            If (CTA_ANA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CTA_ANA,String)
            End If
            If (TIPO_DIST Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TIPO_DIST,String)
            End If
            If (Original_COD_AREA Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COD_AREA")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_COD_AREA,String)
            End If
            If (Original_DESC_AREA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_DESC_AREA,String)
            End If
            If (Original_DESC_CORTA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_DESC_CORTA,String)
            End If
            If (Original_CTA_ANA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CTA_ANA,String)
            End If
            If (Original_TIPO_DIST Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_TIPO_DIST,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DESC_AREA As String, ByVal DESC_CORTA As String, ByVal CTA_ANA As String, ByVal TIPO_DIST As String, ByVal Original_COD_AREA As String, ByVal Original_DESC_AREA As String, ByVal Original_DESC_CORTA As String, ByVal Original_CTA_ANA As String, ByVal Original_TIPO_DIST As String) As Integer
            Return Me.Update(Original_COD_AREA, DESC_AREA, DESC_CORTA, CTA_ANA, TIPO_DIST, Original_COD_AREA, Original_DESC_AREA, Original_DESC_CORTA, Original_CTA_ANA, Original_TIPO_DIST)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PROYECTOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PROYECTO"
            tableMapping.ColumnMappings.Add("COD_PROYECTO", "COD_PROYECTO")
            tableMapping.ColumnMappings.Add("DESC_PROYECTO", "DESC_PROYECTO")
            tableMapping.ColumnMappings.Add("FECHA_INICIO", "FECHA_INICIO")
            tableMapping.ColumnMappings.Add("OBSERVACION", "OBSERVACION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PROYECTO] WHERE (([COD_PROYECTO] = @Original_COD_PROYECTO) AND"& _ 
                " ((@IsNull_DESC_PROYECTO = 1 AND [DESC_PROYECTO] IS NULL) OR ([DESC_PROYECTO] = "& _ 
                "@Original_DESC_PROYECTO)) AND ((@IsNull_FECHA_INICIO = 1 AND [FECHA_INICIO] IS N"& _ 
                "ULL) OR ([FECHA_INICIO] = @Original_FECHA_INICIO)) AND ((@IsNull_OBSERVACION = 1"& _ 
                " AND [OBSERVACION] IS NULL) OR ([OBSERVACION] = @Original_OBSERVACION)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COD_PROYECTO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_PROYECTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESC_PROYECTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_PROYECTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESC_PROYECTO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_PROYECTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FECHA_INICIO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_INICIO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OBSERVACION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBSERVACION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OBSERVACION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBSERVACION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PROYECTO] ([COD_PROYECTO], [DESC_PROYECTO], [FECHA_INICIO], [O"& _ 
                "BSERVACION]) VALUES (@COD_PROYECTO, @DESC_PROYECTO, @FECHA_INICIO, @OBSERVACION)"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COD_PROYECTO, DESC_PROYECTO, FECHA_INICIO, OBSERVACION FROM PROYECTO W"& _ 
                "HERE (COD_PROYECTO = @COD_PROYECTO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_PROYECTO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_PROYECTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESC_PROYECTO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_PROYECTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_INICIO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OBSERVACION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBSERVACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PROYECTO] SET [COD_PROYECTO] = @COD_PROYECTO, [DESC_PROYECTO] = @DE"& _ 
                "SC_PROYECTO, [FECHA_INICIO] = @FECHA_INICIO, [OBSERVACION] = @OBSERVACION WHERE "& _ 
                "(([COD_PROYECTO] = @Original_COD_PROYECTO) AND ((@IsNull_DESC_PROYECTO = 1 AND ["& _ 
                "DESC_PROYECTO] IS NULL) OR ([DESC_PROYECTO] = @Original_DESC_PROYECTO)) AND ((@I"& _ 
                "sNull_FECHA_INICIO = 1 AND [FECHA_INICIO] IS NULL) OR ([FECHA_INICIO] = @Origina"& _ 
                "l_FECHA_INICIO)) AND ((@IsNull_OBSERVACION = 1 AND [OBSERVACION] IS NULL) OR ([O"& _ 
                "BSERVACION] = @Original_OBSERVACION)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COD_PROYECTO, DESC_PROYECTO, FEC"& _ 
                "HA_INICIO, OBSERVACION FROM PROYECTO WHERE (COD_PROYECTO = @COD_PROYECTO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_PROYECTO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_PROYECTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESC_PROYECTO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_PROYECTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_INICIO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OBSERVACION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBSERVACION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COD_PROYECTO", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_PROYECTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESC_PROYECTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_PROYECTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESC_PROYECTO", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC_PROYECTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FECHA_INICIO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FECHA_INICIO", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FECHA_INICIO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OBSERVACION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBSERVACION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OBSERVACION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OBSERVACION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"COD_PROYECTO,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"DESC_PROYECTO,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FECHA_INICIO,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"OBSERVACION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM db"& _ 
                "o.PROYECTO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ISNULL(FECHA_CIERRE,'')=''"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_CENTRO_COSTOS.PROYECTODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DT_CENTRO_COSTOS.PROYECTODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DT_CENTRO_COSTOS.PROYECTODataTable = New DT_CENTRO_COSTOS.PROYECTODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DT_CENTRO_COSTOS.PROYECTODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DT_CENTRO_COSTOS) As Integer
            Return Me.Adapter.Update(dataSet, "PROYECTO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COD_PROYECTO As String, ByVal Original_DESC_PROYECTO As String, ByVal Original_FECHA_INICIO As Global.System.Nullable(Of Date), ByVal Original_OBSERVACION As String) As Integer
            If (Original_COD_PROYECTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COD_PROYECTO")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COD_PROYECTO,String)
            End If
            If (Original_DESC_PROYECTO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DESC_PROYECTO,String)
            End If
            If (Original_FECHA_INICIO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FECHA_INICIO.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_OBSERVACION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_OBSERVACION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal COD_PROYECTO As String, ByVal DESC_PROYECTO As String, ByVal FECHA_INICIO As Global.System.Nullable(Of Date), ByVal OBSERVACION As String) As Integer
            If (COD_PROYECTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_PROYECTO")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(COD_PROYECTO,String)
            End If
            If (DESC_PROYECTO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DESC_PROYECTO,String)
            End If
            If (FECHA_INICIO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FECHA_INICIO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (OBSERVACION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(OBSERVACION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal COD_PROYECTO As String, ByVal DESC_PROYECTO As String, ByVal FECHA_INICIO As Global.System.Nullable(Of Date), ByVal OBSERVACION As String, ByVal Original_COD_PROYECTO As String, ByVal Original_DESC_PROYECTO As String, ByVal Original_FECHA_INICIO As Global.System.Nullable(Of Date), ByVal Original_OBSERVACION As String) As Integer
            If (COD_PROYECTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_PROYECTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COD_PROYECTO,String)
            End If
            If (DESC_PROYECTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DESC_PROYECTO,String)
            End If
            If (FECHA_INICIO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FECHA_INICIO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (OBSERVACION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(OBSERVACION,String)
            End If
            If (Original_COD_PROYECTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COD_PROYECTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_COD_PROYECTO,String)
            End If
            If (Original_DESC_PROYECTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_DESC_PROYECTO,String)
            End If
            If (Original_FECHA_INICIO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FECHA_INICIO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_OBSERVACION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_OBSERVACION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DESC_PROYECTO As String, ByVal FECHA_INICIO As Global.System.Nullable(Of Date), ByVal OBSERVACION As String, ByVal Original_COD_PROYECTO As String, ByVal Original_DESC_PROYECTO As String, ByVal Original_FECHA_INICIO As Global.System.Nullable(Of Date), ByVal Original_OBSERVACION As String) As Integer
            Return Me.Update(Original_COD_PROYECTO, DESC_PROYECTO, FECHA_INICIO, OBSERVACION, Original_COD_PROYECTO, Original_DESC_PROYECTO, Original_FECHA_INICIO, Original_OBSERVACION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AUX_COMPROBANTETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AUX_COMPROBANTE"
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("DESC_COMP", "DESC_COMP")
            tableMapping.ColumnMappings.Add("COD_SUCURSAL", "COD_SUCURSAL")
            tableMapping.ColumnMappings.Add("DESC_AUX", "DESC_AUX")
            tableMapping.ColumnMappings.Add("DESC_SUCURSAL", "DESC_SUCURSAL")
            tableMapping.ColumnMappings.Add("STATUS_EXT", "STATUS_EXT")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"A.COD_COMP,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"A.COD_AUX,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"A.DESC_COMP,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"A.COD_SUCURSAL,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"CASE WHEN A."& _ 
                "STATUS_EXT_CONT='1' THEN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"'SI' ELSE 'NO' END AS STATUS_EXT,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"B.DESC_AUX,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"C.DESC"& _ 
                "_SUCURSAL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM dbo.COMPROBANTE A"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"LEFT JOIN AUXILIAR B ON A.COD_AUX=B.COD_AUX"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"LEFT JOIN SUCURSAL C ON A.COD_SUCURSAL=C.COD_SUCURSAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_CENTRO_COSTOS.AUX_COMPROBANTEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DT_CENTRO_COSTOS.AUX_COMPROBANTEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DT_CENTRO_COSTOS.AUX_COMPROBANTEDataTable = New DT_CENTRO_COSTOS.AUX_COMPROBANTEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace

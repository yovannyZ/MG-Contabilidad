'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.7905
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DT_REP_ANA_OTROS"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DT_REP_ANA_OTROS
    Inherits Global.System.Data.DataSet
    
    Private tableREPORTE_SALDOS_TOTROS As REPORTE_SALDOS_TOTROSDataTable
    
    Private tableREPORTE_TOTROS_KARDEX_ACUMULADO As REPORTE_TOTROS_KARDEX_ACUMULADODataTable
    
    Private tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO As REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable
    
    Private tableREPORTE_CONCILIADAS_OTROS As REPORTE_CONCILIADAS_OTROSDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("REPORTE_SALDOS_TOTROS")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_SALDOS_TOTROSDataTable(ds.Tables("REPORTE_SALDOS_TOTROS")))
            End If
            If (Not (ds.Tables("REPORTE_TOTROS_KARDEX_ACUMULADO")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_TOTROS_KARDEX_ACUMULADODataTable(ds.Tables("REPORTE_TOTROS_KARDEX_ACUMULADO")))
            End If
            If (Not (ds.Tables("REPORTE_TOTROS_KARDEX_NO_ACUMULADO")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable(ds.Tables("REPORTE_TOTROS_KARDEX_NO_ACUMULADO")))
            End If
            If (Not (ds.Tables("REPORTE_CONCILIADAS_OTROS")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CONCILIADAS_OTROSDataTable(ds.Tables("REPORTE_CONCILIADAS_OTROS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_SALDOS_TOTROS() As REPORTE_SALDOS_TOTROSDataTable
        Get
            Return Me.tableREPORTE_SALDOS_TOTROS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_TOTROS_KARDEX_ACUMULADO() As REPORTE_TOTROS_KARDEX_ACUMULADODataTable
        Get
            Return Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_TOTROS_KARDEX_NO_ACUMULADO() As REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable
        Get
            Return Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_CONCILIADAS_OTROS() As REPORTE_CONCILIADAS_OTROSDataTable
        Get
            Return Me.tableREPORTE_CONCILIADAS_OTROS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DT_REP_ANA_OTROS = CType(MyBase.Clone,DT_REP_ANA_OTROS)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("REPORTE_SALDOS_TOTROS")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_SALDOS_TOTROSDataTable(ds.Tables("REPORTE_SALDOS_TOTROS")))
            End If
            If (Not (ds.Tables("REPORTE_TOTROS_KARDEX_ACUMULADO")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_TOTROS_KARDEX_ACUMULADODataTable(ds.Tables("REPORTE_TOTROS_KARDEX_ACUMULADO")))
            End If
            If (Not (ds.Tables("REPORTE_TOTROS_KARDEX_NO_ACUMULADO")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable(ds.Tables("REPORTE_TOTROS_KARDEX_NO_ACUMULADO")))
            End If
            If (Not (ds.Tables("REPORTE_CONCILIADAS_OTROS")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CONCILIADAS_OTROSDataTable(ds.Tables("REPORTE_CONCILIADAS_OTROS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableREPORTE_SALDOS_TOTROS = CType(MyBase.Tables("REPORTE_SALDOS_TOTROS"),REPORTE_SALDOS_TOTROSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_SALDOS_TOTROS) Is Nothing) Then
                Me.tableREPORTE_SALDOS_TOTROS.InitVars
            End If
        End If
        Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO = CType(MyBase.Tables("REPORTE_TOTROS_KARDEX_ACUMULADO"),REPORTE_TOTROS_KARDEX_ACUMULADODataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO) Is Nothing) Then
                Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.InitVars
            End If
        End If
        Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO = CType(MyBase.Tables("REPORTE_TOTROS_KARDEX_NO_ACUMULADO"),REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO) Is Nothing) Then
                Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.InitVars
            End If
        End If
        Me.tableREPORTE_CONCILIADAS_OTROS = CType(MyBase.Tables("REPORTE_CONCILIADAS_OTROS"),REPORTE_CONCILIADAS_OTROSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_CONCILIADAS_OTROS) Is Nothing) Then
                Me.tableREPORTE_CONCILIADAS_OTROS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DT_REP_ANA_OTROS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DT_REP_ANA_OTROS.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableREPORTE_SALDOS_TOTROS = New REPORTE_SALDOS_TOTROSDataTable
        MyBase.Tables.Add(Me.tableREPORTE_SALDOS_TOTROS)
        Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO = New REPORTE_TOTROS_KARDEX_ACUMULADODataTable
        MyBase.Tables.Add(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO)
        Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO = New REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable
        MyBase.Tables.Add(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO)
        Me.tableREPORTE_CONCILIADAS_OTROS = New REPORTE_CONCILIADAS_OTROSDataTable
        MyBase.Tables.Add(Me.tableREPORTE_CONCILIADAS_OTROS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_SALDOS_TOTROS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_TOTROS_KARDEX_ACUMULADO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_TOTROS_KARDEX_NO_ACUMULADO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_CONCILIADAS_OTROS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DT_REP_ANA_OTROS = New DT_REP_ANA_OTROS
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub REPORTE_SALDOS_TOTROSRowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_SALDOS_TOTROSRowChangeEvent)
    
    Public Delegate Sub REPORTE_TOTROS_KARDEX_ACUMULADORowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_TOTROS_KARDEX_ACUMULADORowChangeEvent)
    
    Public Delegate Sub REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChangeEvent)
    
    Public Delegate Sub REPORTE_CONCILIADAS_OTROSRowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_CONCILIADAS_OTROSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_SALDOS_TOTROSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_MONEDA As Global.System.Data.DataColumn
        
        Private columnDESC_MONEDA As Global.System.Data.DataColumn
        
        Private columnFECHA_COMP As Global.System.Data.DataColumn
        
        Private columnCOD_AUX As Global.System.Data.DataColumn
        
        Private columnNRO_COMP As Global.System.Data.DataColumn
        
        Private columnFECHA_DOC As Global.System.Data.DataColumn
        
        Private columnNRO_DOC As Global.System.Data.DataColumn
        
        Private columnCOD_DOC As Global.System.Data.DataColumn
        
        Private columnTIPO_CAMBIO As Global.System.Data.DataColumn
        
        Private columnCOD_D_H As Global.System.Data.DataColumn
        
        Private columnIMPORTE As Global.System.Data.DataColumn
        
        Private columnSTATUS_CONCILIADO As Global.System.Data.DataColumn
        
        Private columnCOD_PER As Global.System.Data.DataColumn
        
        Private columnDESC_PER As Global.System.Data.DataColumn
        
        Private columnGLOSA As Global.System.Data.DataColumn
        
        Private columnCOD_CUENTA As Global.System.Data.DataColumn
        
        Private columnCOD_COMP As Global.System.Data.DataColumn
        
        Private columnFECHA_VEN As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_SALDOS_TOTROS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CAMBIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_CAMBIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_D_HColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_D_H
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_CONCILIADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_CONCILIADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLOSAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLOSA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_VENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_VEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_SALDOS_TOTROSRow
            Get
                Return CType(Me.Rows(index),REPORTE_SALDOS_TOTROSRow)
            End Get
        End Property
        
        Public Event REPORTE_SALDOS_TOTROSRowChanging As REPORTE_SALDOS_TOTROSRowChangeEventHandler
        
        Public Event REPORTE_SALDOS_TOTROSRowChanged As REPORTE_SALDOS_TOTROSRowChangeEventHandler
        
        Public Event REPORTE_SALDOS_TOTROSRowDeleting As REPORTE_SALDOS_TOTROSRowChangeEventHandler
        
        Public Event REPORTE_SALDOS_TOTROSRowDeleted As REPORTE_SALDOS_TOTROSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_SALDOS_TOTROSRow(ByVal row As REPORTE_SALDOS_TOTROSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_SALDOS_TOTROSRow( _
                    ByVal COD_MONEDA As String,  _
                    ByVal DESC_MONEDA As String,  _
                    ByVal FECHA_COMP As Date,  _
                    ByVal COD_AUX As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal FECHA_DOC As Date,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal TIPO_CAMBIO As Decimal,  _
                    ByVal COD_D_H As String,  _
                    ByVal IMPORTE As Decimal,  _
                    ByVal STATUS_CONCILIADO As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal GLOSA As String,  _
                    ByVal COD_CUENTA As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal FECHA_VEN As Date) As REPORTE_SALDOS_TOTROSRow
            Dim rowREPORTE_SALDOS_TOTROSRow As REPORTE_SALDOS_TOTROSRow = CType(Me.NewRow,REPORTE_SALDOS_TOTROSRow)
            Dim columnValuesArray() As Object = New Object() {COD_MONEDA, DESC_MONEDA, FECHA_COMP, COD_AUX, NRO_COMP, FECHA_DOC, NRO_DOC, COD_DOC, TIPO_CAMBIO, COD_D_H, IMPORTE, STATUS_CONCILIADO, COD_PER, DESC_PER, GLOSA, COD_CUENTA, COD_COMP, FECHA_VEN}
            rowREPORTE_SALDOS_TOTROSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_SALDOS_TOTROSRow)
            Return rowREPORTE_SALDOS_TOTROSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOD_AUXNRO_COMPNRO_DOCCOD_DOCCOD_PERCOD_CUENTACOD_COMP(ByVal COD_AUX As String, ByVal NRO_COMP As String, ByVal NRO_DOC As String, ByVal COD_DOC As String, ByVal COD_PER As String, ByVal COD_CUENTA As String, ByVal COD_COMP As String) As REPORTE_SALDOS_TOTROSRow
            Return CType(Me.Rows.Find(New Object() {COD_AUX, NRO_COMP, NRO_DOC, COD_DOC, COD_PER, COD_CUENTA, COD_COMP}),REPORTE_SALDOS_TOTROSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_SALDOS_TOTROSDataTable = CType(MyBase.Clone,REPORTE_SALDOS_TOTROSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_SALDOS_TOTROSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_MONEDA = MyBase.Columns("COD_MONEDA")
            Me.columnDESC_MONEDA = MyBase.Columns("DESC_MONEDA")
            Me.columnFECHA_COMP = MyBase.Columns("FECHA_COMP")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnFECHA_DOC = MyBase.Columns("FECHA_DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnTIPO_CAMBIO = MyBase.Columns("TIPO_CAMBIO")
            Me.columnCOD_D_H = MyBase.Columns("COD_D_H")
            Me.columnIMPORTE = MyBase.Columns("IMPORTE")
            Me.columnSTATUS_CONCILIADO = MyBase.Columns("STATUS_CONCILIADO")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnGLOSA = MyBase.Columns("GLOSA")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnFECHA_VEN = MyBase.Columns("FECHA_VEN")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_MONEDA = New Global.System.Data.DataColumn("COD_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MONEDA)
            Me.columnDESC_MONEDA = New Global.System.Data.DataColumn("DESC_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MONEDA)
            Me.columnFECHA_COMP = New Global.System.Data.DataColumn("FECHA_COMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_COMP)
            Me.columnCOD_AUX = New Global.System.Data.DataColumn("COD_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnNRO_COMP = New Global.System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnFECHA_DOC = New Global.System.Data.DataColumn("FECHA_DOC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DOC)
            Me.columnNRO_DOC = New Global.System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_DOC = New Global.System.Data.DataColumn("COD_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnTIPO_CAMBIO = New Global.System.Data.DataColumn("TIPO_CAMBIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CAMBIO)
            Me.columnCOD_D_H = New Global.System.Data.DataColumn("COD_D_H", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_D_H)
            Me.columnIMPORTE = New Global.System.Data.DataColumn("IMPORTE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTE)
            Me.columnSTATUS_CONCILIADO = New Global.System.Data.DataColumn("STATUS_CONCILIADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_CONCILIADO)
            Me.columnCOD_PER = New Global.System.Data.DataColumn("COD_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New Global.System.Data.DataColumn("DESC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnGLOSA = New Global.System.Data.DataColumn("GLOSA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLOSA)
            Me.columnCOD_CUENTA = New Global.System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnCOD_COMP = New Global.System.Data.DataColumn("COD_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnFECHA_VEN = New Global.System.Data.DataColumn("FECHA_VEN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_VEN)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_AUX, Me.columnNRO_COMP, Me.columnNRO_DOC, Me.columnCOD_DOC, Me.columnCOD_PER, Me.columnCOD_CUENTA, Me.columnCOD_COMP}, true))
            Me.columnCOD_MONEDA.MaxLength = 1
            Me.columnDESC_MONEDA.MaxLength = 20
            Me.columnCOD_AUX.AllowDBNull = false
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnNRO_COMP.AllowDBNull = false
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 20
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnCOD_D_H.MaxLength = 1
            Me.columnIMPORTE.ReadOnly = true
            Me.columnSTATUS_CONCILIADO.MaxLength = 1
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnGLOSA.MaxLength = 60
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
            Me.columnCOD_COMP.AllowDBNull = false
            Me.columnCOD_COMP.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_SALDOS_TOTROSRow() As REPORTE_SALDOS_TOTROSRow
            Return CType(Me.NewRow,REPORTE_SALDOS_TOTROSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_SALDOS_TOTROSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_SALDOS_TOTROSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_SALDOS_TOTROSRowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_SALDOS_TOTROSRowChanged(Me, New REPORTE_SALDOS_TOTROSRowChangeEvent(CType(e.Row,REPORTE_SALDOS_TOTROSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_SALDOS_TOTROSRowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_SALDOS_TOTROSRowChanging(Me, New REPORTE_SALDOS_TOTROSRowChangeEvent(CType(e.Row,REPORTE_SALDOS_TOTROSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_SALDOS_TOTROSRowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_SALDOS_TOTROSRowDeleted(Me, New REPORTE_SALDOS_TOTROSRowChangeEvent(CType(e.Row,REPORTE_SALDOS_TOTROSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_SALDOS_TOTROSRowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_SALDOS_TOTROSRowDeleting(Me, New REPORTE_SALDOS_TOTROSRowChangeEvent(CType(e.Row,REPORTE_SALDOS_TOTROSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_SALDOS_TOTROSRow(ByVal row As REPORTE_SALDOS_TOTROSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REP_ANA_OTROS = New DT_REP_ANA_OTROS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_SALDOS_TOTROSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_TOTROS_KARDEX_ACUMULADODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_MONEDA As Global.System.Data.DataColumn
        
        Private columnDESC_MONEDA As Global.System.Data.DataColumn
        
        Private columnFECHA_COMP As Global.System.Data.DataColumn
        
        Private columnCOD_AUX As Global.System.Data.DataColumn
        
        Private columnNRO_COMP As Global.System.Data.DataColumn
        
        Private columnFECHA_DOC As Global.System.Data.DataColumn
        
        Private columnNRO_DOC As Global.System.Data.DataColumn
        
        Private columnCOD_DOC As Global.System.Data.DataColumn
        
        Private columnTIPO_CAMBIO As Global.System.Data.DataColumn
        
        Private columnCOD_D_H As Global.System.Data.DataColumn
        
        Private columnIMP_S As Global.System.Data.DataColumn
        
        Private columnIMP_D As Global.System.Data.DataColumn
        
        Private columnSTATUS_CONCILIADO As Global.System.Data.DataColumn
        
        Private columnCOD_PER As Global.System.Data.DataColumn
        
        Private columnDESC_PER As Global.System.Data.DataColumn
        
        Private columnGLOSA As Global.System.Data.DataColumn
        
        Private columnCOD_CUENTA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_TOTROS_KARDEX_ACUMULADO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CAMBIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_CAMBIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_D_HColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_D_H
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_CONCILIADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_CONCILIADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLOSAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLOSA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_TOTROS_KARDEX_ACUMULADORow
            Get
                Return CType(Me.Rows(index),REPORTE_TOTROS_KARDEX_ACUMULADORow)
            End Get
        End Property
        
        Public Event REPORTE_TOTROS_KARDEX_ACUMULADORowChanging As REPORTE_TOTROS_KARDEX_ACUMULADORowChangeEventHandler
        
        Public Event REPORTE_TOTROS_KARDEX_ACUMULADORowChanged As REPORTE_TOTROS_KARDEX_ACUMULADORowChangeEventHandler
        
        Public Event REPORTE_TOTROS_KARDEX_ACUMULADORowDeleting As REPORTE_TOTROS_KARDEX_ACUMULADORowChangeEventHandler
        
        Public Event REPORTE_TOTROS_KARDEX_ACUMULADORowDeleted As REPORTE_TOTROS_KARDEX_ACUMULADORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_TOTROS_KARDEX_ACUMULADORow(ByVal row As REPORTE_TOTROS_KARDEX_ACUMULADORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_TOTROS_KARDEX_ACUMULADORow( _
                    ByVal COD_MONEDA As String,  _
                    ByVal DESC_MONEDA As String,  _
                    ByVal FECHA_COMP As Date,  _
                    ByVal COD_AUX As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal FECHA_DOC As Date,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal TIPO_CAMBIO As Decimal,  _
                    ByVal COD_D_H As String,  _
                    ByVal IMP_S As Decimal,  _
                    ByVal IMP_D As Decimal,  _
                    ByVal STATUS_CONCILIADO As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal GLOSA As String,  _
                    ByVal COD_CUENTA As String) As REPORTE_TOTROS_KARDEX_ACUMULADORow
            Dim rowREPORTE_TOTROS_KARDEX_ACUMULADORow As REPORTE_TOTROS_KARDEX_ACUMULADORow = CType(Me.NewRow,REPORTE_TOTROS_KARDEX_ACUMULADORow)
            Dim columnValuesArray() As Object = New Object() {COD_MONEDA, DESC_MONEDA, FECHA_COMP, COD_AUX, NRO_COMP, FECHA_DOC, NRO_DOC, COD_DOC, TIPO_CAMBIO, COD_D_H, IMP_S, IMP_D, STATUS_CONCILIADO, COD_PER, DESC_PER, GLOSA, COD_CUENTA}
            rowREPORTE_TOTROS_KARDEX_ACUMULADORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_TOTROS_KARDEX_ACUMULADORow)
            Return rowREPORTE_TOTROS_KARDEX_ACUMULADORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_TOTROS_KARDEX_ACUMULADODataTable = CType(MyBase.Clone,REPORTE_TOTROS_KARDEX_ACUMULADODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_TOTROS_KARDEX_ACUMULADODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_MONEDA = MyBase.Columns("COD_MONEDA")
            Me.columnDESC_MONEDA = MyBase.Columns("DESC_MONEDA")
            Me.columnFECHA_COMP = MyBase.Columns("FECHA_COMP")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnFECHA_DOC = MyBase.Columns("FECHA_DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnTIPO_CAMBIO = MyBase.Columns("TIPO_CAMBIO")
            Me.columnCOD_D_H = MyBase.Columns("COD_D_H")
            Me.columnIMP_S = MyBase.Columns("IMP_S")
            Me.columnIMP_D = MyBase.Columns("IMP_D")
            Me.columnSTATUS_CONCILIADO = MyBase.Columns("STATUS_CONCILIADO")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnGLOSA = MyBase.Columns("GLOSA")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_MONEDA = New Global.System.Data.DataColumn("COD_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MONEDA)
            Me.columnDESC_MONEDA = New Global.System.Data.DataColumn("DESC_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MONEDA)
            Me.columnFECHA_COMP = New Global.System.Data.DataColumn("FECHA_COMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_COMP)
            Me.columnCOD_AUX = New Global.System.Data.DataColumn("COD_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnNRO_COMP = New Global.System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnFECHA_DOC = New Global.System.Data.DataColumn("FECHA_DOC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DOC)
            Me.columnNRO_DOC = New Global.System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_DOC = New Global.System.Data.DataColumn("COD_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnTIPO_CAMBIO = New Global.System.Data.DataColumn("TIPO_CAMBIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CAMBIO)
            Me.columnCOD_D_H = New Global.System.Data.DataColumn("COD_D_H", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_D_H)
            Me.columnIMP_S = New Global.System.Data.DataColumn("IMP_S", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_S)
            Me.columnIMP_D = New Global.System.Data.DataColumn("IMP_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_D)
            Me.columnSTATUS_CONCILIADO = New Global.System.Data.DataColumn("STATUS_CONCILIADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_CONCILIADO)
            Me.columnCOD_PER = New Global.System.Data.DataColumn("COD_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New Global.System.Data.DataColumn("DESC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnGLOSA = New Global.System.Data.DataColumn("GLOSA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLOSA)
            Me.columnCOD_CUENTA = New Global.System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnCOD_MONEDA.MaxLength = 1
            Me.columnDESC_MONEDA.MaxLength = 20
            Me.columnCOD_AUX.AllowDBNull = false
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnNRO_COMP.AllowDBNull = false
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 20
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnCOD_D_H.MaxLength = 1
            Me.columnSTATUS_CONCILIADO.MaxLength = 1
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnGLOSA.MaxLength = 60
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_TOTROS_KARDEX_ACUMULADORow() As REPORTE_TOTROS_KARDEX_ACUMULADORow
            Return CType(Me.NewRow,REPORTE_TOTROS_KARDEX_ACUMULADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_TOTROS_KARDEX_ACUMULADORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_TOTROS_KARDEX_ACUMULADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_TOTROS_KARDEX_ACUMULADORowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_TOTROS_KARDEX_ACUMULADORowChanged(Me, New REPORTE_TOTROS_KARDEX_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TOTROS_KARDEX_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_TOTROS_KARDEX_ACUMULADORowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_TOTROS_KARDEX_ACUMULADORowChanging(Me, New REPORTE_TOTROS_KARDEX_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TOTROS_KARDEX_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_TOTROS_KARDEX_ACUMULADORowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_TOTROS_KARDEX_ACUMULADORowDeleted(Me, New REPORTE_TOTROS_KARDEX_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TOTROS_KARDEX_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_TOTROS_KARDEX_ACUMULADORowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_TOTROS_KARDEX_ACUMULADORowDeleting(Me, New REPORTE_TOTROS_KARDEX_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TOTROS_KARDEX_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_TOTROS_KARDEX_ACUMULADORow(ByVal row As REPORTE_TOTROS_KARDEX_ACUMULADORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REP_ANA_OTROS = New DT_REP_ANA_OTROS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_TOTROS_KARDEX_ACUMULADODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_MONEDA As Global.System.Data.DataColumn
        
        Private columnDESC_MONEDA As Global.System.Data.DataColumn
        
        Private columnFECHA_COMP As Global.System.Data.DataColumn
        
        Private columnCOD_AUX As Global.System.Data.DataColumn
        
        Private columnNRO_COMP As Global.System.Data.DataColumn
        
        Private columnFECHA_DOC As Global.System.Data.DataColumn
        
        Private columnNRO_DOC As Global.System.Data.DataColumn
        
        Private columnCOD_DOC As Global.System.Data.DataColumn
        
        Private columnTIPO_CAMBIO As Global.System.Data.DataColumn
        
        Private columnCOD_D_H As Global.System.Data.DataColumn
        
        Private columnIMP_S As Global.System.Data.DataColumn
        
        Private columnIMP_D As Global.System.Data.DataColumn
        
        Private columnSTATUS_CONCILIADO As Global.System.Data.DataColumn
        
        Private columnCOD_PER As Global.System.Data.DataColumn
        
        Private columnDESC_PER As Global.System.Data.DataColumn
        
        Private columnGLOSA As Global.System.Data.DataColumn
        
        Private columnCOD_CUENTA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_TOTROS_KARDEX_NO_ACUMULADO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CAMBIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_CAMBIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_D_HColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_D_H
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_CONCILIADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_CONCILIADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLOSAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLOSA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_TOTROS_KARDEX_NO_ACUMULADORow
            Get
                Return CType(Me.Rows(index),REPORTE_TOTROS_KARDEX_NO_ACUMULADORow)
            End Get
        End Property
        
        Public Event REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChanging As REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChangeEventHandler
        
        Public Event REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChanged As REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChangeEventHandler
        
        Public Event REPORTE_TOTROS_KARDEX_NO_ACUMULADORowDeleting As REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChangeEventHandler
        
        Public Event REPORTE_TOTROS_KARDEX_NO_ACUMULADORowDeleted As REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_TOTROS_KARDEX_NO_ACUMULADORow(ByVal row As REPORTE_TOTROS_KARDEX_NO_ACUMULADORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_TOTROS_KARDEX_NO_ACUMULADORow( _
                    ByVal COD_MONEDA As String,  _
                    ByVal DESC_MONEDA As String,  _
                    ByVal FECHA_COMP As Date,  _
                    ByVal COD_AUX As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal FECHA_DOC As Date,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal TIPO_CAMBIO As Decimal,  _
                    ByVal COD_D_H As String,  _
                    ByVal IMP_S As Decimal,  _
                    ByVal IMP_D As Decimal,  _
                    ByVal STATUS_CONCILIADO As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal GLOSA As String,  _
                    ByVal COD_CUENTA As String) As REPORTE_TOTROS_KARDEX_NO_ACUMULADORow
            Dim rowREPORTE_TOTROS_KARDEX_NO_ACUMULADORow As REPORTE_TOTROS_KARDEX_NO_ACUMULADORow = CType(Me.NewRow,REPORTE_TOTROS_KARDEX_NO_ACUMULADORow)
            Dim columnValuesArray() As Object = New Object() {COD_MONEDA, DESC_MONEDA, FECHA_COMP, COD_AUX, NRO_COMP, FECHA_DOC, NRO_DOC, COD_DOC, TIPO_CAMBIO, COD_D_H, IMP_S, IMP_D, STATUS_CONCILIADO, COD_PER, DESC_PER, GLOSA, COD_CUENTA}
            rowREPORTE_TOTROS_KARDEX_NO_ACUMULADORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_TOTROS_KARDEX_NO_ACUMULADORow)
            Return rowREPORTE_TOTROS_KARDEX_NO_ACUMULADORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable = CType(MyBase.Clone,REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_MONEDA = MyBase.Columns("COD_MONEDA")
            Me.columnDESC_MONEDA = MyBase.Columns("DESC_MONEDA")
            Me.columnFECHA_COMP = MyBase.Columns("FECHA_COMP")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnFECHA_DOC = MyBase.Columns("FECHA_DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnTIPO_CAMBIO = MyBase.Columns("TIPO_CAMBIO")
            Me.columnCOD_D_H = MyBase.Columns("COD_D_H")
            Me.columnIMP_S = MyBase.Columns("IMP_S")
            Me.columnIMP_D = MyBase.Columns("IMP_D")
            Me.columnSTATUS_CONCILIADO = MyBase.Columns("STATUS_CONCILIADO")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnGLOSA = MyBase.Columns("GLOSA")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_MONEDA = New Global.System.Data.DataColumn("COD_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MONEDA)
            Me.columnDESC_MONEDA = New Global.System.Data.DataColumn("DESC_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MONEDA)
            Me.columnFECHA_COMP = New Global.System.Data.DataColumn("FECHA_COMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_COMP)
            Me.columnCOD_AUX = New Global.System.Data.DataColumn("COD_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnNRO_COMP = New Global.System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnFECHA_DOC = New Global.System.Data.DataColumn("FECHA_DOC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DOC)
            Me.columnNRO_DOC = New Global.System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_DOC = New Global.System.Data.DataColumn("COD_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnTIPO_CAMBIO = New Global.System.Data.DataColumn("TIPO_CAMBIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CAMBIO)
            Me.columnCOD_D_H = New Global.System.Data.DataColumn("COD_D_H", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_D_H)
            Me.columnIMP_S = New Global.System.Data.DataColumn("IMP_S", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_S)
            Me.columnIMP_D = New Global.System.Data.DataColumn("IMP_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_D)
            Me.columnSTATUS_CONCILIADO = New Global.System.Data.DataColumn("STATUS_CONCILIADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_CONCILIADO)
            Me.columnCOD_PER = New Global.System.Data.DataColumn("COD_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New Global.System.Data.DataColumn("DESC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnGLOSA = New Global.System.Data.DataColumn("GLOSA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLOSA)
            Me.columnCOD_CUENTA = New Global.System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnCOD_MONEDA.MaxLength = 1
            Me.columnDESC_MONEDA.MaxLength = 20
            Me.columnCOD_AUX.AllowDBNull = false
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnNRO_COMP.AllowDBNull = false
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 20
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnCOD_D_H.MaxLength = 1
            Me.columnSTATUS_CONCILIADO.MaxLength = 1
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnGLOSA.MaxLength = 60
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_TOTROS_KARDEX_NO_ACUMULADORow() As REPORTE_TOTROS_KARDEX_NO_ACUMULADORow
            Return CType(Me.NewRow,REPORTE_TOTROS_KARDEX_NO_ACUMULADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_TOTROS_KARDEX_NO_ACUMULADORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_TOTROS_KARDEX_NO_ACUMULADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChanged(Me, New REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TOTROS_KARDEX_NO_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChanging(Me, New REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TOTROS_KARDEX_NO_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_TOTROS_KARDEX_NO_ACUMULADORowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_TOTROS_KARDEX_NO_ACUMULADORowDeleted(Me, New REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TOTROS_KARDEX_NO_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_TOTROS_KARDEX_NO_ACUMULADORowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_TOTROS_KARDEX_NO_ACUMULADORowDeleting(Me, New REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TOTROS_KARDEX_NO_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_TOTROS_KARDEX_NO_ACUMULADORow(ByVal row As REPORTE_TOTROS_KARDEX_NO_ACUMULADORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REP_ANA_OTROS = New DT_REP_ANA_OTROS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_CONCILIADAS_OTROSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_MONEDA As Global.System.Data.DataColumn
        
        Private columnDESC_MONEDA As Global.System.Data.DataColumn
        
        Private columnFECHA_COMP As Global.System.Data.DataColumn
        
        Private columnCOD_AUX As Global.System.Data.DataColumn
        
        Private columnNRO_COMP As Global.System.Data.DataColumn
        
        Private columnFECHA_DOC As Global.System.Data.DataColumn
        
        Private columnNRO_DOC As Global.System.Data.DataColumn
        
        Private columnCOD_DOC As Global.System.Data.DataColumn
        
        Private columnTIPO_CAMBIO As Global.System.Data.DataColumn
        
        Private columnCOD_D_H As Global.System.Data.DataColumn
        
        Private columnIMP_S As Global.System.Data.DataColumn
        
        Private columnIMP_D As Global.System.Data.DataColumn
        
        Private columnSTATUS_CONCILIADO As Global.System.Data.DataColumn
        
        Private columnCOD_PER As Global.System.Data.DataColumn
        
        Private columnDESC_PER As Global.System.Data.DataColumn
        
        Private columnGLOSA As Global.System.Data.DataColumn
        
        Private columnCOD_CUENTA As Global.System.Data.DataColumn
        
        Private columnCOD_COMP As Global.System.Data.DataColumn
        
        Private columnFECHA_VEN As Global.System.Data.DataColumn
        
        Private columnNRO_DOC_PER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_CONCILIADAS_OTROS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CAMBIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_CAMBIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_D_HColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_D_H
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_CONCILIADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_CONCILIADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLOSAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLOSA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_VENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_VEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_CONCILIADAS_OTROSRow
            Get
                Return CType(Me.Rows(index),REPORTE_CONCILIADAS_OTROSRow)
            End Get
        End Property
        
        Public Event REPORTE_CONCILIADAS_OTROSRowChanging As REPORTE_CONCILIADAS_OTROSRowChangeEventHandler
        
        Public Event REPORTE_CONCILIADAS_OTROSRowChanged As REPORTE_CONCILIADAS_OTROSRowChangeEventHandler
        
        Public Event REPORTE_CONCILIADAS_OTROSRowDeleting As REPORTE_CONCILIADAS_OTROSRowChangeEventHandler
        
        Public Event REPORTE_CONCILIADAS_OTROSRowDeleted As REPORTE_CONCILIADAS_OTROSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_CONCILIADAS_OTROSRow(ByVal row As REPORTE_CONCILIADAS_OTROSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_CONCILIADAS_OTROSRow( _
                    ByVal COD_MONEDA As String,  _
                    ByVal DESC_MONEDA As String,  _
                    ByVal FECHA_COMP As Date,  _
                    ByVal COD_AUX As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal FECHA_DOC As Date,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal TIPO_CAMBIO As Decimal,  _
                    ByVal COD_D_H As String,  _
                    ByVal IMP_S As Decimal,  _
                    ByVal IMP_D As Decimal,  _
                    ByVal STATUS_CONCILIADO As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal GLOSA As String,  _
                    ByVal COD_CUENTA As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal FECHA_VEN As Date,  _
                    ByVal NRO_DOC_PER As String) As REPORTE_CONCILIADAS_OTROSRow
            Dim rowREPORTE_CONCILIADAS_OTROSRow As REPORTE_CONCILIADAS_OTROSRow = CType(Me.NewRow,REPORTE_CONCILIADAS_OTROSRow)
            Dim columnValuesArray() As Object = New Object() {COD_MONEDA, DESC_MONEDA, FECHA_COMP, COD_AUX, NRO_COMP, FECHA_DOC, NRO_DOC, COD_DOC, TIPO_CAMBIO, COD_D_H, IMP_S, IMP_D, STATUS_CONCILIADO, COD_PER, DESC_PER, GLOSA, COD_CUENTA, COD_COMP, FECHA_VEN, NRO_DOC_PER}
            rowREPORTE_CONCILIADAS_OTROSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_CONCILIADAS_OTROSRow)
            Return rowREPORTE_CONCILIADAS_OTROSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_CONCILIADAS_OTROSDataTable = CType(MyBase.Clone,REPORTE_CONCILIADAS_OTROSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_CONCILIADAS_OTROSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_MONEDA = MyBase.Columns("COD_MONEDA")
            Me.columnDESC_MONEDA = MyBase.Columns("DESC_MONEDA")
            Me.columnFECHA_COMP = MyBase.Columns("FECHA_COMP")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnFECHA_DOC = MyBase.Columns("FECHA_DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnTIPO_CAMBIO = MyBase.Columns("TIPO_CAMBIO")
            Me.columnCOD_D_H = MyBase.Columns("COD_D_H")
            Me.columnIMP_S = MyBase.Columns("IMP_S")
            Me.columnIMP_D = MyBase.Columns("IMP_D")
            Me.columnSTATUS_CONCILIADO = MyBase.Columns("STATUS_CONCILIADO")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnGLOSA = MyBase.Columns("GLOSA")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnFECHA_VEN = MyBase.Columns("FECHA_VEN")
            Me.columnNRO_DOC_PER = MyBase.Columns("NRO_DOC_PER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_MONEDA = New Global.System.Data.DataColumn("COD_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MONEDA)
            Me.columnDESC_MONEDA = New Global.System.Data.DataColumn("DESC_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MONEDA)
            Me.columnFECHA_COMP = New Global.System.Data.DataColumn("FECHA_COMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_COMP)
            Me.columnCOD_AUX = New Global.System.Data.DataColumn("COD_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnNRO_COMP = New Global.System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnFECHA_DOC = New Global.System.Data.DataColumn("FECHA_DOC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DOC)
            Me.columnNRO_DOC = New Global.System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_DOC = New Global.System.Data.DataColumn("COD_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnTIPO_CAMBIO = New Global.System.Data.DataColumn("TIPO_CAMBIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CAMBIO)
            Me.columnCOD_D_H = New Global.System.Data.DataColumn("COD_D_H", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_D_H)
            Me.columnIMP_S = New Global.System.Data.DataColumn("IMP_S", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_S)
            Me.columnIMP_D = New Global.System.Data.DataColumn("IMP_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_D)
            Me.columnSTATUS_CONCILIADO = New Global.System.Data.DataColumn("STATUS_CONCILIADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_CONCILIADO)
            Me.columnCOD_PER = New Global.System.Data.DataColumn("COD_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New Global.System.Data.DataColumn("DESC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnGLOSA = New Global.System.Data.DataColumn("GLOSA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLOSA)
            Me.columnCOD_CUENTA = New Global.System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnCOD_COMP = New Global.System.Data.DataColumn("COD_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnFECHA_VEN = New Global.System.Data.DataColumn("FECHA_VEN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_VEN)
            Me.columnNRO_DOC_PER = New Global.System.Data.DataColumn("NRO_DOC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC_PER)
            Me.columnCOD_MONEDA.MaxLength = 1
            Me.columnDESC_MONEDA.MaxLength = 20
            Me.columnCOD_AUX.AllowDBNull = false
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnNRO_COMP.AllowDBNull = false
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 20
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnCOD_D_H.MaxLength = 1
            Me.columnSTATUS_CONCILIADO.MaxLength = 1
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnGLOSA.MaxLength = 60
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
            Me.columnCOD_COMP.AllowDBNull = false
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnNRO_DOC_PER.AllowDBNull = false
            Me.columnNRO_DOC_PER.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_CONCILIADAS_OTROSRow() As REPORTE_CONCILIADAS_OTROSRow
            Return CType(Me.NewRow,REPORTE_CONCILIADAS_OTROSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_CONCILIADAS_OTROSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_CONCILIADAS_OTROSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_CONCILIADAS_OTROSRowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CONCILIADAS_OTROSRowChanged(Me, New REPORTE_CONCILIADAS_OTROSRowChangeEvent(CType(e.Row,REPORTE_CONCILIADAS_OTROSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_CONCILIADAS_OTROSRowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CONCILIADAS_OTROSRowChanging(Me, New REPORTE_CONCILIADAS_OTROSRowChangeEvent(CType(e.Row,REPORTE_CONCILIADAS_OTROSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_CONCILIADAS_OTROSRowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CONCILIADAS_OTROSRowDeleted(Me, New REPORTE_CONCILIADAS_OTROSRowChangeEvent(CType(e.Row,REPORTE_CONCILIADAS_OTROSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_CONCILIADAS_OTROSRowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CONCILIADAS_OTROSRowDeleting(Me, New REPORTE_CONCILIADAS_OTROSRowChangeEvent(CType(e.Row,REPORTE_CONCILIADAS_OTROSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_CONCILIADAS_OTROSRow(ByVal row As REPORTE_CONCILIADAS_OTROSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REP_ANA_OTROS = New DT_REP_ANA_OTROS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_CONCILIADAS_OTROSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_SALDOS_TOTROSRow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_SALDOS_TOTROS As REPORTE_SALDOS_TOTROSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_SALDOS_TOTROS = CType(Me.Table,REPORTE_SALDOS_TOTROSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.COD_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_MONEDA' de la tabla 'REPORTE_SALDOS_TOTROS' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.COD_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.DESC_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_MONEDA' de la tabla 'REPORTE_SALDOS_TOTROS' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.DESC_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_COMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.FECHA_COMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_COMP' de la tabla 'REPORTE_SALDOS_TOTROS' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.FECHA_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.COD_AUXColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.COD_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.NRO_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.NRO_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.FECHA_DOCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_DOC' de la tabla 'REPORTE_SALDOS_TOTROS' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.FECHA_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.NRO_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.COD_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CAMBIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.TIPO_CAMBIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_CAMBIO' de la tabla 'REPORTE_SALDOS_TOTROS' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.TIPO_CAMBIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_D_H() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.COD_D_HColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_D_H' de la tabla 'REPORTE_SALDOS_TOTROS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.COD_D_HColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.IMPORTEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMPORTE' de la tabla 'REPORTE_SALDOS_TOTROS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.IMPORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_CONCILIADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.STATUS_CONCILIADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_CONCILIADO' de la tabla 'REPORTE_SALDOS_TOTROS' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.STATUS_CONCILIADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.COD_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.DESC_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_SALDOS_TOTROS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.DESC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLOSA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.GLOSAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GLOSA' de la tabla 'REPORTE_SALDOS_TOTROS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.GLOSAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.COD_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.COD_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_VEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TOTROS.FECHA_VENColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_VEN' de la tabla 'REPORTE_SALDOS_TOTROS' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TOTROS.FECHA_VENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TOTROS.COD_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MONEDANull()
            Me(Me.tableREPORTE_SALDOS_TOTROS.COD_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TOTROS.DESC_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONEDANull()
            Me(Me.tableREPORTE_SALDOS_TOTROS.DESC_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TOTROS.FECHA_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_COMPNull()
            Me(Me.tableREPORTE_SALDOS_TOTROS.FECHA_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TOTROS.FECHA_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DOCNull()
            Me(Me.tableREPORTE_SALDOS_TOTROS.FECHA_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CAMBIONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TOTROS.TIPO_CAMBIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CAMBIONull()
            Me(Me.tableREPORTE_SALDOS_TOTROS.TIPO_CAMBIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_D_HNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TOTROS.COD_D_HColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_D_HNull()
            Me(Me.tableREPORTE_SALDOS_TOTROS.COD_D_HColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORTENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TOTROS.IMPORTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORTENull()
            Me(Me.tableREPORTE_SALDOS_TOTROS.IMPORTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_CONCILIADONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TOTROS.STATUS_CONCILIADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_CONCILIADONull()
            Me(Me.tableREPORTE_SALDOS_TOTROS.STATUS_CONCILIADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TOTROS.DESC_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_SALDOS_TOTROS.DESC_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLOSANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TOTROS.GLOSAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLOSANull()
            Me(Me.tableREPORTE_SALDOS_TOTROS.GLOSAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_VENNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TOTROS.FECHA_VENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_VENNull()
            Me(Me.tableREPORTE_SALDOS_TOTROS.FECHA_VENColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_TOTROS_KARDEX_ACUMULADORow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_TOTROS_KARDEX_ACUMULADO As REPORTE_TOTROS_KARDEX_ACUMULADODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO = CType(Me.Table,REPORTE_TOTROS_KARDEX_ACUMULADODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_MONEDA' de la tabla 'REPORTE_TOTROS_KARDEX_ACUMULADO'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.DESC_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_MONEDA' de la tabla 'REPORTE_TOTROS_KARDEX_ACUMULADO"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.DESC_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_COMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.FECHA_COMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_COMP' de la tabla 'REPORTE_TOTROS_KARDEX_ACUMULADO'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.FECHA_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_AUXColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.NRO_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.NRO_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.FECHA_DOCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_DOC' de la tabla 'REPORTE_TOTROS_KARDEX_ACUMULADO' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.FECHA_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.NRO_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CAMBIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.TIPO_CAMBIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_CAMBIO' de la tabla 'REPORTE_TOTROS_KARDEX_ACUMULADO"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.TIPO_CAMBIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_D_H() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_D_HColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_D_H' de la tabla 'REPORTE_TOTROS_KARDEX_ACUMULADO' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_D_HColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_S() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.IMP_SColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_S' de la tabla 'REPORTE_TOTROS_KARDEX_ACUMULADO' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.IMP_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.IMP_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_D' de la tabla 'REPORTE_TOTROS_KARDEX_ACUMULADO' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.IMP_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_CONCILIADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.STATUS_CONCILIADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_CONCILIADO' de la tabla 'REPORTE_TOTROS_KARDEX_ACU"& _ 
                            "MULADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.STATUS_CONCILIADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.DESC_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_TOTROS_KARDEX_ACUMULADO' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.DESC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLOSA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.GLOSAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GLOSA' de la tabla 'REPORTE_TOTROS_KARDEX_ACUMULADO' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.GLOSAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MONEDANull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.DESC_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONEDANull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.DESC_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.FECHA_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_COMPNull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.FECHA_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.FECHA_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DOCNull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.FECHA_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CAMBIONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.TIPO_CAMBIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CAMBIONull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.TIPO_CAMBIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_D_HNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_D_HColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_D_HNull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.COD_D_HColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_SNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.IMP_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_SNull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.IMP_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.IMP_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DNull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.IMP_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_CONCILIADONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.STATUS_CONCILIADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_CONCILIADONull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.STATUS_CONCILIADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.DESC_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.DESC_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLOSANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.GLOSAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLOSANull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_ACUMULADO.GLOSAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_TOTROS_KARDEX_NO_ACUMULADORow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO As REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO = CType(Me.Table,REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_MONEDA' de la tabla 'REPORTE_TOTROS_KARDEX_NO_ACUMULA"& _ 
                            "DO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.DESC_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_MONEDA' de la tabla 'REPORTE_TOTROS_KARDEX_NO_ACUMUL"& _ 
                            "ADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.DESC_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_COMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.FECHA_COMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_COMP' de la tabla 'REPORTE_TOTROS_KARDEX_NO_ACUMULA"& _ 
                            "DO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.FECHA_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_AUXColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.NRO_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.NRO_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.FECHA_DOCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_DOC' de la tabla 'REPORTE_TOTROS_KARDEX_NO_ACUMULAD"& _ 
                            "O' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.FECHA_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.NRO_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CAMBIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.TIPO_CAMBIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_CAMBIO' de la tabla 'REPORTE_TOTROS_KARDEX_NO_ACUMUL"& _ 
                            "ADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.TIPO_CAMBIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_D_H() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_D_HColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_D_H' de la tabla 'REPORTE_TOTROS_KARDEX_NO_ACUMULADO'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_D_HColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_S() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.IMP_SColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_S' de la tabla 'REPORTE_TOTROS_KARDEX_NO_ACUMULADO' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.IMP_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.IMP_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_D' de la tabla 'REPORTE_TOTROS_KARDEX_NO_ACUMULADO' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.IMP_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_CONCILIADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.STATUS_CONCILIADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_CONCILIADO' de la tabla 'REPORTE_TOTROS_KARDEX_NO_"& _ 
                            "ACUMULADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.STATUS_CONCILIADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.DESC_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_TOTROS_KARDEX_NO_ACUMULADO"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.DESC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLOSA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.GLOSAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GLOSA' de la tabla 'REPORTE_TOTROS_KARDEX_NO_ACUMULADO' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.GLOSAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MONEDANull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.DESC_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONEDANull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.DESC_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.FECHA_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_COMPNull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.FECHA_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.FECHA_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DOCNull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.FECHA_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CAMBIONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.TIPO_CAMBIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CAMBIONull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.TIPO_CAMBIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_D_HNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_D_HColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_D_HNull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.COD_D_HColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_SNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.IMP_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_SNull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.IMP_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.IMP_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DNull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.IMP_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_CONCILIADONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.STATUS_CONCILIADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_CONCILIADONull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.STATUS_CONCILIADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.DESC_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.DESC_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLOSANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.GLOSAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLOSANull()
            Me(Me.tableREPORTE_TOTROS_KARDEX_NO_ACUMULADO.GLOSAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_CONCILIADAS_OTROSRow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_CONCILIADAS_OTROS As REPORTE_CONCILIADAS_OTROSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_CONCILIADAS_OTROS = CType(Me.Table,REPORTE_CONCILIADAS_OTROSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_MONEDA' de la tabla 'REPORTE_CONCILIADAS_OTROS' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.DESC_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_MONEDA' de la tabla 'REPORTE_CONCILIADAS_OTROS' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.DESC_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_COMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.FECHA_COMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_COMP' de la tabla 'REPORTE_CONCILIADAS_OTROS' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.FECHA_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_AUXColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.NRO_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.NRO_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.FECHA_DOCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_DOC' de la tabla 'REPORTE_CONCILIADAS_OTROS' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.FECHA_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.NRO_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CAMBIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.TIPO_CAMBIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_CAMBIO' de la tabla 'REPORTE_CONCILIADAS_OTROS' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.TIPO_CAMBIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_D_H() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_D_HColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_D_H' de la tabla 'REPORTE_CONCILIADAS_OTROS' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_D_HColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_S() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.IMP_SColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_S' de la tabla 'REPORTE_CONCILIADAS_OTROS' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.IMP_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.IMP_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_D' de la tabla 'REPORTE_CONCILIADAS_OTROS' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.IMP_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_CONCILIADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.STATUS_CONCILIADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_CONCILIADO' de la tabla 'REPORTE_CONCILIADAS_OTROS"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.STATUS_CONCILIADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.DESC_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_CONCILIADAS_OTROS' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.DESC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLOSA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.GLOSAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GLOSA' de la tabla 'REPORTE_CONCILIADAS_OTROS' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.GLOSAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_VEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.FECHA_VENColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_VEN' de la tabla 'REPORTE_CONCILIADAS_OTROS' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.FECHA_VENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS_OTROS.NRO_DOC_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS_OTROS.NRO_DOC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS_OTROS.COD_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MONEDANull()
            Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS_OTROS.DESC_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONEDANull()
            Me(Me.tableREPORTE_CONCILIADAS_OTROS.DESC_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS_OTROS.FECHA_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_COMPNull()
            Me(Me.tableREPORTE_CONCILIADAS_OTROS.FECHA_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS_OTROS.FECHA_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DOCNull()
            Me(Me.tableREPORTE_CONCILIADAS_OTROS.FECHA_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CAMBIONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS_OTROS.TIPO_CAMBIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CAMBIONull()
            Me(Me.tableREPORTE_CONCILIADAS_OTROS.TIPO_CAMBIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_D_HNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS_OTROS.COD_D_HColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_D_HNull()
            Me(Me.tableREPORTE_CONCILIADAS_OTROS.COD_D_HColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_SNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS_OTROS.IMP_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_SNull()
            Me(Me.tableREPORTE_CONCILIADAS_OTROS.IMP_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS_OTROS.IMP_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DNull()
            Me(Me.tableREPORTE_CONCILIADAS_OTROS.IMP_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_CONCILIADONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS_OTROS.STATUS_CONCILIADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_CONCILIADONull()
            Me(Me.tableREPORTE_CONCILIADAS_OTROS.STATUS_CONCILIADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS_OTROS.DESC_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_CONCILIADAS_OTROS.DESC_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLOSANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS_OTROS.GLOSAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLOSANull()
            Me(Me.tableREPORTE_CONCILIADAS_OTROS.GLOSAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_VENNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS_OTROS.FECHA_VENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_VENNull()
            Me(Me.tableREPORTE_CONCILIADAS_OTROS.FECHA_VENColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_SALDOS_TOTROSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_SALDOS_TOTROSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_SALDOS_TOTROSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_SALDOS_TOTROSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_TOTROS_KARDEX_ACUMULADORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_TOTROS_KARDEX_ACUMULADORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_TOTROS_KARDEX_ACUMULADORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_TOTROS_KARDEX_ACUMULADORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_TOTROS_KARDEX_NO_ACUMULADORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_TOTROS_KARDEX_NO_ACUMULADORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_TOTROS_KARDEX_NO_ACUMULADORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_TOTROS_KARDEX_NO_ACUMULADORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_CONCILIADAS_OTROSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_CONCILIADAS_OTROSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_CONCILIADAS_OTROSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_CONCILIADAS_OTROSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DT_REP_ANA_OTROSTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_SALDOS_TOTROSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_SALDOS_TOTROS"
            tableMapping.ColumnMappings.Add("COD_MONEDA", "COD_MONEDA")
            tableMapping.ColumnMappings.Add("DESC_MONEDA", "DESC_MONEDA")
            tableMapping.ColumnMappings.Add("FECHA_COMP", "FECHA_COMP")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("FECHA_DOC", "FECHA_DOC")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("TIPO_CAMBIO", "TIPO_CAMBIO")
            tableMapping.ColumnMappings.Add("COD_D_H", "COD_D_H")
            tableMapping.ColumnMappings.Add("IMPORTE", "IMPORTE")
            tableMapping.ColumnMappings.Add("STATUS_CONCILIADO", "STATUS_CONCILIADO")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("GLOSA", "GLOSA")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("FECHA_VEN", "FECHA_VEN")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_SALDOS_TOTROS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_MES", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_CUENTA", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS_CONCILIADO", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_PER", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@S_PER", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_CONC", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REP_ANA_OTROS.REPORTE_SALDOS_TOTROSDataTable, ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String, ByVal STATUS_CONCILIADO As String, ByVal COD_PER As String, ByVal S_PER As String, ByVal FECHA_CONC As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (STATUS_CONCILIADO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(STATUS_CONCILIADO,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(COD_PER,String)
            End If
            If (S_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(S_PER,String)
            End If
            If (FECHA_CONC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(FECHA_CONC.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String, ByVal STATUS_CONCILIADO As String, ByVal COD_PER As String, ByVal S_PER As String, ByVal FECHA_CONC As Global.System.Nullable(Of Date)) As DT_REP_ANA_OTROS.REPORTE_SALDOS_TOTROSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (STATUS_CONCILIADO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(STATUS_CONCILIADO,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(COD_PER,String)
            End If
            If (S_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(S_PER,String)
            End If
            If (FECHA_CONC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(FECHA_CONC.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DT_REP_ANA_OTROS.REPORTE_SALDOS_TOTROSDataTable = New DT_REP_ANA_OTROS.REPORTE_SALDOS_TOTROSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_TOTROS_KARDEX_ACUMULADOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_TOTROS_KARDEX_ACUMULADO"
            tableMapping.ColumnMappings.Add("COD_MONEDA", "COD_MONEDA")
            tableMapping.ColumnMappings.Add("DESC_MONEDA", "DESC_MONEDA")
            tableMapping.ColumnMappings.Add("FECHA_COMP", "FECHA_COMP")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("FECHA_DOC", "FECHA_DOC")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("TIPO_CAMBIO", "TIPO_CAMBIO")
            tableMapping.ColumnMappings.Add("COD_D_H", "COD_D_H")
            tableMapping.ColumnMappings.Add("IMP_S", "IMP_S")
            tableMapping.ColumnMappings.Add("IMP_D", "IMP_D")
            tableMapping.ColumnMappings.Add("STATUS_CONCILIADO", "STATUS_CONCILIADO")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("GLOSA", "GLOSA")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_TOTROS_KARDEX_ACUMULADO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_MES2", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_CUENTA", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_PER", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REP_ANA_OTROS.REPORTE_TOTROS_KARDEX_ACUMULADODataTable, ByVal FE_AÑO As String, ByVal FE_MES2 As String, ByVal COD_CUENTA As String, ByVal COD_PER As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES2,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(COD_PER,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FE_AÑO As String, ByVal FE_MES2 As String, ByVal COD_CUENTA As String, ByVal COD_PER As String) As DT_REP_ANA_OTROS.REPORTE_TOTROS_KARDEX_ACUMULADODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES2,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(COD_PER,String)
            End If
            Dim dataTable As DT_REP_ANA_OTROS.REPORTE_TOTROS_KARDEX_ACUMULADODataTable = New DT_REP_ANA_OTROS.REPORTE_TOTROS_KARDEX_ACUMULADODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_TOTROS_KARDEX_NO_ACUMULADOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_TOTROS_KARDEX_NO_ACUMULADO"
            tableMapping.ColumnMappings.Add("COD_MONEDA", "COD_MONEDA")
            tableMapping.ColumnMappings.Add("DESC_MONEDA", "DESC_MONEDA")
            tableMapping.ColumnMappings.Add("FECHA_COMP", "FECHA_COMP")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("FECHA_DOC", "FECHA_DOC")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("TIPO_CAMBIO", "TIPO_CAMBIO")
            tableMapping.ColumnMappings.Add("COD_D_H", "COD_D_H")
            tableMapping.ColumnMappings.Add("IMP_S", "IMP_S")
            tableMapping.ColumnMappings.Add("IMP_D", "IMP_D")
            tableMapping.ColumnMappings.Add("STATUS_CONCILIADO", "STATUS_CONCILIADO")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("GLOSA", "GLOSA")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_TOTROS_KARDEX_NO_ACUMULADO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_MES", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_CUENTA", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_PER", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REP_ANA_OTROS.REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable, ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String, ByVal COD_PER As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(COD_PER,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String, ByVal COD_PER As String) As DT_REP_ANA_OTROS.REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(COD_PER,String)
            End If
            Dim dataTable As DT_REP_ANA_OTROS.REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable = New DT_REP_ANA_OTROS.REPORTE_TOTROS_KARDEX_NO_ACUMULADODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_CONCILIADAS_OTROSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_CONCILIADAS_OTROS"
            tableMapping.ColumnMappings.Add("COD_MONEDA", "COD_MONEDA")
            tableMapping.ColumnMappings.Add("DESC_MONEDA", "DESC_MONEDA")
            tableMapping.ColumnMappings.Add("FECHA_COMP", "FECHA_COMP")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("FECHA_DOC", "FECHA_DOC")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("TIPO_CAMBIO", "TIPO_CAMBIO")
            tableMapping.ColumnMappings.Add("COD_D_H", "COD_D_H")
            tableMapping.ColumnMappings.Add("IMP_S", "IMP_S")
            tableMapping.ColumnMappings.Add("IMP_D", "IMP_D")
            tableMapping.ColumnMappings.Add("STATUS_CONCILIADO", "STATUS_CONCILIADO")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("GLOSA", "GLOSA")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("FECHA_VEN", "FECHA_VEN")
            tableMapping.ColumnMappings.Add("NRO_DOC_PER", "NRO_DOC_PER")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_CONCILIADAS_OTROS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_MES", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_CUENTA", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS_CONCILIADO", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_PER", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@S_PER", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_CONC", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REP_ANA_OTROS.REPORTE_CONCILIADAS_OTROSDataTable, ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String, ByVal STATUS_CONCILIADO As String, ByVal COD_PER As String, ByVal S_PER As String, ByVal FECHA_CONC As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (STATUS_CONCILIADO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(STATUS_CONCILIADO,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(COD_PER,String)
            End If
            If (S_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(S_PER,String)
            End If
            If (FECHA_CONC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(FECHA_CONC.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String, ByVal STATUS_CONCILIADO As String, ByVal COD_PER As String, ByVal S_PER As String, ByVal FECHA_CONC As Global.System.Nullable(Of Date)) As DT_REP_ANA_OTROS.REPORTE_CONCILIADAS_OTROSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (STATUS_CONCILIADO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(STATUS_CONCILIADO,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(COD_PER,String)
            End If
            If (S_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(S_PER,String)
            End If
            If (FECHA_CONC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(FECHA_CONC.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DT_REP_ANA_OTROS.REPORTE_CONCILIADAS_OTROSDataTable = New DT_REP_ANA_OTROS.REPORTE_CONCILIADAS_OTROSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace

'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.7905
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DT_LIBRO"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DT_LIBRO
    Inherits Global.System.Data.DataSet
    
    Private tableI_BANCO As I_BANCODataTable
    
    Private tableI_BANCO1 As I_BANCO1DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("I_BANCO")) Is Nothing) Then
                MyBase.Tables.Add(New I_BANCODataTable(ds.Tables("I_BANCO")))
            End If
            If (Not (ds.Tables("I_BANCO1")) Is Nothing) Then
                MyBase.Tables.Add(New I_BANCO1DataTable(ds.Tables("I_BANCO1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property I_BANCO() As I_BANCODataTable
        Get
            Return Me.tableI_BANCO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property I_BANCO1() As I_BANCO1DataTable
        Get
            Return Me.tableI_BANCO1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DT_LIBRO = CType(MyBase.Clone,DT_LIBRO)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("I_BANCO")) Is Nothing) Then
                MyBase.Tables.Add(New I_BANCODataTable(ds.Tables("I_BANCO")))
            End If
            If (Not (ds.Tables("I_BANCO1")) Is Nothing) Then
                MyBase.Tables.Add(New I_BANCO1DataTable(ds.Tables("I_BANCO1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableI_BANCO = CType(MyBase.Tables("I_BANCO"),I_BANCODataTable)
        If (initTable = true) Then
            If (Not (Me.tableI_BANCO) Is Nothing) Then
                Me.tableI_BANCO.InitVars
            End If
        End If
        Me.tableI_BANCO1 = CType(MyBase.Tables("I_BANCO1"),I_BANCO1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableI_BANCO1) Is Nothing) Then
                Me.tableI_BANCO1.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DT_LIBRO"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DT_LIBRO.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableI_BANCO = New I_BANCODataTable
        MyBase.Tables.Add(Me.tableI_BANCO)
        Me.tableI_BANCO1 = New I_BANCO1DataTable
        MyBase.Tables.Add(Me.tableI_BANCO1)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeI_BANCO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeI_BANCO1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DT_LIBRO = New DT_LIBRO
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub I_BANCORowChangeEventHandler(ByVal sender As Object, ByVal e As I_BANCORowChangeEvent)
    
    Public Delegate Sub I_BANCO1RowChangeEventHandler(ByVal sender As Object, ByVal e As I_BANCO1RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class I_BANCODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncod_mp As Global.System.Data.DataColumn
        
        Private columnnro_mp As Global.System.Data.DataColumn
        
        Private columncod_banco As Global.System.Data.DataColumn
        
        Private columnfecha_mp As Global.System.Data.DataColumn
        
        Private columndesc_ope As Global.System.Data.DataColumn
        
        Private columnDEBE As Global.System.Data.DataColumn
        
        Private columnHABER As Global.System.Data.DataColumn
        
        Private columncod_aux As Global.System.Data.DataColumn
        
        Private columncod_comp As Global.System.Data.DataColumn
        
        Private columnNro_comp As Global.System.Data.DataColumn
        
        Private columnfe_año As Global.System.Data.DataColumn
        
        Private columnfe_mes As Global.System.Data.DataColumn
        
        Private columnstatus_ext As Global.System.Data.DataColumn
        
        Private columnstatus_conc As Global.System.Data.DataColumn
        
        Private columnfe_mes_conc As Global.System.Data.DataColumn
        
        Private columnsaldo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "I_BANCO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_mpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncod_mp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nro_mpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnro_mp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_bancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncod_banco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecha_mpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecha_mp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property desc_opeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndesc_ope
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEBEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEBE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HABERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHABER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_auxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncod_aux
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_compColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncod_comp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nro_compColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNro_comp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fe_añoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfe_año
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fe_mesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfe_mes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property status_extColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus_ext
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property status_concColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus_conc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fe_mes_concColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfe_mes_conc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saldoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaldo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As I_BANCORow
            Get
                Return CType(Me.Rows(index),I_BANCORow)
            End Get
        End Property
        
        Public Event I_BANCORowChanging As I_BANCORowChangeEventHandler
        
        Public Event I_BANCORowChanged As I_BANCORowChangeEventHandler
        
        Public Event I_BANCORowDeleting As I_BANCORowChangeEventHandler
        
        Public Event I_BANCORowDeleted As I_BANCORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddI_BANCORow(ByVal row As I_BANCORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddI_BANCORow( _
                    ByVal cod_mp As String,  _
                    ByVal nro_mp As String,  _
                    ByVal cod_banco As String,  _
                    ByVal fecha_mp As Date,  _
                    ByVal desc_ope As String,  _
                    ByVal DEBE As Decimal,  _
                    ByVal HABER As Decimal,  _
                    ByVal cod_aux As String,  _
                    ByVal cod_comp As String,  _
                    ByVal Nro_comp As String,  _
                    ByVal fe_año As String,  _
                    ByVal fe_mes As String,  _
                    ByVal status_ext As String,  _
                    ByVal status_conc As String,  _
                    ByVal fe_mes_conc As String,  _
                    ByVal saldo As Decimal) As I_BANCORow
            Dim rowI_BANCORow As I_BANCORow = CType(Me.NewRow,I_BANCORow)
            Dim columnValuesArray() As Object = New Object() {cod_mp, nro_mp, cod_banco, fecha_mp, desc_ope, DEBE, HABER, cod_aux, cod_comp, Nro_comp, fe_año, fe_mes, status_ext, status_conc, fe_mes_conc, saldo}
            rowI_BANCORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowI_BANCORow)
            Return rowI_BANCORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_mpnro_mpcod_banco(ByVal cod_mp As String, ByVal nro_mp As String, ByVal cod_banco As String) As I_BANCORow
            Return CType(Me.Rows.Find(New Object() {cod_mp, nro_mp, cod_banco}),I_BANCORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As I_BANCODataTable = CType(MyBase.Clone,I_BANCODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New I_BANCODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_mp = MyBase.Columns("cod_mp")
            Me.columnnro_mp = MyBase.Columns("nro_mp")
            Me.columncod_banco = MyBase.Columns("cod_banco")
            Me.columnfecha_mp = MyBase.Columns("fecha_mp")
            Me.columndesc_ope = MyBase.Columns("desc_ope")
            Me.columnDEBE = MyBase.Columns("DEBE")
            Me.columnHABER = MyBase.Columns("HABER")
            Me.columncod_aux = MyBase.Columns("cod_aux")
            Me.columncod_comp = MyBase.Columns("cod_comp")
            Me.columnNro_comp = MyBase.Columns("Nro_comp")
            Me.columnfe_año = MyBase.Columns("fe_año")
            Me.columnfe_mes = MyBase.Columns("fe_mes")
            Me.columnstatus_ext = MyBase.Columns("status_ext")
            Me.columnstatus_conc = MyBase.Columns("status_conc")
            Me.columnfe_mes_conc = MyBase.Columns("fe_mes_conc")
            Me.columnsaldo = MyBase.Columns("saldo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_mp = New Global.System.Data.DataColumn("cod_mp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_mp)
            Me.columnnro_mp = New Global.System.Data.DataColumn("nro_mp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnro_mp)
            Me.columncod_banco = New Global.System.Data.DataColumn("cod_banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_banco)
            Me.columnfecha_mp = New Global.System.Data.DataColumn("fecha_mp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha_mp)
            Me.columndesc_ope = New Global.System.Data.DataColumn("desc_ope", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_ope)
            Me.columnDEBE = New Global.System.Data.DataColumn("DEBE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEBE)
            Me.columnHABER = New Global.System.Data.DataColumn("HABER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHABER)
            Me.columncod_aux = New Global.System.Data.DataColumn("cod_aux", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_aux)
            Me.columncod_comp = New Global.System.Data.DataColumn("cod_comp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_comp)
            Me.columnNro_comp = New Global.System.Data.DataColumn("Nro_comp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNro_comp)
            Me.columnfe_año = New Global.System.Data.DataColumn("fe_año", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfe_año)
            Me.columnfe_mes = New Global.System.Data.DataColumn("fe_mes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfe_mes)
            Me.columnstatus_ext = New Global.System.Data.DataColumn("status_ext", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus_ext)
            Me.columnstatus_conc = New Global.System.Data.DataColumn("status_conc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus_conc)
            Me.columnfe_mes_conc = New Global.System.Data.DataColumn("fe_mes_conc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfe_mes_conc)
            Me.columnsaldo = New Global.System.Data.DataColumn("saldo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaldo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncod_mp, Me.columnnro_mp, Me.columncod_banco}, true))
            Me.columncod_mp.AllowDBNull = false
            Me.columncod_mp.MaxLength = 3
            Me.columnnro_mp.AllowDBNull = false
            Me.columnnro_mp.MaxLength = 15
            Me.columncod_banco.AllowDBNull = false
            Me.columncod_banco.MaxLength = 4
            Me.columndesc_ope.MaxLength = 60
            Me.columnDEBE.ReadOnly = true
            Me.columnHABER.ReadOnly = true
            Me.columncod_aux.MaxLength = 2
            Me.columncod_comp.MaxLength = 3
            Me.columnNro_comp.MaxLength = 4
            Me.columnfe_año.MaxLength = 4
            Me.columnfe_mes.MaxLength = 2
            Me.columnstatus_ext.MaxLength = 1
            Me.columnstatus_conc.MaxLength = 1
            Me.columnfe_mes_conc.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewI_BANCORow() As I_BANCORow
            Return CType(Me.NewRow,I_BANCORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New I_BANCORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(I_BANCORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.I_BANCORowChangedEvent) Is Nothing) Then
                RaiseEvent I_BANCORowChanged(Me, New I_BANCORowChangeEvent(CType(e.Row,I_BANCORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.I_BANCORowChangingEvent) Is Nothing) Then
                RaiseEvent I_BANCORowChanging(Me, New I_BANCORowChangeEvent(CType(e.Row,I_BANCORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.I_BANCORowDeletedEvent) Is Nothing) Then
                RaiseEvent I_BANCORowDeleted(Me, New I_BANCORowChangeEvent(CType(e.Row,I_BANCORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.I_BANCORowDeletingEvent) Is Nothing) Then
                RaiseEvent I_BANCORowDeleting(Me, New I_BANCORowChangeEvent(CType(e.Row,I_BANCORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveI_BANCORow(ByVal row As I_BANCORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_LIBRO = New DT_LIBRO
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "I_BANCODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class I_BANCO1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncod_mp As Global.System.Data.DataColumn
        
        Private columnnro_mp As Global.System.Data.DataColumn
        
        Private columncod_banco As Global.System.Data.DataColumn
        
        Private columnfecha_mp As Global.System.Data.DataColumn
        
        Private columndesc_ope As Global.System.Data.DataColumn
        
        Private columnDEBE As Global.System.Data.DataColumn
        
        Private columnHABER As Global.System.Data.DataColumn
        
        Private columncod_aux As Global.System.Data.DataColumn
        
        Private columncod_comp As Global.System.Data.DataColumn
        
        Private columnNro_comp As Global.System.Data.DataColumn
        
        Private columnfe_año As Global.System.Data.DataColumn
        
        Private columnfe_mes As Global.System.Data.DataColumn
        
        Private columnstatus_ext As Global.System.Data.DataColumn
        
        Private columnstatus_conc As Global.System.Data.DataColumn
        
        Private columnfe_mes_conc As Global.System.Data.DataColumn
        
        Private columnSALDO As Global.System.Data.DataColumn
        
        Private columnMONEDA_EXTRANJERA As Global.System.Data.DataColumn
        
        Private columnultimo_saldo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "I_BANCO1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_mpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncod_mp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nro_mpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnro_mp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_bancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncod_banco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecha_mpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecha_mp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property desc_opeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndesc_ope
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEBEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEBE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HABERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHABER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_auxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncod_aux
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cod_compColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncod_comp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nro_compColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNro_comp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fe_añoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfe_año
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fe_mesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfe_mes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property status_extColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus_ext
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property status_concColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus_conc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fe_mes_concColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfe_mes_conc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONEDA_EXTRANJERAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONEDA_EXTRANJERA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ultimo_saldoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnultimo_saldo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As I_BANCO1Row
            Get
                Return CType(Me.Rows(index),I_BANCO1Row)
            End Get
        End Property
        
        Public Event I_BANCO1RowChanging As I_BANCO1RowChangeEventHandler
        
        Public Event I_BANCO1RowChanged As I_BANCO1RowChangeEventHandler
        
        Public Event I_BANCO1RowDeleting As I_BANCO1RowChangeEventHandler
        
        Public Event I_BANCO1RowDeleted As I_BANCO1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddI_BANCO1Row(ByVal row As I_BANCO1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddI_BANCO1Row( _
                    ByVal cod_mp As String,  _
                    ByVal nro_mp As String,  _
                    ByVal cod_banco As String,  _
                    ByVal fecha_mp As Date,  _
                    ByVal desc_ope As String,  _
                    ByVal DEBE As Decimal,  _
                    ByVal HABER As Decimal,  _
                    ByVal cod_aux As String,  _
                    ByVal cod_comp As String,  _
                    ByVal Nro_comp As String,  _
                    ByVal fe_año As String,  _
                    ByVal fe_mes As String,  _
                    ByVal status_ext As String,  _
                    ByVal status_conc As String,  _
                    ByVal fe_mes_conc As String,  _
                    ByVal SALDO As String,  _
                    ByVal MONEDA_EXTRANJERA As Decimal,  _
                    ByVal ultimo_saldo As String) As I_BANCO1Row
            Dim rowI_BANCO1Row As I_BANCO1Row = CType(Me.NewRow,I_BANCO1Row)
            Dim columnValuesArray() As Object = New Object() {cod_mp, nro_mp, cod_banco, fecha_mp, desc_ope, DEBE, HABER, cod_aux, cod_comp, Nro_comp, fe_año, fe_mes, status_ext, status_conc, fe_mes_conc, SALDO, MONEDA_EXTRANJERA, ultimo_saldo}
            rowI_BANCO1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowI_BANCO1Row)
            Return rowI_BANCO1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycod_mpnro_mpcod_banco(ByVal cod_mp As String, ByVal nro_mp As String, ByVal cod_banco As String) As I_BANCO1Row
            Return CType(Me.Rows.Find(New Object() {cod_mp, nro_mp, cod_banco}),I_BANCO1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As I_BANCO1DataTable = CType(MyBase.Clone,I_BANCO1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New I_BANCO1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncod_mp = MyBase.Columns("cod_mp")
            Me.columnnro_mp = MyBase.Columns("nro_mp")
            Me.columncod_banco = MyBase.Columns("cod_banco")
            Me.columnfecha_mp = MyBase.Columns("fecha_mp")
            Me.columndesc_ope = MyBase.Columns("desc_ope")
            Me.columnDEBE = MyBase.Columns("DEBE")
            Me.columnHABER = MyBase.Columns("HABER")
            Me.columncod_aux = MyBase.Columns("cod_aux")
            Me.columncod_comp = MyBase.Columns("cod_comp")
            Me.columnNro_comp = MyBase.Columns("Nro_comp")
            Me.columnfe_año = MyBase.Columns("fe_año")
            Me.columnfe_mes = MyBase.Columns("fe_mes")
            Me.columnstatus_ext = MyBase.Columns("status_ext")
            Me.columnstatus_conc = MyBase.Columns("status_conc")
            Me.columnfe_mes_conc = MyBase.Columns("fe_mes_conc")
            Me.columnSALDO = MyBase.Columns("SALDO")
            Me.columnMONEDA_EXTRANJERA = MyBase.Columns("MONEDA_EXTRANJERA")
            Me.columnultimo_saldo = MyBase.Columns("ultimo_saldo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncod_mp = New Global.System.Data.DataColumn("cod_mp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_mp)
            Me.columnnro_mp = New Global.System.Data.DataColumn("nro_mp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnro_mp)
            Me.columncod_banco = New Global.System.Data.DataColumn("cod_banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_banco)
            Me.columnfecha_mp = New Global.System.Data.DataColumn("fecha_mp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha_mp)
            Me.columndesc_ope = New Global.System.Data.DataColumn("desc_ope", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_ope)
            Me.columnDEBE = New Global.System.Data.DataColumn("DEBE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEBE)
            Me.columnHABER = New Global.System.Data.DataColumn("HABER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHABER)
            Me.columncod_aux = New Global.System.Data.DataColumn("cod_aux", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_aux)
            Me.columncod_comp = New Global.System.Data.DataColumn("cod_comp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncod_comp)
            Me.columnNro_comp = New Global.System.Data.DataColumn("Nro_comp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNro_comp)
            Me.columnfe_año = New Global.System.Data.DataColumn("fe_año", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfe_año)
            Me.columnfe_mes = New Global.System.Data.DataColumn("fe_mes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfe_mes)
            Me.columnstatus_ext = New Global.System.Data.DataColumn("status_ext", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus_ext)
            Me.columnstatus_conc = New Global.System.Data.DataColumn("status_conc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus_conc)
            Me.columnfe_mes_conc = New Global.System.Data.DataColumn("fe_mes_conc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfe_mes_conc)
            Me.columnSALDO = New Global.System.Data.DataColumn("SALDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO)
            Me.columnMONEDA_EXTRANJERA = New Global.System.Data.DataColumn("MONEDA_EXTRANJERA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONEDA_EXTRANJERA)
            Me.columnultimo_saldo = New Global.System.Data.DataColumn("ultimo_saldo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnultimo_saldo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncod_mp, Me.columnnro_mp, Me.columncod_banco}, true))
            Me.columncod_mp.AllowDBNull = false
            Me.columncod_mp.MaxLength = 3
            Me.columnnro_mp.AllowDBNull = false
            Me.columnnro_mp.MaxLength = 15
            Me.columncod_banco.AllowDBNull = false
            Me.columncod_banco.MaxLength = 4
            Me.columndesc_ope.MaxLength = 60
            Me.columnDEBE.ReadOnly = true
            Me.columnHABER.ReadOnly = true
            Me.columncod_aux.MaxLength = 2
            Me.columncod_comp.MaxLength = 3
            Me.columnNro_comp.MaxLength = 4
            Me.columnfe_año.MaxLength = 4
            Me.columnfe_mes.MaxLength = 2
            Me.columnstatus_ext.MaxLength = 1
            Me.columnstatus_conc.MaxLength = 1
            Me.columnfe_mes_conc.MaxLength = 2
            Me.columnMONEDA_EXTRANJERA.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewI_BANCO1Row() As I_BANCO1Row
            Return CType(Me.NewRow,I_BANCO1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New I_BANCO1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(I_BANCO1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.I_BANCO1RowChangedEvent) Is Nothing) Then
                RaiseEvent I_BANCO1RowChanged(Me, New I_BANCO1RowChangeEvent(CType(e.Row,I_BANCO1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.I_BANCO1RowChangingEvent) Is Nothing) Then
                RaiseEvent I_BANCO1RowChanging(Me, New I_BANCO1RowChangeEvent(CType(e.Row,I_BANCO1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.I_BANCO1RowDeletedEvent) Is Nothing) Then
                RaiseEvent I_BANCO1RowDeleted(Me, New I_BANCO1RowChangeEvent(CType(e.Row,I_BANCO1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.I_BANCO1RowDeletingEvent) Is Nothing) Then
                RaiseEvent I_BANCO1RowDeleting(Me, New I_BANCO1RowChangeEvent(CType(e.Row,I_BANCO1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveI_BANCO1Row(ByVal row As I_BANCO1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_LIBRO = New DT_LIBRO
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "I_BANCO1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class I_BANCORow
        Inherits Global.System.Data.DataRow
        
        Private tableI_BANCO As I_BANCODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableI_BANCO = CType(Me.Table,I_BANCODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_mp() As String
            Get
                Return CType(Me(Me.tableI_BANCO.cod_mpColumn),String)
            End Get
            Set
                Me(Me.tableI_BANCO.cod_mpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nro_mp() As String
            Get
                Return CType(Me(Me.tableI_BANCO.nro_mpColumn),String)
            End Get
            Set
                Me(Me.tableI_BANCO.nro_mpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_banco() As String
            Get
                Return CType(Me(Me.tableI_BANCO.cod_bancoColumn),String)
            End Get
            Set
                Me(Me.tableI_BANCO.cod_bancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha_mp() As Date
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO.fecha_mpColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecha_mp' de la tabla 'I_BANCO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO.fecha_mpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property desc_ope() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO.desc_opeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'desc_ope' de la tabla 'I_BANCO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO.desc_opeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEBE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO.DEBEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEBE' de la tabla 'I_BANCO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO.DEBEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HABER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO.HABERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HABER' de la tabla 'I_BANCO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO.HABERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_aux() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO.cod_auxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cod_aux' de la tabla 'I_BANCO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO.cod_auxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_comp() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO.cod_compColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cod_comp' de la tabla 'I_BANCO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO.cod_compColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nro_comp() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO.Nro_compColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nro_comp' de la tabla 'I_BANCO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO.Nro_compColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fe_año() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO.fe_añoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fe_año' de la tabla 'I_BANCO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO.fe_añoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fe_mes() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO.fe_mesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fe_mes' de la tabla 'I_BANCO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO.fe_mesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status_ext() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO.status_extColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'status_ext' de la tabla 'I_BANCO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO.status_extColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status_conc() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO.status_concColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'status_conc' de la tabla 'I_BANCO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO.status_concColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fe_mes_conc() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO.fe_mes_concColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fe_mes_conc' de la tabla 'I_BANCO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO.fe_mes_concColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saldo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO.saldoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'saldo' de la tabla 'I_BANCO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO.saldoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isfecha_mpNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO.fecha_mpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setfecha_mpNull()
            Me(Me.tableI_BANCO.fecha_mpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdesc_opeNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO.desc_opeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdesc_opeNull()
            Me(Me.tableI_BANCO.desc_opeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEBENull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO.DEBEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEBENull()
            Me(Me.tableI_BANCO.DEBEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHABERNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO.HABERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHABERNull()
            Me(Me.tableI_BANCO.HABERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscod_auxNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO.cod_auxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcod_auxNull()
            Me(Me.tableI_BANCO.cod_auxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscod_compNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO.cod_compColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcod_compNull()
            Me(Me.tableI_BANCO.cod_compColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNro_compNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO.Nro_compColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNro_compNull()
            Me(Me.tableI_BANCO.Nro_compColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isfe_añoNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO.fe_añoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setfe_añoNull()
            Me(Me.tableI_BANCO.fe_añoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isfe_mesNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO.fe_mesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setfe_mesNull()
            Me(Me.tableI_BANCO.fe_mesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isstatus_extNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO.status_extColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setstatus_extNull()
            Me(Me.tableI_BANCO.status_extColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isstatus_concNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO.status_concColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setstatus_concNull()
            Me(Me.tableI_BANCO.status_concColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isfe_mes_concNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO.fe_mes_concColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setfe_mes_concNull()
            Me(Me.tableI_BANCO.fe_mes_concColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssaldoNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO.saldoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsaldoNull()
            Me(Me.tableI_BANCO.saldoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class I_BANCO1Row
        Inherits Global.System.Data.DataRow
        
        Private tableI_BANCO1 As I_BANCO1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableI_BANCO1 = CType(Me.Table,I_BANCO1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_mp() As String
            Get
                Return CType(Me(Me.tableI_BANCO1.cod_mpColumn),String)
            End Get
            Set
                Me(Me.tableI_BANCO1.cod_mpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nro_mp() As String
            Get
                Return CType(Me(Me.tableI_BANCO1.nro_mpColumn),String)
            End Get
            Set
                Me(Me.tableI_BANCO1.nro_mpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_banco() As String
            Get
                Return CType(Me(Me.tableI_BANCO1.cod_bancoColumn),String)
            End Get
            Set
                Me(Me.tableI_BANCO1.cod_bancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha_mp() As Date
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO1.fecha_mpColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecha_mp' de la tabla 'I_BANCO1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO1.fecha_mpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property desc_ope() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO1.desc_opeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'desc_ope' de la tabla 'I_BANCO1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO1.desc_opeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEBE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO1.DEBEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEBE' de la tabla 'I_BANCO1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO1.DEBEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HABER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO1.HABERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HABER' de la tabla 'I_BANCO1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO1.HABERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_aux() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO1.cod_auxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cod_aux' de la tabla 'I_BANCO1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO1.cod_auxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cod_comp() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO1.cod_compColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cod_comp' de la tabla 'I_BANCO1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO1.cod_compColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nro_comp() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO1.Nro_compColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nro_comp' de la tabla 'I_BANCO1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO1.Nro_compColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fe_año() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO1.fe_añoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fe_año' de la tabla 'I_BANCO1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO1.fe_añoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fe_mes() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO1.fe_mesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fe_mes' de la tabla 'I_BANCO1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO1.fe_mesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status_ext() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO1.status_extColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'status_ext' de la tabla 'I_BANCO1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO1.status_extColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status_conc() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO1.status_concColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'status_conc' de la tabla 'I_BANCO1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO1.status_concColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fe_mes_conc() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO1.fe_mes_concColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fe_mes_conc' de la tabla 'I_BANCO1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO1.fe_mes_concColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO1.SALDOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO' de la tabla 'I_BANCO1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO1.SALDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONEDA_EXTRANJERA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO1.MONEDA_EXTRANJERAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONEDA_EXTRANJERA' de la tabla 'I_BANCO1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO1.MONEDA_EXTRANJERAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ultimo_saldo() As String
            Get
                Try 
                    Return CType(Me(Me.tableI_BANCO1.ultimo_saldoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ultimo_saldo' de la tabla 'I_BANCO1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableI_BANCO1.ultimo_saldoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isfecha_mpNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO1.fecha_mpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setfecha_mpNull()
            Me(Me.tableI_BANCO1.fecha_mpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdesc_opeNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO1.desc_opeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdesc_opeNull()
            Me(Me.tableI_BANCO1.desc_opeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEBENull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO1.DEBEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEBENull()
            Me(Me.tableI_BANCO1.DEBEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHABERNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO1.HABERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHABERNull()
            Me(Me.tableI_BANCO1.HABERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscod_auxNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO1.cod_auxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcod_auxNull()
            Me(Me.tableI_BANCO1.cod_auxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscod_compNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO1.cod_compColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcod_compNull()
            Me(Me.tableI_BANCO1.cod_compColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNro_compNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO1.Nro_compColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNro_compNull()
            Me(Me.tableI_BANCO1.Nro_compColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isfe_añoNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO1.fe_añoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setfe_añoNull()
            Me(Me.tableI_BANCO1.fe_añoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isfe_mesNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO1.fe_mesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setfe_mesNull()
            Me(Me.tableI_BANCO1.fe_mesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isstatus_extNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO1.status_extColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setstatus_extNull()
            Me(Me.tableI_BANCO1.status_extColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isstatus_concNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO1.status_concColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setstatus_concNull()
            Me(Me.tableI_BANCO1.status_concColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isfe_mes_concNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO1.fe_mes_concColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setfe_mes_concNull()
            Me(Me.tableI_BANCO1.fe_mes_concColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDONull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO1.SALDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDONull()
            Me(Me.tableI_BANCO1.SALDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONEDA_EXTRANJERANull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO1.MONEDA_EXTRANJERAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONEDA_EXTRANJERANull()
            Me(Me.tableI_BANCO1.MONEDA_EXTRANJERAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isultimo_saldoNull() As Boolean
            Return Me.IsNull(Me.tableI_BANCO1.ultimo_saldoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setultimo_saldoNull()
            Me(Me.tableI_BANCO1.ultimo_saldoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class I_BANCORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As I_BANCORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As I_BANCORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As I_BANCORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class I_BANCO1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As I_BANCO1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As I_BANCO1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As I_BANCO1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DT_LIBROTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class I_BANCOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "I_BANCO"
            tableMapping.ColumnMappings.Add("cod_mp", "cod_mp")
            tableMapping.ColumnMappings.Add("nro_mp", "nro_mp")
            tableMapping.ColumnMappings.Add("cod_banco", "cod_banco")
            tableMapping.ColumnMappings.Add("fecha_mp", "fecha_mp")
            tableMapping.ColumnMappings.Add("desc_ope", "desc_ope")
            tableMapping.ColumnMappings.Add("DEBE", "DEBE")
            tableMapping.ColumnMappings.Add("HABER", "HABER")
            tableMapping.ColumnMappings.Add("cod_aux", "cod_aux")
            tableMapping.ColumnMappings.Add("cod_comp", "cod_comp")
            tableMapping.ColumnMappings.Add("Nro_comp", "Nro_comp")
            tableMapping.ColumnMappings.Add("fe_año", "fe_año")
            tableMapping.ColumnMappings.Add("fe_mes", "fe_mes")
            tableMapping.ColumnMappings.Add("status_ext", "status_ext")
            tableMapping.ColumnMappings.Add("status_conc", "status_conc")
            tableMapping.ColumnMappings.Add("fe_mes_conc", "fe_mes_conc")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [I_Banco] WHERE (([cod_mp] = @Original_cod_mp) AND ([nro_mp] = @Origi"& _ 
                "nal_nro_mp) AND ([cod_banco] = @Original_cod_banco) AND ((@IsNull_fecha_mp = 1 A"& _ 
                "ND [fecha_mp] IS NULL) OR ([fecha_mp] = @Original_fecha_mp)) AND ((@IsNull_desc_"& _ 
                "ope = 1 AND [desc_ope] IS NULL) OR ([desc_ope] = @Original_desc_ope)) AND ((@IsN"& _ 
                "ull_cod_aux = 1 AND [cod_aux] IS NULL) OR ([cod_aux] = @Original_cod_aux)) AND ("& _ 
                "(@IsNull_cod_comp = 1 AND [cod_comp] IS NULL) OR ([cod_comp] = @Original_cod_com"& _ 
                "p)) AND ((@IsNull_Nro_comp = 1 AND [Nro_comp] IS NULL) OR ([Nro_comp] = @Origina"& _ 
                "l_Nro_comp)) AND ((@IsNull_fe_año = 1 AND [fe_año] IS NULL) OR ([fe_año] = @Orig"& _ 
                "inal_fe_año)) AND ((@IsNull_fe_mes = 1 AND [fe_mes] IS NULL) OR ([fe_mes] = @Ori"& _ 
                "ginal_fe_mes)) AND ((@IsNull_status_ext = 1 AND [status_ext] IS NULL) OR ([statu"& _ 
                "s_ext] = @Original_status_ext)) AND ((@IsNull_status_conc = 1 AND [status_conc] "& _ 
                "IS NULL) OR ([status_conc] = @Original_status_conc)) AND ((@IsNull_fe_mes_conc ="& _ 
                " 1 AND [fe_mes_conc] IS NULL) OR ([fe_mes_conc] = @Original_fe_mes_conc)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_mp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_mp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nro_mp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nro_mp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_banco", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_banco", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fecha_mp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fecha_mp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fecha_mp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fecha_mp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_desc_ope", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_ope", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_ope", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_ope", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_cod_aux", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_aux", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_aux", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_aux", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_cod_comp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_comp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_comp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_comp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nro_comp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nro_comp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nro_comp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nro_comp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fe_año", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_año", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fe_año", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_año", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fe_mes", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fe_mes", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_status_ext", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_ext", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status_ext", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_ext", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_status_conc", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_conc", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_conc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fe_mes_conc", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes_conc", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fe_mes_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes_conc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [I_Banco] ([cod_mp], [nro_mp], [cod_banco], [fecha_mp], [desc_ope], ["& _ 
                "cod_aux], [cod_comp], [Nro_comp], [fe_año], [fe_mes], [status_ext], [status_conc"& _ 
                "], [fe_mes_conc]) VALUES (@cod_mp, @nro_mp, @cod_banco, @fecha_mp, @desc_ope, @c"& _ 
                "od_aux, @cod_comp, @Nro_comp, @fe_año, @fe_mes, @status_ext, @status_conc, @fe_m"& _ 
                "es_conc);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COD_MP, NRO_MP, COD_BANCO, FECHA_MP, DESC_OPE, CASE WHEN COD_D"& _ 
                "_H = 'D' THEN IMP_DOC ELSE 0.0 END AS DEBE, CASE WHEN COD_D_H = 'H' THEN IMP_DOC"& _ 
                " ELSE 0.0 END AS HABER, COD_AUX, COD_COMP, NRO_COMP, FE_AÑO, FE_MES, STATUS_EXT,"& _ 
                " STATUS_CONC, FE_MES_CONC FROM I_BANCO WHERE (COD_BANCO = @COD_BANCO) AND (COD_M"& _ 
                "P = @COD_MP) AND (NRO_MP = @NRO_MP) ORDER BY FECHA_MP"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_mp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_mp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nro_mp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nro_mp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_banco", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_banco", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fecha_mp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fecha_mp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_ope", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_ope", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_aux", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_aux", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_comp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_comp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nro_comp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nro_comp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fe_año", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_año", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fe_mes", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status_ext", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_ext", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_conc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fe_mes_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes_conc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_BANCO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_BANCO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_MP", Global.System.Data.SqlDbType.[Char], 3, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_MP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NRO_MP", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "NRO_MP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [I_Banco] SET [cod_mp] = @cod_mp, [nro_mp] = @nro_mp, [cod_banco] = @cod_b"& _ 
                "anco, [fecha_mp] = @fecha_mp, [desc_ope] = @desc_ope, [cod_aux] = @cod_aux, [cod"& _ 
                "_comp] = @cod_comp, [Nro_comp] = @Nro_comp, [fe_año] = @fe_año, [fe_mes] = @fe_m"& _ 
                "es, [status_ext] = @status_ext, [status_conc] = @status_conc, [fe_mes_conc] = @f"& _ 
                "e_mes_conc WHERE (([cod_mp] = @Original_cod_mp) AND ([nro_mp] = @Original_nro_mp"& _ 
                ") AND ([cod_banco] = @Original_cod_banco) AND ((@IsNull_fecha_mp = 1 AND [fecha_"& _ 
                "mp] IS NULL) OR ([fecha_mp] = @Original_fecha_mp)) AND ((@IsNull_desc_ope = 1 AN"& _ 
                "D [desc_ope] IS NULL) OR ([desc_ope] = @Original_desc_ope)) AND ((@IsNull_cod_au"& _ 
                "x = 1 AND [cod_aux] IS NULL) OR ([cod_aux] = @Original_cod_aux)) AND ((@IsNull_c"& _ 
                "od_comp = 1 AND [cod_comp] IS NULL) OR ([cod_comp] = @Original_cod_comp)) AND (("& _ 
                "@IsNull_Nro_comp = 1 AND [Nro_comp] IS NULL) OR ([Nro_comp] = @Original_Nro_comp"& _ 
                ")) AND ((@IsNull_fe_año = 1 AND [fe_año] IS NULL) OR ([fe_año] = @Original_fe_añ"& _ 
                "o)) AND ((@IsNull_fe_mes = 1 AND [fe_mes] IS NULL) OR ([fe_mes] = @Original_fe_m"& _ 
                "es)) AND ((@IsNull_status_ext = 1 AND [status_ext] IS NULL) OR ([status_ext] = @"& _ 
                "Original_status_ext)) AND ((@IsNull_status_conc = 1 AND [status_conc] IS NULL) O"& _ 
                "R ([status_conc] = @Original_status_conc)) AND ((@IsNull_fe_mes_conc = 1 AND [fe"& _ 
                "_mes_conc] IS NULL) OR ([fe_mes_conc] = @Original_fe_mes_conc)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COD_MP"& _ 
                ", NRO_MP, COD_BANCO, FECHA_MP, DESC_OPE, CASE WHEN COD_D_H = 'D' THEN IMP_DOC EL"& _ 
                "SE 0.0 END AS DEBE, CASE WHEN COD_D_H = 'H' THEN IMP_DOC ELSE 0.0 END AS HABER, "& _ 
                "COD_AUX, COD_COMP, NRO_COMP, FE_AÑO, FE_MES, STATUS_EXT, STATUS_CONC, FE_MES_CON"& _ 
                "C FROM I_BANCO WHERE (COD_BANCO = @COD_BANCO) AND (COD_MP = @COD_MP) AND (NRO_MP"& _ 
                " = @NRO_MP) ORDER BY FECHA_MP"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_mp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_mp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nro_mp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nro_mp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_banco", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_banco", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fecha_mp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fecha_mp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_ope", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_ope", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_aux", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_aux", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_comp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_comp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nro_comp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nro_comp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fe_año", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_año", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fe_mes", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status_ext", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_ext", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_conc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fe_mes_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes_conc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_mp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_mp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nro_mp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nro_mp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_banco", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_banco", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fecha_mp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fecha_mp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fecha_mp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fecha_mp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_desc_ope", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_ope", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_ope", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_ope", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_cod_aux", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_aux", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_aux", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_aux", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_cod_comp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_comp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_comp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_comp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nro_comp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nro_comp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nro_comp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nro_comp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fe_año", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_año", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fe_año", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_año", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fe_mes", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fe_mes", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_status_ext", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_ext", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status_ext", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_ext", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_status_conc", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_conc", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_conc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fe_mes_conc", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes_conc", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fe_mes_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes_conc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_BANCO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_BANCO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_MP", Global.System.Data.SqlDbType.[Char], 3, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_MP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NRO_MP", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "NRO_MP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     cod_mp, nro_mp, cod_banco, fecha_mp, desc_ope, CASE WHEN COD_D_H = 'D'"& _ 
                " THEN IMP_DOC ELSE 0.0 END AS DEBE,                        CASE WHEN COD_D_H = '"& _ 
                "H' THEN IMP_DOC ELSE 0.0 END AS HABER, cod_aux, cod_comp, Nro_comp, fe_año, fe_m"& _ 
                "es, status_ext, status_conc,                        fe_mes_conc FROM         I_B"& _ 
                "anco WHERE   (COD_BANCO=@COD_BANCO AND FE_MES=@FE_MES  AND  FE_AÑO=@FE_AÑO) AND "& _ 
                "ISNULL(STATUS_EXT,'0')='0'  order by  fecha_mp "
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_BANCO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_BANCO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_MES", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, "FE_MES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FE_AÑO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_LIBRO.I_BANCODataTable, ByVal COD_BANCO As String, ByVal FE_MES As String, ByVal FE_AÑO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_BANCO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_BANCO")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COD_BANCO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_MES,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_AÑO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal COD_BANCO As String, ByVal FE_MES As String, ByVal FE_AÑO As String) As DT_LIBRO.I_BANCODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_BANCO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_BANCO")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COD_BANCO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_MES,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_AÑO,String)
            End If
            Dim dataTable As DT_LIBRO.I_BANCODataTable = New DT_LIBRO.I_BANCODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DT_LIBRO.I_BANCODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DT_LIBRO) As Integer
            Return Me.Adapter.Update(dataSet, "I_BANCO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_cod_mp As String, ByVal Original_nro_mp As String, ByVal Original_cod_banco As String, ByVal Original_fecha_mp As Date, ByVal Original_desc_ope As String, ByVal Original_cod_aux As String, ByVal Original_cod_comp As String, ByVal Original_Nro_comp As String, ByVal Original_fe_año As String, ByVal Original_fe_mes As String, ByVal Original_status_ext As String, ByVal Original_status_conc As String, ByVal Original_fe_mes_conc As String) As Integer
            If (Original_cod_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_mp")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_cod_mp,String)
            End If
            If (Original_nro_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nro_mp")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nro_mp,String)
            End If
            If (Original_cod_banco Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_banco")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_cod_banco,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_fecha_mp,Date)
            If (Original_desc_ope Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_ope")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_desc_ope,String)
            End If
            If (Original_cod_aux Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_aux")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_cod_aux,String)
            End If
            If (Original_cod_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_comp")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_cod_comp,String)
            End If
            If (Original_Nro_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Nro_comp")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Nro_comp,String)
            End If
            If (Original_fe_año Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_fe_año")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_fe_año,String)
            End If
            If (Original_fe_mes Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_fe_mes")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_fe_mes,String)
            End If
            If (Original_status_ext Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status_ext")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_status_ext,String)
            End If
            If (Original_status_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status_conc")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_status_conc,String)
            End If
            If (Original_fe_mes_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_fe_mes_conc")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_fe_mes_conc,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal cod_mp As String,  _
                    ByVal nro_mp As String,  _
                    ByVal cod_banco As String,  _
                    ByVal fecha_mp As Date,  _
                    ByVal desc_ope As String,  _
                    ByVal cod_aux As String,  _
                    ByVal cod_comp As String,  _
                    ByVal Nro_comp As String,  _
                    ByVal fe_año As String,  _
                    ByVal fe_mes As String,  _
                    ByVal status_ext As String,  _
                    ByVal status_conc As String,  _
                    ByVal fe_mes_conc As String,  _
                    ByVal COD_BANCO1 As String,  _
                    ByVal COD_MP1 As String,  _
                    ByVal NRO_MP1 As String) As Integer
            If (cod_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_mp")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(cod_mp,String)
            End If
            If (nro_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nro_mp")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nro_mp,String)
            End If
            If (cod_banco Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_banco")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(cod_banco,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(fecha_mp,Date)
            If (desc_ope Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_ope")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(desc_ope,String)
            End If
            If (cod_aux Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_aux")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(cod_aux,String)
            End If
            If (cod_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_comp")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(cod_comp,String)
            End If
            If (Nro_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nro_comp")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Nro_comp,String)
            End If
            If (fe_año Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fe_año")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(fe_año,String)
            End If
            If (fe_mes Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fe_mes")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(fe_mes,String)
            End If
            If (status_ext Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status_ext")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(status_ext,String)
            End If
            If (status_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status_conc")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(status_conc,String)
            End If
            If (fe_mes_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fe_mes_conc")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(fe_mes_conc,String)
            End If
            If (COD_BANCO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_BANCO1")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(COD_BANCO1,String)
            End If
            If (COD_MP1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_MP1")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(COD_MP1,String)
            End If
            If (NRO_MP1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NRO_MP1")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(NRO_MP1,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal cod_mp As String,  _
                    ByVal nro_mp As String,  _
                    ByVal cod_banco As String,  _
                    ByVal fecha_mp As Date,  _
                    ByVal desc_ope As String,  _
                    ByVal cod_aux As String,  _
                    ByVal cod_comp As String,  _
                    ByVal Nro_comp As String,  _
                    ByVal fe_año As String,  _
                    ByVal fe_mes As String,  _
                    ByVal status_ext As String,  _
                    ByVal status_conc As String,  _
                    ByVal fe_mes_conc As String,  _
                    ByVal Original_cod_mp As String,  _
                    ByVal Original_nro_mp As String,  _
                    ByVal Original_cod_banco As String,  _
                    ByVal Original_fecha_mp As Date,  _
                    ByVal Original_desc_ope As String,  _
                    ByVal Original_cod_aux As String,  _
                    ByVal Original_cod_comp As String,  _
                    ByVal Original_Nro_comp As String,  _
                    ByVal Original_fe_año As String,  _
                    ByVal Original_fe_mes As String,  _
                    ByVal Original_status_ext As String,  _
                    ByVal Original_status_conc As String,  _
                    ByVal Original_fe_mes_conc As String,  _
                    ByVal COD_BANCO1 As String,  _
                    ByVal COD_MP1 As String,  _
                    ByVal NRO_MP1 As String) As Integer
            If (cod_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_mp")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(cod_mp,String)
            End If
            If (nro_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nro_mp")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nro_mp,String)
            End If
            If (cod_banco Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_banco")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(cod_banco,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(fecha_mp,Date)
            If (desc_ope Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_ope")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(desc_ope,String)
            End If
            If (cod_aux Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_aux")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(cod_aux,String)
            End If
            If (cod_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_comp")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(cod_comp,String)
            End If
            If (Nro_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nro_comp")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Nro_comp,String)
            End If
            If (fe_año Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fe_año")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(fe_año,String)
            End If
            If (fe_mes Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fe_mes")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(fe_mes,String)
            End If
            If (status_ext Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status_ext")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(status_ext,String)
            End If
            If (status_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status_conc")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(status_conc,String)
            End If
            If (fe_mes_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fe_mes_conc")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(fe_mes_conc,String)
            End If
            If (Original_cod_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_mp")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_cod_mp,String)
            End If
            If (Original_nro_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nro_mp")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_nro_mp,String)
            End If
            If (Original_cod_banco Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_banco")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_cod_banco,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_fecha_mp,Date)
            If (Original_desc_ope Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_ope")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_desc_ope,String)
            End If
            If (Original_cod_aux Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_aux")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_cod_aux,String)
            End If
            If (Original_cod_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_comp")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_cod_comp,String)
            End If
            If (Original_Nro_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Nro_comp")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Nro_comp,String)
            End If
            If (Original_fe_año Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_fe_año")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_fe_año,String)
            End If
            If (Original_fe_mes Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_fe_mes")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_fe_mes,String)
            End If
            If (Original_status_ext Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status_ext")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_status_ext,String)
            End If
            If (Original_status_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status_conc")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_status_conc,String)
            End If
            If (Original_fe_mes_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_fe_mes_conc")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_fe_mes_conc,String)
            End If
            If (COD_BANCO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_BANCO1")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(COD_BANCO1,String)
            End If
            If (COD_MP1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_MP1")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(COD_MP1,String)
            End If
            If (NRO_MP1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NRO_MP1")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(NRO_MP1,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal fecha_mp As Date,  _
                    ByVal desc_ope As String,  _
                    ByVal cod_aux As String,  _
                    ByVal cod_comp As String,  _
                    ByVal Nro_comp As String,  _
                    ByVal fe_año As String,  _
                    ByVal fe_mes As String,  _
                    ByVal status_ext As String,  _
                    ByVal status_conc As String,  _
                    ByVal fe_mes_conc As String,  _
                    ByVal Original_cod_mp As String,  _
                    ByVal Original_nro_mp As String,  _
                    ByVal Original_cod_banco As String,  _
                    ByVal Original_fecha_mp As Date,  _
                    ByVal Original_desc_ope As String,  _
                    ByVal Original_cod_aux As String,  _
                    ByVal Original_cod_comp As String,  _
                    ByVal Original_Nro_comp As String,  _
                    ByVal Original_fe_año As String,  _
                    ByVal Original_fe_mes As String,  _
                    ByVal Original_status_ext As String,  _
                    ByVal Original_status_conc As String,  _
                    ByVal Original_fe_mes_conc As String,  _
                    ByVal COD_BANCO As String,  _
                    ByVal COD_MP As String,  _
                    ByVal NRO_MP As String) As Integer
            Return Me.Update(Original_cod_mp, Original_nro_mp, Original_cod_banco, fecha_mp, desc_ope, cod_aux, cod_comp, Nro_comp, fe_año, fe_mes, status_ext, status_conc, fe_mes_conc, Original_cod_mp, Original_nro_mp, Original_cod_banco, Original_fecha_mp, Original_desc_ope, Original_cod_aux, Original_cod_comp, Original_Nro_comp, Original_fe_año, Original_fe_mes, Original_status_ext, Original_status_conc, Original_fe_mes_conc, COD_BANCO, COD_MP, NRO_MP)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class I_BANCO1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "I_BANCO1"
            tableMapping.ColumnMappings.Add("cod_mp", "cod_mp")
            tableMapping.ColumnMappings.Add("nro_mp", "nro_mp")
            tableMapping.ColumnMappings.Add("cod_banco", "cod_banco")
            tableMapping.ColumnMappings.Add("fecha_mp", "fecha_mp")
            tableMapping.ColumnMappings.Add("desc_ope", "desc_ope")
            tableMapping.ColumnMappings.Add("DEBE", "DEBE")
            tableMapping.ColumnMappings.Add("HABER", "HABER")
            tableMapping.ColumnMappings.Add("cod_aux", "cod_aux")
            tableMapping.ColumnMappings.Add("cod_comp", "cod_comp")
            tableMapping.ColumnMappings.Add("Nro_comp", "Nro_comp")
            tableMapping.ColumnMappings.Add("fe_año", "fe_año")
            tableMapping.ColumnMappings.Add("fe_mes", "fe_mes")
            tableMapping.ColumnMappings.Add("status_ext", "status_ext")
            tableMapping.ColumnMappings.Add("status_conc", "status_conc")
            tableMapping.ColumnMappings.Add("fe_mes_conc", "fe_mes_conc")
            tableMapping.ColumnMappings.Add("MONEDA_EXTRANJERA", "MONEDA_EXTRANJERA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [I_Banco] WHERE (([cod_mp] = @Original_cod_mp) AND ([nro_mp] = @Origi"& _ 
                "nal_nro_mp) AND ([cod_banco] = @Original_cod_banco) AND ((@IsNull_fecha_mp = 1 A"& _ 
                "ND [fecha_mp] IS NULL) OR ([fecha_mp] = @Original_fecha_mp)) AND ((@IsNull_desc_"& _ 
                "ope = 1 AND [desc_ope] IS NULL) OR ([desc_ope] = @Original_desc_ope)) AND ((@IsN"& _ 
                "ull_cod_aux = 1 AND [cod_aux] IS NULL) OR ([cod_aux] = @Original_cod_aux)) AND ("& _ 
                "(@IsNull_cod_comp = 1 AND [cod_comp] IS NULL) OR ([cod_comp] = @Original_cod_com"& _ 
                "p)) AND ((@IsNull_Nro_comp = 1 AND [Nro_comp] IS NULL) OR ([Nro_comp] = @Origina"& _ 
                "l_Nro_comp)) AND ((@IsNull_fe_año = 1 AND [fe_año] IS NULL) OR ([fe_año] = @Orig"& _ 
                "inal_fe_año)) AND ((@IsNull_fe_mes = 1 AND [fe_mes] IS NULL) OR ([fe_mes] = @Ori"& _ 
                "ginal_fe_mes)) AND ((@IsNull_status_ext = 1 AND [status_ext] IS NULL) OR ([statu"& _ 
                "s_ext] = @Original_status_ext)) AND ((@IsNull_status_conc = 1 AND [status_conc] "& _ 
                "IS NULL) OR ([status_conc] = @Original_status_conc)) AND ((@IsNull_fe_mes_conc ="& _ 
                " 1 AND [fe_mes_conc] IS NULL) OR ([fe_mes_conc] = @Original_fe_mes_conc)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_mp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_mp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nro_mp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nro_mp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_banco", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_banco", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fecha_mp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fecha_mp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fecha_mp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fecha_mp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_desc_ope", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_ope", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_ope", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_ope", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_cod_aux", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_aux", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_aux", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_aux", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_cod_comp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_comp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_comp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_comp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nro_comp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nro_comp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nro_comp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nro_comp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fe_año", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_año", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fe_año", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_año", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fe_mes", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fe_mes", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_status_ext", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_ext", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status_ext", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_ext", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_status_conc", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_conc", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_conc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fe_mes_conc", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes_conc", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fe_mes_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes_conc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [I_Banco] ([cod_mp], [nro_mp], [cod_banco], [fecha_mp], [desc_ope], ["& _ 
                "cod_aux], [cod_comp], [Nro_comp], [fe_año], [fe_mes], [status_ext], [status_conc"& _ 
                "], [fe_mes_conc]) VALUES (@cod_mp, @nro_mp, @cod_banco, @fecha_mp, @desc_ope, @c"& _ 
                "od_aux, @cod_comp, @Nro_comp, @fe_año, @fe_mes, @status_ext, @status_conc, @fe_m"& _ 
                "es_conc);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COD_MP, NRO_MP, COD_BANCO, FECHA_MP, DESC_OPE, CASE WHEN COD_D"& _ 
                "_H = 'D' THEN IMP_DOC * tipo_cambio ELSE 0.0 END AS DEBE, CASE WHEN COD_D_H = 'H"& _ 
                "' THEN IMP_DOC * tipo_cambio ELSE 0.0 END AS HABER, COD_AUX, COD_COMP, NRO_COMP,"& _ 
                " fe_año, FE_MES, STATUS_EXT, STATUS_CONC, FE_MES_CONC, CASE WHEN COD_D_H = 'D' T"& _ 
                "HEN IMP_DOC ELSE IMP_DOC * - 1 END AS MONEDA_EXTRANJERA FROM I_BANCO WHERE (COD_"& _ 
                "BANCO = @COD_BANCO) AND (COD_MP = @COD_MP) AND (NRO_MP = @NRO_MP) ORDER BY FECHA"& _ 
                "_MP"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_mp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_mp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nro_mp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nro_mp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_banco", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_banco", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fecha_mp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fecha_mp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_ope", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_ope", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_aux", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_aux", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_comp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_comp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nro_comp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nro_comp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fe_año", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_año", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fe_mes", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status_ext", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_ext", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_conc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fe_mes_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes_conc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_BANCO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_BANCO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_MP", Global.System.Data.SqlDbType.[Char], 3, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_MP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NRO_MP", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "NRO_MP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [I_Banco] SET [cod_mp] = @cod_mp, [nro_mp] = @nro_mp, [cod_banco] = @cod_b"& _ 
                "anco, [fecha_mp] = @fecha_mp, [desc_ope] = @desc_ope, [cod_aux] = @cod_aux, [cod"& _ 
                "_comp] = @cod_comp, [Nro_comp] = @Nro_comp, [fe_año] = @fe_año, [fe_mes] = @fe_m"& _ 
                "es, [status_ext] = @status_ext, [status_conc] = @status_conc, [fe_mes_conc] = @f"& _ 
                "e_mes_conc WHERE (([cod_mp] = @Original_cod_mp) AND ([nro_mp] = @Original_nro_mp"& _ 
                ") AND ([cod_banco] = @Original_cod_banco) AND ((@IsNull_fecha_mp = 1 AND [fecha_"& _ 
                "mp] IS NULL) OR ([fecha_mp] = @Original_fecha_mp)) AND ((@IsNull_desc_ope = 1 AN"& _ 
                "D [desc_ope] IS NULL) OR ([desc_ope] = @Original_desc_ope)) AND ((@IsNull_cod_au"& _ 
                "x = 1 AND [cod_aux] IS NULL) OR ([cod_aux] = @Original_cod_aux)) AND ((@IsNull_c"& _ 
                "od_comp = 1 AND [cod_comp] IS NULL) OR ([cod_comp] = @Original_cod_comp)) AND (("& _ 
                "@IsNull_Nro_comp = 1 AND [Nro_comp] IS NULL) OR ([Nro_comp] = @Original_Nro_comp"& _ 
                ")) AND ((@IsNull_fe_año = 1 AND [fe_año] IS NULL) OR ([fe_año] = @Original_fe_añ"& _ 
                "o)) AND ((@IsNull_fe_mes = 1 AND [fe_mes] IS NULL) OR ([fe_mes] = @Original_fe_m"& _ 
                "es)) AND ((@IsNull_status_ext = 1 AND [status_ext] IS NULL) OR ([status_ext] = @"& _ 
                "Original_status_ext)) AND ((@IsNull_status_conc = 1 AND [status_conc] IS NULL) O"& _ 
                "R ([status_conc] = @Original_status_conc)) AND ((@IsNull_fe_mes_conc = 1 AND [fe"& _ 
                "_mes_conc] IS NULL) OR ([fe_mes_conc] = @Original_fe_mes_conc)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COD_MP"& _ 
                ", NRO_MP, COD_BANCO, FECHA_MP, DESC_OPE, CASE WHEN COD_D_H = 'D' THEN IMP_DOC * "& _ 
                "tipo_cambio ELSE 0.0 END AS DEBE, CASE WHEN COD_D_H = 'H' THEN IMP_DOC * tipo_ca"& _ 
                "mbio ELSE 0.0 END AS HABER, COD_AUX, COD_COMP, NRO_COMP, fe_año, FE_MES, STATUS_"& _ 
                "EXT, STATUS_CONC, FE_MES_CONC, CASE WHEN COD_D_H = 'D' THEN IMP_DOC ELSE IMP_DOC"& _ 
                " * - 1 END AS MONEDA_EXTRANJERA FROM I_BANCO WHERE (COD_BANCO = @COD_BANCO) AND "& _ 
                "(COD_MP = @COD_MP) AND (NRO_MP = @NRO_MP) ORDER BY FECHA_MP"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_mp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_mp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nro_mp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nro_mp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_banco", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_banco", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fecha_mp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fecha_mp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_ope", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_ope", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_aux", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_aux", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cod_comp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_comp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nro_comp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nro_comp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fe_año", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_año", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fe_mes", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status_ext", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_ext", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_conc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fe_mes_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes_conc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_mp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_mp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_nro_mp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nro_mp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_banco", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_banco", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fecha_mp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fecha_mp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fecha_mp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fecha_mp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_desc_ope", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_ope", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_ope", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_ope", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_cod_aux", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_aux", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_aux", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_aux", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_cod_comp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_comp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cod_comp", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cod_comp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nro_comp", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nro_comp", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nro_comp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nro_comp", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fe_año", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_año", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fe_año", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_año", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fe_mes", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fe_mes", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_status_ext", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_ext", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status_ext", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_ext", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_status_conc", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_conc", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status_conc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fe_mes_conc", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes_conc", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fe_mes_conc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fe_mes_conc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_BANCO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_BANCO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_MP", Global.System.Data.SqlDbType.[Char], 3, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_MP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NRO_MP", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "NRO_MP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COD_MP, NRO_MP, COD_BANCO, FECHA_MP, DESC_OPE, CASE WHEN COD_D_H = 'D' THE"& _ 
                "N IMP_DOC * tipo_cambio ELSE 0.0 END AS DEBE, CASE WHEN COD_D_H = 'H' THEN IMP_D"& _ 
                "OC * tipo_cambio ELSE 0.0 END AS HABER, COD_AUX, COD_COMP, NRO_COMP, fe_año, FE_"& _ 
                "MES, STATUS_EXT, STATUS_CONC, FE_MES_CONC, CASE WHEN COD_D_H = 'D' THEN IMP_DOC "& _ 
                "ELSE IMP_DOC * - 1 END AS MONEDA_EXTRANJERA FROM I_BANCO WHERE (COD_BANCO = @COD"& _ 
                "_BANCO) AND (FE_MES = @FE_MES) AND (FE_AÑO = @FE_AÑO) AND (ISNULL(STATUS_EXT, '0"& _ 
                "') = '0') ORDER BY FECHA_MP"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_BANCO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COD_BANCO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_MES", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, "FE_MES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FE_AÑO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_LIBRO.I_BANCO1DataTable, ByVal COD_BANCO As String, ByVal FE_MES As String, ByVal FE_AÑO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_BANCO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_BANCO")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COD_BANCO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_MES,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_AÑO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal COD_BANCO As String, ByVal FE_MES As String, ByVal FE_AÑO As String) As DT_LIBRO.I_BANCO1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_BANCO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_BANCO")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COD_BANCO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_MES,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_AÑO,String)
            End If
            Dim dataTable As DT_LIBRO.I_BANCO1DataTable = New DT_LIBRO.I_BANCO1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DT_LIBRO.I_BANCO1DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DT_LIBRO) As Integer
            Return Me.Adapter.Update(dataSet, "I_BANCO1")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_cod_mp As String, ByVal Original_nro_mp As String, ByVal Original_cod_banco As String, ByVal Original_fecha_mp As Date, ByVal Original_desc_ope As String, ByVal Original_cod_aux As String, ByVal Original_cod_comp As String, ByVal Original_Nro_comp As String, ByVal Original_fe_año As String, ByVal Original_fe_mes As String, ByVal Original_status_ext As String, ByVal Original_status_conc As String, ByVal Original_fe_mes_conc As String) As Integer
            If (Original_cod_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_mp")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_cod_mp,String)
            End If
            If (Original_nro_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nro_mp")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nro_mp,String)
            End If
            If (Original_cod_banco Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_banco")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_cod_banco,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_fecha_mp,Date)
            If (Original_desc_ope Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_ope")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_desc_ope,String)
            End If
            If (Original_cod_aux Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_aux")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_cod_aux,String)
            End If
            If (Original_cod_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_comp")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_cod_comp,String)
            End If
            If (Original_Nro_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Nro_comp")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Nro_comp,String)
            End If
            If (Original_fe_año Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_fe_año")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_fe_año,String)
            End If
            If (Original_fe_mes Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_fe_mes")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_fe_mes,String)
            End If
            If (Original_status_ext Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status_ext")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_status_ext,String)
            End If
            If (Original_status_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status_conc")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_status_conc,String)
            End If
            If (Original_fe_mes_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_fe_mes_conc")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_fe_mes_conc,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal cod_mp As String,  _
                    ByVal nro_mp As String,  _
                    ByVal cod_banco As String,  _
                    ByVal fecha_mp As Date,  _
                    ByVal desc_ope As String,  _
                    ByVal cod_aux As String,  _
                    ByVal cod_comp As String,  _
                    ByVal Nro_comp As String,  _
                    ByVal fe_año As String,  _
                    ByVal fe_mes As String,  _
                    ByVal status_ext As String,  _
                    ByVal status_conc As String,  _
                    ByVal fe_mes_conc As String,  _
                    ByVal COD_BANCO1 As String,  _
                    ByVal COD_MP1 As String,  _
                    ByVal NRO_MP1 As String) As Integer
            If (cod_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_mp")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(cod_mp,String)
            End If
            If (nro_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nro_mp")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nro_mp,String)
            End If
            If (cod_banco Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_banco")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(cod_banco,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(fecha_mp,Date)
            If (desc_ope Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_ope")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(desc_ope,String)
            End If
            If (cod_aux Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_aux")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(cod_aux,String)
            End If
            If (cod_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_comp")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(cod_comp,String)
            End If
            If (Nro_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nro_comp")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Nro_comp,String)
            End If
            If (fe_año Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fe_año")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(fe_año,String)
            End If
            If (fe_mes Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fe_mes")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(fe_mes,String)
            End If
            If (status_ext Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status_ext")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(status_ext,String)
            End If
            If (status_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status_conc")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(status_conc,String)
            End If
            If (fe_mes_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fe_mes_conc")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(fe_mes_conc,String)
            End If
            If (COD_BANCO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_BANCO1")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(COD_BANCO1,String)
            End If
            If (COD_MP1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_MP1")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(COD_MP1,String)
            End If
            If (NRO_MP1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NRO_MP1")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(NRO_MP1,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal cod_mp As String,  _
                    ByVal nro_mp As String,  _
                    ByVal cod_banco As String,  _
                    ByVal fecha_mp As Date,  _
                    ByVal desc_ope As String,  _
                    ByVal cod_aux As String,  _
                    ByVal cod_comp As String,  _
                    ByVal Nro_comp As String,  _
                    ByVal fe_año As String,  _
                    ByVal fe_mes As String,  _
                    ByVal status_ext As String,  _
                    ByVal status_conc As String,  _
                    ByVal fe_mes_conc As String,  _
                    ByVal Original_cod_mp As String,  _
                    ByVal Original_nro_mp As String,  _
                    ByVal Original_cod_banco As String,  _
                    ByVal Original_fecha_mp As Date,  _
                    ByVal Original_desc_ope As String,  _
                    ByVal Original_cod_aux As String,  _
                    ByVal Original_cod_comp As String,  _
                    ByVal Original_Nro_comp As String,  _
                    ByVal Original_fe_año As String,  _
                    ByVal Original_fe_mes As String,  _
                    ByVal Original_status_ext As String,  _
                    ByVal Original_status_conc As String,  _
                    ByVal Original_fe_mes_conc As String,  _
                    ByVal COD_BANCO1 As String,  _
                    ByVal COD_MP1 As String,  _
                    ByVal NRO_MP1 As String) As Integer
            If (cod_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_mp")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(cod_mp,String)
            End If
            If (nro_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nro_mp")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nro_mp,String)
            End If
            If (cod_banco Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_banco")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(cod_banco,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(fecha_mp,Date)
            If (desc_ope Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_ope")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(desc_ope,String)
            End If
            If (cod_aux Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_aux")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(cod_aux,String)
            End If
            If (cod_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cod_comp")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(cod_comp,String)
            End If
            If (Nro_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Nro_comp")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Nro_comp,String)
            End If
            If (fe_año Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fe_año")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(fe_año,String)
            End If
            If (fe_mes Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fe_mes")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(fe_mes,String)
            End If
            If (status_ext Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status_ext")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(status_ext,String)
            End If
            If (status_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status_conc")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(status_conc,String)
            End If
            If (fe_mes_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fe_mes_conc")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(fe_mes_conc,String)
            End If
            If (Original_cod_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_mp")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_cod_mp,String)
            End If
            If (Original_nro_mp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nro_mp")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_nro_mp,String)
            End If
            If (Original_cod_banco Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_banco")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_cod_banco,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_fecha_mp,Date)
            If (Original_desc_ope Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_ope")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_desc_ope,String)
            End If
            If (Original_cod_aux Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_aux")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_cod_aux,String)
            End If
            If (Original_cod_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cod_comp")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_cod_comp,String)
            End If
            If (Original_Nro_comp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Nro_comp")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Nro_comp,String)
            End If
            If (Original_fe_año Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_fe_año")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_fe_año,String)
            End If
            If (Original_fe_mes Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_fe_mes")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_fe_mes,String)
            End If
            If (Original_status_ext Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status_ext")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_status_ext,String)
            End If
            If (Original_status_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status_conc")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_status_conc,String)
            End If
            If (Original_fe_mes_conc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_fe_mes_conc")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_fe_mes_conc,String)
            End If
            If (COD_BANCO1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_BANCO1")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(COD_BANCO1,String)
            End If
            If (COD_MP1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COD_MP1")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(COD_MP1,String)
            End If
            If (NRO_MP1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NRO_MP1")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(NRO_MP1,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal fecha_mp As Date,  _
                    ByVal desc_ope As String,  _
                    ByVal cod_aux As String,  _
                    ByVal cod_comp As String,  _
                    ByVal Nro_comp As String,  _
                    ByVal fe_año As String,  _
                    ByVal fe_mes As String,  _
                    ByVal status_ext As String,  _
                    ByVal status_conc As String,  _
                    ByVal fe_mes_conc As String,  _
                    ByVal Original_cod_mp As String,  _
                    ByVal Original_nro_mp As String,  _
                    ByVal Original_cod_banco As String,  _
                    ByVal Original_fecha_mp As Date,  _
                    ByVal Original_desc_ope As String,  _
                    ByVal Original_cod_aux As String,  _
                    ByVal Original_cod_comp As String,  _
                    ByVal Original_Nro_comp As String,  _
                    ByVal Original_fe_año As String,  _
                    ByVal Original_fe_mes As String,  _
                    ByVal Original_status_ext As String,  _
                    ByVal Original_status_conc As String,  _
                    ByVal Original_fe_mes_conc As String,  _
                    ByVal COD_BANCO As String,  _
                    ByVal COD_MP As String,  _
                    ByVal NRO_MP As String) As Integer
            Return Me.Update(Original_cod_mp, Original_nro_mp, Original_cod_banco, fecha_mp, desc_ope, cod_aux, cod_comp, Nro_comp, fe_año, fe_mes, status_ext, status_conc, fe_mes_conc, Original_cod_mp, Original_nro_mp, Original_cod_banco, Original_fecha_mp, Original_desc_ope, Original_cod_aux, Original_cod_comp, Original_Nro_comp, Original_fe_año, Original_fe_mes, Original_status_ext, Original_status_conc, Original_fe_mes_conc, COD_BANCO, COD_MP, NRO_MP)
        End Function
    End Class
End Namespace

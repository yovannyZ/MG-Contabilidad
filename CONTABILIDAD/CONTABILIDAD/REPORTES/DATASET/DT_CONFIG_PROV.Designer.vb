'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.7905
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DT_CONFIG_PROV"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DT_CONFIG_PROV
    Inherits Global.System.Data.DataSet
    
    Private tableCONFIG_PROV As CONFIG_PROVDataTable
    
    Private tableCONFIG_PROV1 As CONFIG_PROV1DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CONFIG_PROV")) Is Nothing) Then
                MyBase.Tables.Add(New CONFIG_PROVDataTable(ds.Tables("CONFIG_PROV")))
            End If
            If (Not (ds.Tables("CONFIG_PROV1")) Is Nothing) Then
                MyBase.Tables.Add(New CONFIG_PROV1DataTable(ds.Tables("CONFIG_PROV1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CONFIG_PROV() As CONFIG_PROVDataTable
        Get
            Return Me.tableCONFIG_PROV
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CONFIG_PROV1() As CONFIG_PROV1DataTable
        Get
            Return Me.tableCONFIG_PROV1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DT_CONFIG_PROV = CType(MyBase.Clone,DT_CONFIG_PROV)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("CONFIG_PROV")) Is Nothing) Then
                MyBase.Tables.Add(New CONFIG_PROVDataTable(ds.Tables("CONFIG_PROV")))
            End If
            If (Not (ds.Tables("CONFIG_PROV1")) Is Nothing) Then
                MyBase.Tables.Add(New CONFIG_PROV1DataTable(ds.Tables("CONFIG_PROV1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCONFIG_PROV = CType(MyBase.Tables("CONFIG_PROV"),CONFIG_PROVDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCONFIG_PROV) Is Nothing) Then
                Me.tableCONFIG_PROV.InitVars
            End If
        End If
        Me.tableCONFIG_PROV1 = CType(MyBase.Tables("CONFIG_PROV1"),CONFIG_PROV1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCONFIG_PROV1) Is Nothing) Then
                Me.tableCONFIG_PROV1.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DT_CONFIG_PROV"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DT_CONFIG_PROV.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCONFIG_PROV = New CONFIG_PROVDataTable
        MyBase.Tables.Add(Me.tableCONFIG_PROV)
        Me.tableCONFIG_PROV1 = New CONFIG_PROV1DataTable
        MyBase.Tables.Add(Me.tableCONFIG_PROV1)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCONFIG_PROV() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCONFIG_PROV1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DT_CONFIG_PROV = New DT_CONFIG_PROV
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub CONFIG_PROVRowChangeEventHandler(ByVal sender As Object, ByVal e As CONFIG_PROVRowChangeEvent)
    
    Public Delegate Sub CONFIG_PROV1RowChangeEventHandler(ByVal sender As Object, ByVal e As CONFIG_PROV1RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CONFIG_PROVDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_COM As Global.System.Data.DataColumn
        
        Private columnNRO_COM As Global.System.Data.DataColumn
        
        Private columnUNION As Global.System.Data.DataColumn
        
        Private columnFEC_DOC As Global.System.Data.DataColumn
        
        Private columnFEC_VEN As Global.System.Data.DataColumn
        
        Private columnNRO_DOC_PER As Global.System.Data.DataColumn
        
        Private columnDES_PROV As Global.System.Data.DataColumn
        
        Private columnCOD_REF As Global.System.Data.DataColumn
        
        Private columnNRO_REF As Global.System.Data.DataColumn
        
        Private columnTC As Global.System.Data.DataColumn
        
        Private columnCOD_PER As Global.System.Data.DataColumn
        
        Private columnCOD_DOC As Global.System.Data.DataColumn
        
        Private columnDESC_DOC As Global.System.Data.DataColumn
        
        Private columnMON As Global.System.Data.DataColumn
        
        Private columnSALDO1 As Global.System.Data.DataColumn
        
        Private columnSALDO2 As Global.System.Data.DataColumn
        
        Private columnSALDO3 As Global.System.Data.DataColumn
        
        Private columnSALDO4 As Global.System.Data.DataColumn
        
        Private columnSALDO5 As Global.System.Data.DataColumn
        
        Private columnSALDO6 As Global.System.Data.DataColumn
        
        Private columnSALDO7 As Global.System.Data.DataColumn
        
        Private columnSALDO8 As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnFECHA_REF As Global.System.Data.DataColumn
        
        Private columnTOTAL_ME As Global.System.Data.DataColumn
        
        Private columnTOTAL_HON As Global.System.Data.DataColumn
        
        Private columnCOD_TIP_DOC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CONFIG_PROV"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEC_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEC_VENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_VEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DES_PROVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDES_PROV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_MEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_ME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_HONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_HON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_TIP_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_TIP_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CONFIG_PROVRow
            Get
                Return CType(Me.Rows(index),CONFIG_PROVRow)
            End Get
        End Property
        
        Public Event CONFIG_PROVRowChanging As CONFIG_PROVRowChangeEventHandler
        
        Public Event CONFIG_PROVRowChanged As CONFIG_PROVRowChangeEventHandler
        
        Public Event CONFIG_PROVRowDeleting As CONFIG_PROVRowChangeEventHandler
        
        Public Event CONFIG_PROVRowDeleted As CONFIG_PROVRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCONFIG_PROVRow(ByVal row As CONFIG_PROVRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCONFIG_PROVRow( _
                    ByVal COD_COM As String,  _
                    ByVal NRO_COM As String,  _
                    ByVal UNION As String,  _
                    ByVal FEC_DOC As String,  _
                    ByVal FEC_VEN As String,  _
                    ByVal NRO_DOC_PER As String,  _
                    ByVal DES_PROV As String,  _
                    ByVal COD_REF As String,  _
                    ByVal NRO_REF As String,  _
                    ByVal TC As String,  _
                    ByVal COD_PER As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal DESC_DOC As String,  _
                    ByVal MON As String,  _
                    ByVal SALDO1 As Decimal,  _
                    ByVal SALDO2 As Decimal,  _
                    ByVal SALDO3 As Decimal,  _
                    ByVal SALDO4 As Decimal,  _
                    ByVal SALDO5 As Decimal,  _
                    ByVal SALDO6 As Decimal,  _
                    ByVal SALDO7 As Decimal,  _
                    ByVal SALDO8 As Decimal,  _
                    ByVal SERIE As String,  _
                    ByVal FECHA_REF As String,  _
                    ByVal TOTAL_ME As Decimal,  _
                    ByVal TOTAL_HON As Decimal,  _
                    ByVal COD_TIP_DOC As String) As CONFIG_PROVRow
            Dim rowCONFIG_PROVRow As CONFIG_PROVRow = CType(Me.NewRow,CONFIG_PROVRow)
            Dim columnValuesArray() As Object = New Object() {COD_COM, NRO_COM, UNION, FEC_DOC, FEC_VEN, NRO_DOC_PER, DES_PROV, COD_REF, NRO_REF, TC, COD_PER, COD_DOC, DESC_DOC, MON, SALDO1, SALDO2, SALDO3, SALDO4, SALDO5, SALDO6, SALDO7, SALDO8, SERIE, FECHA_REF, TOTAL_ME, TOTAL_HON, COD_TIP_DOC}
            rowCONFIG_PROVRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCONFIG_PROVRow)
            Return rowCONFIG_PROVRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CONFIG_PROVDataTable = CType(MyBase.Clone,CONFIG_PROVDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CONFIG_PROVDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_COM = MyBase.Columns("COD_COM")
            Me.columnNRO_COM = MyBase.Columns("NRO_COM")
            Me.columnUNION = MyBase.Columns("UNION")
            Me.columnFEC_DOC = MyBase.Columns("FEC_DOC")
            Me.columnFEC_VEN = MyBase.Columns("FEC_VEN")
            Me.columnNRO_DOC_PER = MyBase.Columns("NRO_DOC_PER")
            Me.columnDES_PROV = MyBase.Columns("DES_PROV")
            Me.columnCOD_REF = MyBase.Columns("COD_REF")
            Me.columnNRO_REF = MyBase.Columns("NRO_REF")
            Me.columnTC = MyBase.Columns("TC")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnDESC_DOC = MyBase.Columns("DESC_DOC")
            Me.columnMON = MyBase.Columns("MON")
            Me.columnSALDO1 = MyBase.Columns("SALDO1")
            Me.columnSALDO2 = MyBase.Columns("SALDO2")
            Me.columnSALDO3 = MyBase.Columns("SALDO3")
            Me.columnSALDO4 = MyBase.Columns("SALDO4")
            Me.columnSALDO5 = MyBase.Columns("SALDO5")
            Me.columnSALDO6 = MyBase.Columns("SALDO6")
            Me.columnSALDO7 = MyBase.Columns("SALDO7")
            Me.columnSALDO8 = MyBase.Columns("SALDO8")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnFECHA_REF = MyBase.Columns("FECHA_REF")
            Me.columnTOTAL_ME = MyBase.Columns("TOTAL ME")
            Me.columnTOTAL_HON = MyBase.Columns("TOTAL_HON")
            Me.columnCOD_TIP_DOC = MyBase.Columns("COD_TIP_DOC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_COM = New Global.System.Data.DataColumn("COD_COM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COM)
            Me.columnNRO_COM = New Global.System.Data.DataColumn("NRO_COM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COM)
            Me.columnUNION = New Global.System.Data.DataColumn("UNION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNION)
            Me.columnFEC_DOC = New Global.System.Data.DataColumn("FEC_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_DOC)
            Me.columnFEC_VEN = New Global.System.Data.DataColumn("FEC_VEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_VEN)
            Me.columnNRO_DOC_PER = New Global.System.Data.DataColumn("NRO_DOC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC_PER)
            Me.columnDES_PROV = New Global.System.Data.DataColumn("DES_PROV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDES_PROV)
            Me.columnCOD_REF = New Global.System.Data.DataColumn("COD_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_REF)
            Me.columnNRO_REF = New Global.System.Data.DataColumn("NRO_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_REF)
            Me.columnTC = New Global.System.Data.DataColumn("TC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTC)
            Me.columnCOD_PER = New Global.System.Data.DataColumn("COD_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnCOD_DOC = New Global.System.Data.DataColumn("COD_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnDESC_DOC = New Global.System.Data.DataColumn("DESC_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_DOC)
            Me.columnMON = New Global.System.Data.DataColumn("MON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMON)
            Me.columnSALDO1 = New Global.System.Data.DataColumn("SALDO1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO1)
            Me.columnSALDO2 = New Global.System.Data.DataColumn("SALDO2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO2)
            Me.columnSALDO3 = New Global.System.Data.DataColumn("SALDO3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO3)
            Me.columnSALDO4 = New Global.System.Data.DataColumn("SALDO4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO4)
            Me.columnSALDO5 = New Global.System.Data.DataColumn("SALDO5", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO5)
            Me.columnSALDO6 = New Global.System.Data.DataColumn("SALDO6", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO6)
            Me.columnSALDO7 = New Global.System.Data.DataColumn("SALDO7", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO7)
            Me.columnSALDO8 = New Global.System.Data.DataColumn("SALDO8", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO8)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnFECHA_REF = New Global.System.Data.DataColumn("FECHA_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_REF)
            Me.columnTOTAL_ME = New Global.System.Data.DataColumn("TOTAL ME", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_ME)
            Me.columnTOTAL_HON = New Global.System.Data.DataColumn("TOTAL_HON", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_HON)
            Me.columnCOD_TIP_DOC = New Global.System.Data.DataColumn("COD_TIP_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_TIP_DOC)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCONFIG_PROVRow() As CONFIG_PROVRow
            Return CType(Me.NewRow,CONFIG_PROVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CONFIG_PROVRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CONFIG_PROVRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CONFIG_PROVRowChangedEvent) Is Nothing) Then
                RaiseEvent CONFIG_PROVRowChanged(Me, New CONFIG_PROVRowChangeEvent(CType(e.Row,CONFIG_PROVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CONFIG_PROVRowChangingEvent) Is Nothing) Then
                RaiseEvent CONFIG_PROVRowChanging(Me, New CONFIG_PROVRowChangeEvent(CType(e.Row,CONFIG_PROVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CONFIG_PROVRowDeletedEvent) Is Nothing) Then
                RaiseEvent CONFIG_PROVRowDeleted(Me, New CONFIG_PROVRowChangeEvent(CType(e.Row,CONFIG_PROVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CONFIG_PROVRowDeletingEvent) Is Nothing) Then
                RaiseEvent CONFIG_PROVRowDeleting(Me, New CONFIG_PROVRowChangeEvent(CType(e.Row,CONFIG_PROVRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCONFIG_PROVRow(ByVal row As CONFIG_PROVRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_CONFIG_PROV = New DT_CONFIG_PROV
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CONFIG_PROVDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CONFIG_PROV1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_COM As Global.System.Data.DataColumn
        
        Private columnNRO_COM As Global.System.Data.DataColumn
        
        Private columnUNION As Global.System.Data.DataColumn
        
        Private columnFEC_DOC As Global.System.Data.DataColumn
        
        Private columnFEC_VEN As Global.System.Data.DataColumn
        
        Private columnNRO_DOC_PER As Global.System.Data.DataColumn
        
        Private columnDES_PROV As Global.System.Data.DataColumn
        
        Private columnCOD_PER As Global.System.Data.DataColumn
        
        Private columnCOD_DOC As Global.System.Data.DataColumn
        
        Private columnDESC_DOC As Global.System.Data.DataColumn
        
        Private columnMON As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnTOTAL As Global.System.Data.DataColumn
        
        Private columnPROV As Global.System.Data.DataColumn
        
        Private columnFALTANTE As Global.System.Data.DataColumn
        
        Private columnST_GASTO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CONFIG_PROV1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEC_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEC_VENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEC_VEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DES_PROVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDES_PROV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FALTANTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFALTANTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ST_GASTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnST_GASTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CONFIG_PROV1Row
            Get
                Return CType(Me.Rows(index),CONFIG_PROV1Row)
            End Get
        End Property
        
        Public Event CONFIG_PROV1RowChanging As CONFIG_PROV1RowChangeEventHandler
        
        Public Event CONFIG_PROV1RowChanged As CONFIG_PROV1RowChangeEventHandler
        
        Public Event CONFIG_PROV1RowDeleting As CONFIG_PROV1RowChangeEventHandler
        
        Public Event CONFIG_PROV1RowDeleted As CONFIG_PROV1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCONFIG_PROV1Row(ByVal row As CONFIG_PROV1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCONFIG_PROV1Row( _
                    ByVal COD_COM As String,  _
                    ByVal NRO_COM As String,  _
                    ByVal UNION As String,  _
                    ByVal FEC_DOC As String,  _
                    ByVal FEC_VEN As String,  _
                    ByVal NRO_DOC_PER As String,  _
                    ByVal DES_PROV As String,  _
                    ByVal COD_PER As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal DESC_DOC As String,  _
                    ByVal MON As String,  _
                    ByVal SERIE As String,  _
                    ByVal TOTAL As Decimal,  _
                    ByVal PROV As String,  _
                    ByVal FALTANTE As String,  _
                    ByVal ST_GASTO As String) As CONFIG_PROV1Row
            Dim rowCONFIG_PROV1Row As CONFIG_PROV1Row = CType(Me.NewRow,CONFIG_PROV1Row)
            Dim columnValuesArray() As Object = New Object() {COD_COM, NRO_COM, UNION, FEC_DOC, FEC_VEN, NRO_DOC_PER, DES_PROV, COD_PER, COD_DOC, DESC_DOC, MON, SERIE, TOTAL, PROV, FALTANTE, ST_GASTO}
            rowCONFIG_PROV1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCONFIG_PROV1Row)
            Return rowCONFIG_PROV1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CONFIG_PROV1DataTable = CType(MyBase.Clone,CONFIG_PROV1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CONFIG_PROV1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_COM = MyBase.Columns("COD_COM")
            Me.columnNRO_COM = MyBase.Columns("NRO_COM")
            Me.columnUNION = MyBase.Columns("UNION")
            Me.columnFEC_DOC = MyBase.Columns("FEC_DOC")
            Me.columnFEC_VEN = MyBase.Columns("FEC_VEN")
            Me.columnNRO_DOC_PER = MyBase.Columns("NRO_DOC_PER")
            Me.columnDES_PROV = MyBase.Columns("DES_PROV")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnDESC_DOC = MyBase.Columns("DESC_DOC")
            Me.columnMON = MyBase.Columns("MON")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnTOTAL = MyBase.Columns("TOTAL")
            Me.columnPROV = MyBase.Columns("PROV")
            Me.columnFALTANTE = MyBase.Columns("FALTANTE")
            Me.columnST_GASTO = MyBase.Columns("ST_GASTO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_COM = New Global.System.Data.DataColumn("COD_COM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COM)
            Me.columnNRO_COM = New Global.System.Data.DataColumn("NRO_COM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COM)
            Me.columnUNION = New Global.System.Data.DataColumn("UNION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNION)
            Me.columnFEC_DOC = New Global.System.Data.DataColumn("FEC_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_DOC)
            Me.columnFEC_VEN = New Global.System.Data.DataColumn("FEC_VEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEC_VEN)
            Me.columnNRO_DOC_PER = New Global.System.Data.DataColumn("NRO_DOC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC_PER)
            Me.columnDES_PROV = New Global.System.Data.DataColumn("DES_PROV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDES_PROV)
            Me.columnCOD_PER = New Global.System.Data.DataColumn("COD_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnCOD_DOC = New Global.System.Data.DataColumn("COD_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnDESC_DOC = New Global.System.Data.DataColumn("DESC_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_DOC)
            Me.columnMON = New Global.System.Data.DataColumn("MON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMON)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnTOTAL = New Global.System.Data.DataColumn("TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL)
            Me.columnPROV = New Global.System.Data.DataColumn("PROV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROV)
            Me.columnFALTANTE = New Global.System.Data.DataColumn("FALTANTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFALTANTE)
            Me.columnST_GASTO = New Global.System.Data.DataColumn("ST_GASTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST_GASTO)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCONFIG_PROV1Row() As CONFIG_PROV1Row
            Return CType(Me.NewRow,CONFIG_PROV1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CONFIG_PROV1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CONFIG_PROV1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CONFIG_PROV1RowChangedEvent) Is Nothing) Then
                RaiseEvent CONFIG_PROV1RowChanged(Me, New CONFIG_PROV1RowChangeEvent(CType(e.Row,CONFIG_PROV1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CONFIG_PROV1RowChangingEvent) Is Nothing) Then
                RaiseEvent CONFIG_PROV1RowChanging(Me, New CONFIG_PROV1RowChangeEvent(CType(e.Row,CONFIG_PROV1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CONFIG_PROV1RowDeletedEvent) Is Nothing) Then
                RaiseEvent CONFIG_PROV1RowDeleted(Me, New CONFIG_PROV1RowChangeEvent(CType(e.Row,CONFIG_PROV1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CONFIG_PROV1RowDeletingEvent) Is Nothing) Then
                RaiseEvent CONFIG_PROV1RowDeleting(Me, New CONFIG_PROV1RowChangeEvent(CType(e.Row,CONFIG_PROV1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCONFIG_PROV1Row(ByVal row As CONFIG_PROV1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_CONFIG_PROV = New DT_CONFIG_PROV
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CONFIG_PROV1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CONFIG_PROVRow
        Inherits Global.System.Data.DataRow
        
        Private tableCONFIG_PROV As CONFIG_PROVDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCONFIG_PROV = CType(Me.Table,CONFIG_PROVDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COM() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.COD_COMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_COM' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.COD_COMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COM() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.NRO_COMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_COM' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.NRO_COMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNION() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.UNIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNION' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.UNIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEC_DOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.FEC_DOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEC_DOC' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.FEC_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEC_VEN() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.FEC_VENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEC_VEN' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.FEC_VENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.NRO_DOC_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_DOC_PER' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.NRO_DOC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DES_PROV() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.DES_PROVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DES_PROV' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.DES_PROVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.COD_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_REF' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.COD_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.NRO_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_REF' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.NRO_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.TCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TC' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.TCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.COD_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_PER' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.COD_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.COD_DOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_DOC' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.COD_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_DOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.DESC_DOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_DOC' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.DESC_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MON() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.MONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MON' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.MONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.SALDO1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO1' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.SALDO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.SALDO2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO2' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.SALDO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.SALDO3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO3' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.SALDO3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.SALDO4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO4' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.SALDO4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO5() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.SALDO5Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO5' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.SALDO5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO6() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.SALDO6Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO6' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.SALDO6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO7() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.SALDO7Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO7' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.SALDO7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO8() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.SALDO8Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO8' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.SALDO8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SERIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.SERIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SERIE' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.FECHA_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_REF' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.FECHA_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_ME() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.TOTAL_MEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TOTAL ME' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.TOTAL_MEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_HON() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.TOTAL_HONColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TOTAL_HON' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.TOTAL_HONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_TIP_DOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV.COD_TIP_DOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_TIP_DOC' de la tabla 'CONFIG_PROV' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV.COD_TIP_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_COMNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.COD_COMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_COMNull()
            Me(Me.tableCONFIG_PROV.COD_COMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.NRO_COMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMNull()
            Me(Me.tableCONFIG_PROV.NRO_COMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIONNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.UNIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIONNull()
            Me(Me.tableCONFIG_PROV.UNIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEC_DOCNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.FEC_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEC_DOCNull()
            Me(Me.tableCONFIG_PROV.FEC_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEC_VENNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.FEC_VENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEC_VENNull()
            Me(Me.tableCONFIG_PROV.FEC_VENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_DOC_PERNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.NRO_DOC_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_DOC_PERNull()
            Me(Me.tableCONFIG_PROV.NRO_DOC_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDES_PROVNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.DES_PROVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDES_PROVNull()
            Me(Me.tableCONFIG_PROV.DES_PROVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_REFNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.COD_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_REFNull()
            Me(Me.tableCONFIG_PROV.COD_REFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_REFNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.NRO_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_REFNull()
            Me(Me.tableCONFIG_PROV.NRO_REFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.TCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCNull()
            Me(Me.tableCONFIG_PROV.TCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_PERNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.COD_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_PERNull()
            Me(Me.tableCONFIG_PROV.COD_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_DOCNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.COD_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_DOCNull()
            Me(Me.tableCONFIG_PROV.COD_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_DOCNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.DESC_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_DOCNull()
            Me(Me.tableCONFIG_PROV.DESC_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.MONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONNull()
            Me(Me.tableCONFIG_PROV.MONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO1Null() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.SALDO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO1Null()
            Me(Me.tableCONFIG_PROV.SALDO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO2Null() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.SALDO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO2Null()
            Me(Me.tableCONFIG_PROV.SALDO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO3Null() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.SALDO3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO3Null()
            Me(Me.tableCONFIG_PROV.SALDO3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO4Null() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.SALDO4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO4Null()
            Me(Me.tableCONFIG_PROV.SALDO4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO5Null() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.SALDO5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO5Null()
            Me(Me.tableCONFIG_PROV.SALDO5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO6Null() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.SALDO6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO6Null()
            Me(Me.tableCONFIG_PROV.SALDO6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO7Null() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.SALDO7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO7Null()
            Me(Me.tableCONFIG_PROV.SALDO7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO8Null() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.SALDO8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO8Null()
            Me(Me.tableCONFIG_PROV.SALDO8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSERIENull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.SERIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSERIENull()
            Me(Me.tableCONFIG_PROV.SERIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_REFNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.FECHA_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_REFNull()
            Me(Me.tableCONFIG_PROV.FECHA_REFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_MENull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.TOTAL_MEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_MENull()
            Me(Me.tableCONFIG_PROV.TOTAL_MEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_HONNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.TOTAL_HONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_HONNull()
            Me(Me.tableCONFIG_PROV.TOTAL_HONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_TIP_DOCNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV.COD_TIP_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_TIP_DOCNull()
            Me(Me.tableCONFIG_PROV.COD_TIP_DOCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CONFIG_PROV1Row
        Inherits Global.System.Data.DataRow
        
        Private tableCONFIG_PROV1 As CONFIG_PROV1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCONFIG_PROV1 = CType(Me.Table,CONFIG_PROV1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COM() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.COD_COMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_COM' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.COD_COMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COM() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.NRO_COMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_COM' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.NRO_COMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNION() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.UNIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UNION' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.UNIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEC_DOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.FEC_DOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEC_DOC' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.FEC_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEC_VEN() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.FEC_VENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FEC_VEN' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.FEC_VENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.NRO_DOC_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_DOC_PER' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.NRO_DOC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DES_PROV() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.DES_PROVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DES_PROV' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.DES_PROVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.COD_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_PER' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.COD_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.COD_DOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_DOC' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.COD_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_DOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.DESC_DOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_DOC' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.DESC_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MON() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.MONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MON' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.MONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SERIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.SERIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SERIE' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TOTAL' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROV() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.PROVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PROV' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.PROVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FALTANTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.FALTANTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FALTANTE' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.FALTANTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ST_GASTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONFIG_PROV1.ST_GASTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ST_GASTO' de la tabla 'CONFIG_PROV1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONFIG_PROV1.ST_GASTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_COMNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.COD_COMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_COMNull()
            Me(Me.tableCONFIG_PROV1.COD_COMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.NRO_COMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMNull()
            Me(Me.tableCONFIG_PROV1.NRO_COMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIONNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.UNIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIONNull()
            Me(Me.tableCONFIG_PROV1.UNIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEC_DOCNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.FEC_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEC_DOCNull()
            Me(Me.tableCONFIG_PROV1.FEC_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEC_VENNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.FEC_VENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEC_VENNull()
            Me(Me.tableCONFIG_PROV1.FEC_VENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_DOC_PERNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.NRO_DOC_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_DOC_PERNull()
            Me(Me.tableCONFIG_PROV1.NRO_DOC_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDES_PROVNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.DES_PROVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDES_PROVNull()
            Me(Me.tableCONFIG_PROV1.DES_PROVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_PERNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.COD_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_PERNull()
            Me(Me.tableCONFIG_PROV1.COD_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_DOCNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.COD_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_DOCNull()
            Me(Me.tableCONFIG_PROV1.COD_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_DOCNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.DESC_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_DOCNull()
            Me(Me.tableCONFIG_PROV1.DESC_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.MONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONNull()
            Me(Me.tableCONFIG_PROV1.MONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSERIENull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.SERIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSERIENull()
            Me(Me.tableCONFIG_PROV1.SERIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALNull()
            Me(Me.tableCONFIG_PROV1.TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROVNull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.PROVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROVNull()
            Me(Me.tableCONFIG_PROV1.PROVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFALTANTENull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.FALTANTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFALTANTENull()
            Me(Me.tableCONFIG_PROV1.FALTANTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsST_GASTONull() As Boolean
            Return Me.IsNull(Me.tableCONFIG_PROV1.ST_GASTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetST_GASTONull()
            Me(Me.tableCONFIG_PROV1.ST_GASTOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CONFIG_PROVRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CONFIG_PROVRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CONFIG_PROVRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CONFIG_PROVRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CONFIG_PROV1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CONFIG_PROV1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CONFIG_PROV1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CONFIG_PROV1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

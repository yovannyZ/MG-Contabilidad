'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.7905
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DT_CONC_PTE"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DT_CONC_PTE
    Inherits Global.System.Data.DataSet
    
    Private tableREPORTE_BANCO_CONC_PTE As REPORTE_BANCO_CONC_PTEDataTable
    
    Private tableREPORTE_BANCO_CONC_PTE2 As REPORTE_BANCO_CONC_PTE2DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("REPORTE_BANCO_CONC_PTE")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_BANCO_CONC_PTEDataTable(ds.Tables("REPORTE_BANCO_CONC_PTE")))
            End If
            If (Not (ds.Tables("REPORTE_BANCO_CONC_PTE2")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_BANCO_CONC_PTE2DataTable(ds.Tables("REPORTE_BANCO_CONC_PTE2")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_BANCO_CONC_PTE() As REPORTE_BANCO_CONC_PTEDataTable
        Get
            Return Me.tableREPORTE_BANCO_CONC_PTE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_BANCO_CONC_PTE2() As REPORTE_BANCO_CONC_PTE2DataTable
        Get
            Return Me.tableREPORTE_BANCO_CONC_PTE2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DT_CONC_PTE = CType(MyBase.Clone,DT_CONC_PTE)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("REPORTE_BANCO_CONC_PTE")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_BANCO_CONC_PTEDataTable(ds.Tables("REPORTE_BANCO_CONC_PTE")))
            End If
            If (Not (ds.Tables("REPORTE_BANCO_CONC_PTE2")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_BANCO_CONC_PTE2DataTable(ds.Tables("REPORTE_BANCO_CONC_PTE2")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableREPORTE_BANCO_CONC_PTE = CType(MyBase.Tables("REPORTE_BANCO_CONC_PTE"),REPORTE_BANCO_CONC_PTEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_BANCO_CONC_PTE) Is Nothing) Then
                Me.tableREPORTE_BANCO_CONC_PTE.InitVars
            End If
        End If
        Me.tableREPORTE_BANCO_CONC_PTE2 = CType(MyBase.Tables("REPORTE_BANCO_CONC_PTE2"),REPORTE_BANCO_CONC_PTE2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_BANCO_CONC_PTE2) Is Nothing) Then
                Me.tableREPORTE_BANCO_CONC_PTE2.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DT_CONC_PTE"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DT_CONC_PTE.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableREPORTE_BANCO_CONC_PTE = New REPORTE_BANCO_CONC_PTEDataTable
        MyBase.Tables.Add(Me.tableREPORTE_BANCO_CONC_PTE)
        Me.tableREPORTE_BANCO_CONC_PTE2 = New REPORTE_BANCO_CONC_PTE2DataTable
        MyBase.Tables.Add(Me.tableREPORTE_BANCO_CONC_PTE2)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_BANCO_CONC_PTE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_BANCO_CONC_PTE2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DT_CONC_PTE = New DT_CONC_PTE
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub REPORTE_BANCO_CONC_PTERowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_BANCO_CONC_PTERowChangeEvent)
    
    Public Delegate Sub REPORTE_BANCO_CONC_PTE2RowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_BANCO_CONC_PTE2RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_BANCO_CONC_PTEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_MP As Global.System.Data.DataColumn
        
        Private columnNRO_MP As Global.System.Data.DataColumn
        
        Private columnCOD_BANCO As Global.System.Data.DataColumn
        
        Private columnFECHA_MP As Global.System.Data.DataColumn
        
        Private columnDESC_OPE As Global.System.Data.DataColumn
        
        Private columnDEBE As Global.System.Data.DataColumn
        
        Private columnHABER As Global.System.Data.DataColumn
        
        Private columnCOD_AUX As Global.System.Data.DataColumn
        
        Private columnCOD_COMP As Global.System.Data.DataColumn
        
        Private columnNRO_COMP As Global.System.Data.DataColumn
        
        Private columnFE_AñO As Global.System.Data.DataColumn
        
        Private columnFE_MES As Global.System.Data.DataColumn
        
        Private columnSTATUS_EXT As Global.System.Data.DataColumn
        
        Private columnSTATUS_CONC As Global.System.Data.DataColumn
        
        Private columnFE_MES_CONC As Global.System.Data.DataColumn
        
        Private columnDEBE_SOLES As Global.System.Data.DataColumn
        
        Private columnHABER_SOLES As Global.System.Data.DataColumn
        
        Private columnDEBE_DOLARES As Global.System.Data.DataColumn
        
        Private columnHABER_DOLARES As Global.System.Data.DataColumn
        
        Private columnDOLARES As Global.System.Data.DataColumn
        
        Private columnMONEDA_EXTRANJERA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_BANCO_CONC_PTE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_MP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_MPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_MP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_BANCOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_BANCO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_OPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_OPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEBEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEBE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HABERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHABER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_AñOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFE_AñO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_MESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFE_MES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_EXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_EXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_CONCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_CONC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_MES_CONCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFE_MES_CONC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEBE_SOLESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEBE_SOLES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HABER_SOLESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHABER_SOLES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEBE_DOLARESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEBE_DOLARES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HABER_DOLARESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHABER_DOLARES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOLARESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOLARES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONEDA_EXTRANJERAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONEDA_EXTRANJERA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_BANCO_CONC_PTERow
            Get
                Return CType(Me.Rows(index),REPORTE_BANCO_CONC_PTERow)
            End Get
        End Property
        
        Public Event REPORTE_BANCO_CONC_PTERowChanging As REPORTE_BANCO_CONC_PTERowChangeEventHandler
        
        Public Event REPORTE_BANCO_CONC_PTERowChanged As REPORTE_BANCO_CONC_PTERowChangeEventHandler
        
        Public Event REPORTE_BANCO_CONC_PTERowDeleting As REPORTE_BANCO_CONC_PTERowChangeEventHandler
        
        Public Event REPORTE_BANCO_CONC_PTERowDeleted As REPORTE_BANCO_CONC_PTERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_BANCO_CONC_PTERow(ByVal row As REPORTE_BANCO_CONC_PTERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_BANCO_CONC_PTERow( _
                    ByVal COD_MP As String,  _
                    ByVal NRO_MP As String,  _
                    ByVal COD_BANCO As String,  _
                    ByVal FECHA_MP As Date,  _
                    ByVal DESC_OPE As String,  _
                    ByVal DEBE As Decimal,  _
                    ByVal HABER As Decimal,  _
                    ByVal COD_AUX As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal FE_AñO As String,  _
                    ByVal FE_MES As String,  _
                    ByVal STATUS_EXT As String,  _
                    ByVal STATUS_CONC As String,  _
                    ByVal FE_MES_CONC As String,  _
                    ByVal DEBE_SOLES As Decimal,  _
                    ByVal HABER_SOLES As Decimal,  _
                    ByVal DEBE_DOLARES As Decimal,  _
                    ByVal HABER_DOLARES As Decimal,  _
                    ByVal DOLARES As Decimal,  _
                    ByVal MONEDA_EXTRANJERA As Decimal) As REPORTE_BANCO_CONC_PTERow
            Dim rowREPORTE_BANCO_CONC_PTERow As REPORTE_BANCO_CONC_PTERow = CType(Me.NewRow,REPORTE_BANCO_CONC_PTERow)
            Dim columnValuesArray() As Object = New Object() {COD_MP, NRO_MP, COD_BANCO, FECHA_MP, DESC_OPE, DEBE, HABER, COD_AUX, COD_COMP, NRO_COMP, FE_AñO, FE_MES, STATUS_EXT, STATUS_CONC, FE_MES_CONC, DEBE_SOLES, HABER_SOLES, DEBE_DOLARES, HABER_DOLARES, DOLARES, MONEDA_EXTRANJERA}
            rowREPORTE_BANCO_CONC_PTERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_BANCO_CONC_PTERow)
            Return rowREPORTE_BANCO_CONC_PTERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOD_MPNRO_MPCOD_BANCO(ByVal COD_MP As String, ByVal NRO_MP As String, ByVal COD_BANCO As String) As REPORTE_BANCO_CONC_PTERow
            Return CType(Me.Rows.Find(New Object() {COD_MP, NRO_MP, COD_BANCO}),REPORTE_BANCO_CONC_PTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_BANCO_CONC_PTEDataTable = CType(MyBase.Clone,REPORTE_BANCO_CONC_PTEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_BANCO_CONC_PTEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_MP = MyBase.Columns("COD_MP")
            Me.columnNRO_MP = MyBase.Columns("NRO_MP")
            Me.columnCOD_BANCO = MyBase.Columns("COD_BANCO")
            Me.columnFECHA_MP = MyBase.Columns("FECHA_MP")
            Me.columnDESC_OPE = MyBase.Columns("DESC_OPE")
            Me.columnDEBE = MyBase.Columns("DEBE")
            Me.columnHABER = MyBase.Columns("HABER")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnFE_AñO = MyBase.Columns("FE_AñO")
            Me.columnFE_MES = MyBase.Columns("FE_MES")
            Me.columnSTATUS_EXT = MyBase.Columns("STATUS_EXT")
            Me.columnSTATUS_CONC = MyBase.Columns("STATUS_CONC")
            Me.columnFE_MES_CONC = MyBase.Columns("FE_MES_CONC")
            Me.columnDEBE_SOLES = MyBase.Columns("DEBE_SOLES")
            Me.columnHABER_SOLES = MyBase.Columns("HABER_SOLES")
            Me.columnDEBE_DOLARES = MyBase.Columns("DEBE_DOLARES")
            Me.columnHABER_DOLARES = MyBase.Columns("HABER_DOLARES")
            Me.columnDOLARES = MyBase.Columns("DOLARES")
            Me.columnMONEDA_EXTRANJERA = MyBase.Columns("MONEDA_EXTRANJERA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_MP = New Global.System.Data.DataColumn("COD_MP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MP)
            Me.columnNRO_MP = New Global.System.Data.DataColumn("NRO_MP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_MP)
            Me.columnCOD_BANCO = New Global.System.Data.DataColumn("COD_BANCO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_BANCO)
            Me.columnFECHA_MP = New Global.System.Data.DataColumn("FECHA_MP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MP)
            Me.columnDESC_OPE = New Global.System.Data.DataColumn("DESC_OPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_OPE)
            Me.columnDEBE = New Global.System.Data.DataColumn("DEBE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEBE)
            Me.columnHABER = New Global.System.Data.DataColumn("HABER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHABER)
            Me.columnCOD_AUX = New Global.System.Data.DataColumn("COD_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnCOD_COMP = New Global.System.Data.DataColumn("COD_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnNRO_COMP = New Global.System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnFE_AñO = New Global.System.Data.DataColumn("FE_AñO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_AñO)
            Me.columnFE_MES = New Global.System.Data.DataColumn("FE_MES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_MES)
            Me.columnSTATUS_EXT = New Global.System.Data.DataColumn("STATUS_EXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_EXT)
            Me.columnSTATUS_CONC = New Global.System.Data.DataColumn("STATUS_CONC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_CONC)
            Me.columnFE_MES_CONC = New Global.System.Data.DataColumn("FE_MES_CONC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_MES_CONC)
            Me.columnDEBE_SOLES = New Global.System.Data.DataColumn("DEBE_SOLES", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEBE_SOLES)
            Me.columnHABER_SOLES = New Global.System.Data.DataColumn("HABER_SOLES", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHABER_SOLES)
            Me.columnDEBE_DOLARES = New Global.System.Data.DataColumn("DEBE_DOLARES", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEBE_DOLARES)
            Me.columnHABER_DOLARES = New Global.System.Data.DataColumn("HABER_DOLARES", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHABER_DOLARES)
            Me.columnDOLARES = New Global.System.Data.DataColumn("DOLARES", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOLARES)
            Me.columnMONEDA_EXTRANJERA = New Global.System.Data.DataColumn("MONEDA_EXTRANJERA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONEDA_EXTRANJERA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_MP, Me.columnNRO_MP, Me.columnCOD_BANCO}, true))
            Me.columnCOD_MP.AllowDBNull = false
            Me.columnCOD_MP.MaxLength = 3
            Me.columnNRO_MP.AllowDBNull = false
            Me.columnNRO_MP.MaxLength = 15
            Me.columnCOD_BANCO.AllowDBNull = false
            Me.columnCOD_BANCO.MaxLength = 4
            Me.columnDESC_OPE.MaxLength = 60
            Me.columnDEBE.ReadOnly = true
            Me.columnHABER.ReadOnly = true
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnFE_AñO.MaxLength = 4
            Me.columnFE_MES.MaxLength = 2
            Me.columnSTATUS_EXT.MaxLength = 1
            Me.columnSTATUS_CONC.MaxLength = 1
            Me.columnFE_MES_CONC.MaxLength = 2
            Me.columnDEBE_SOLES.ReadOnly = true
            Me.columnHABER_SOLES.ReadOnly = true
            Me.columnDEBE_DOLARES.ReadOnly = true
            Me.columnHABER_DOLARES.ReadOnly = true
            Me.columnDOLARES.ReadOnly = true
            Me.columnMONEDA_EXTRANJERA.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_BANCO_CONC_PTERow() As REPORTE_BANCO_CONC_PTERow
            Return CType(Me.NewRow,REPORTE_BANCO_CONC_PTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_BANCO_CONC_PTERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_BANCO_CONC_PTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_BANCO_CONC_PTERowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_BANCO_CONC_PTERowChanged(Me, New REPORTE_BANCO_CONC_PTERowChangeEvent(CType(e.Row,REPORTE_BANCO_CONC_PTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_BANCO_CONC_PTERowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_BANCO_CONC_PTERowChanging(Me, New REPORTE_BANCO_CONC_PTERowChangeEvent(CType(e.Row,REPORTE_BANCO_CONC_PTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_BANCO_CONC_PTERowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_BANCO_CONC_PTERowDeleted(Me, New REPORTE_BANCO_CONC_PTERowChangeEvent(CType(e.Row,REPORTE_BANCO_CONC_PTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_BANCO_CONC_PTERowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_BANCO_CONC_PTERowDeleting(Me, New REPORTE_BANCO_CONC_PTERowChangeEvent(CType(e.Row,REPORTE_BANCO_CONC_PTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_BANCO_CONC_PTERow(ByVal row As REPORTE_BANCO_CONC_PTERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_CONC_PTE = New DT_CONC_PTE
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_BANCO_CONC_PTEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_BANCO_CONC_PTE2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_MP As Global.System.Data.DataColumn
        
        Private columnNRO_MP As Global.System.Data.DataColumn
        
        Private columnCOD_BANCO As Global.System.Data.DataColumn
        
        Private columnFECHA_MP As Global.System.Data.DataColumn
        
        Private columnDESC_OPE As Global.System.Data.DataColumn
        
        Private columnDEBE As Global.System.Data.DataColumn
        
        Private columnHABER As Global.System.Data.DataColumn
        
        Private columnCOD_AUX As Global.System.Data.DataColumn
        
        Private columnCOD_COMP As Global.System.Data.DataColumn
        
        Private columnNRO_COMP As Global.System.Data.DataColumn
        
        Private columnFE_AñO As Global.System.Data.DataColumn
        
        Private columnFE_MES As Global.System.Data.DataColumn
        
        Private columnSTATUS_EXT As Global.System.Data.DataColumn
        
        Private columnSTATUS_CONC As Global.System.Data.DataColumn
        
        Private columnFE_MES_CONC As Global.System.Data.DataColumn
        
        Private columnMONEDA_EXTRANJERA As Global.System.Data.DataColumn
        
        Private columnTIPO_CAMBIO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_BANCO_CONC_PTE2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_MP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_MPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_MP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_BANCOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_BANCO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_OPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_OPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEBEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEBE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HABERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHABER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_AñOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFE_AñO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_MESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFE_MES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_EXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_EXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_CONCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_CONC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_MES_CONCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFE_MES_CONC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONEDA_EXTRANJERAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONEDA_EXTRANJERA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CAMBIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_CAMBIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_BANCO_CONC_PTE2Row
            Get
                Return CType(Me.Rows(index),REPORTE_BANCO_CONC_PTE2Row)
            End Get
        End Property
        
        Public Event REPORTE_BANCO_CONC_PTE2RowChanging As REPORTE_BANCO_CONC_PTE2RowChangeEventHandler
        
        Public Event REPORTE_BANCO_CONC_PTE2RowChanged As REPORTE_BANCO_CONC_PTE2RowChangeEventHandler
        
        Public Event REPORTE_BANCO_CONC_PTE2RowDeleting As REPORTE_BANCO_CONC_PTE2RowChangeEventHandler
        
        Public Event REPORTE_BANCO_CONC_PTE2RowDeleted As REPORTE_BANCO_CONC_PTE2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_BANCO_CONC_PTE2Row(ByVal row As REPORTE_BANCO_CONC_PTE2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_BANCO_CONC_PTE2Row( _
                    ByVal COD_MP As String,  _
                    ByVal NRO_MP As String,  _
                    ByVal COD_BANCO As String,  _
                    ByVal FECHA_MP As Date,  _
                    ByVal DESC_OPE As String,  _
                    ByVal DEBE As Decimal,  _
                    ByVal HABER As Decimal,  _
                    ByVal COD_AUX As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal FE_AñO As String,  _
                    ByVal FE_MES As String,  _
                    ByVal STATUS_EXT As String,  _
                    ByVal STATUS_CONC As String,  _
                    ByVal FE_MES_CONC As String,  _
                    ByVal MONEDA_EXTRANJERA As Decimal,  _
                    ByVal TIPO_CAMBIO As Decimal) As REPORTE_BANCO_CONC_PTE2Row
            Dim rowREPORTE_BANCO_CONC_PTE2Row As REPORTE_BANCO_CONC_PTE2Row = CType(Me.NewRow,REPORTE_BANCO_CONC_PTE2Row)
            Dim columnValuesArray() As Object = New Object() {COD_MP, NRO_MP, COD_BANCO, FECHA_MP, DESC_OPE, DEBE, HABER, COD_AUX, COD_COMP, NRO_COMP, FE_AñO, FE_MES, STATUS_EXT, STATUS_CONC, FE_MES_CONC, MONEDA_EXTRANJERA, TIPO_CAMBIO}
            rowREPORTE_BANCO_CONC_PTE2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_BANCO_CONC_PTE2Row)
            Return rowREPORTE_BANCO_CONC_PTE2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOD_MPNRO_MPCOD_BANCO(ByVal COD_MP As String, ByVal NRO_MP As String, ByVal COD_BANCO As String) As REPORTE_BANCO_CONC_PTE2Row
            Return CType(Me.Rows.Find(New Object() {COD_MP, NRO_MP, COD_BANCO}),REPORTE_BANCO_CONC_PTE2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_BANCO_CONC_PTE2DataTable = CType(MyBase.Clone,REPORTE_BANCO_CONC_PTE2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_BANCO_CONC_PTE2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_MP = MyBase.Columns("COD_MP")
            Me.columnNRO_MP = MyBase.Columns("NRO_MP")
            Me.columnCOD_BANCO = MyBase.Columns("COD_BANCO")
            Me.columnFECHA_MP = MyBase.Columns("FECHA_MP")
            Me.columnDESC_OPE = MyBase.Columns("DESC_OPE")
            Me.columnDEBE = MyBase.Columns("DEBE")
            Me.columnHABER = MyBase.Columns("HABER")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnFE_AñO = MyBase.Columns("FE_AñO")
            Me.columnFE_MES = MyBase.Columns("FE_MES")
            Me.columnSTATUS_EXT = MyBase.Columns("STATUS_EXT")
            Me.columnSTATUS_CONC = MyBase.Columns("STATUS_CONC")
            Me.columnFE_MES_CONC = MyBase.Columns("FE_MES_CONC")
            Me.columnMONEDA_EXTRANJERA = MyBase.Columns("MONEDA_EXTRANJERA")
            Me.columnTIPO_CAMBIO = MyBase.Columns("TIPO_CAMBIO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_MP = New Global.System.Data.DataColumn("COD_MP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MP)
            Me.columnNRO_MP = New Global.System.Data.DataColumn("NRO_MP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_MP)
            Me.columnCOD_BANCO = New Global.System.Data.DataColumn("COD_BANCO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_BANCO)
            Me.columnFECHA_MP = New Global.System.Data.DataColumn("FECHA_MP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MP)
            Me.columnDESC_OPE = New Global.System.Data.DataColumn("DESC_OPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_OPE)
            Me.columnDEBE = New Global.System.Data.DataColumn("DEBE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEBE)
            Me.columnHABER = New Global.System.Data.DataColumn("HABER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHABER)
            Me.columnCOD_AUX = New Global.System.Data.DataColumn("COD_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnCOD_COMP = New Global.System.Data.DataColumn("COD_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnNRO_COMP = New Global.System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnFE_AñO = New Global.System.Data.DataColumn("FE_AñO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_AñO)
            Me.columnFE_MES = New Global.System.Data.DataColumn("FE_MES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_MES)
            Me.columnSTATUS_EXT = New Global.System.Data.DataColumn("STATUS_EXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_EXT)
            Me.columnSTATUS_CONC = New Global.System.Data.DataColumn("STATUS_CONC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_CONC)
            Me.columnFE_MES_CONC = New Global.System.Data.DataColumn("FE_MES_CONC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_MES_CONC)
            Me.columnMONEDA_EXTRANJERA = New Global.System.Data.DataColumn("MONEDA_EXTRANJERA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONEDA_EXTRANJERA)
            Me.columnTIPO_CAMBIO = New Global.System.Data.DataColumn("TIPO_CAMBIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CAMBIO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_MP, Me.columnNRO_MP, Me.columnCOD_BANCO}, true))
            Me.columnCOD_MP.AllowDBNull = false
            Me.columnCOD_MP.MaxLength = 3
            Me.columnNRO_MP.AllowDBNull = false
            Me.columnNRO_MP.MaxLength = 15
            Me.columnCOD_BANCO.AllowDBNull = false
            Me.columnCOD_BANCO.MaxLength = 4
            Me.columnDESC_OPE.MaxLength = 60
            Me.columnDEBE.ReadOnly = true
            Me.columnHABER.ReadOnly = true
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnFE_AñO.MaxLength = 4
            Me.columnFE_MES.MaxLength = 2
            Me.columnSTATUS_EXT.MaxLength = 1
            Me.columnSTATUS_CONC.MaxLength = 1
            Me.columnFE_MES_CONC.MaxLength = 2
            Me.columnMONEDA_EXTRANJERA.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_BANCO_CONC_PTE2Row() As REPORTE_BANCO_CONC_PTE2Row
            Return CType(Me.NewRow,REPORTE_BANCO_CONC_PTE2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_BANCO_CONC_PTE2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_BANCO_CONC_PTE2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_BANCO_CONC_PTE2RowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_BANCO_CONC_PTE2RowChanged(Me, New REPORTE_BANCO_CONC_PTE2RowChangeEvent(CType(e.Row,REPORTE_BANCO_CONC_PTE2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_BANCO_CONC_PTE2RowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_BANCO_CONC_PTE2RowChanging(Me, New REPORTE_BANCO_CONC_PTE2RowChangeEvent(CType(e.Row,REPORTE_BANCO_CONC_PTE2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_BANCO_CONC_PTE2RowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_BANCO_CONC_PTE2RowDeleted(Me, New REPORTE_BANCO_CONC_PTE2RowChangeEvent(CType(e.Row,REPORTE_BANCO_CONC_PTE2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_BANCO_CONC_PTE2RowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_BANCO_CONC_PTE2RowDeleting(Me, New REPORTE_BANCO_CONC_PTE2RowChangeEvent(CType(e.Row,REPORTE_BANCO_CONC_PTE2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_BANCO_CONC_PTE2Row(ByVal row As REPORTE_BANCO_CONC_PTE2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_CONC_PTE = New DT_CONC_PTE
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_BANCO_CONC_PTE2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_BANCO_CONC_PTERow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_BANCO_CONC_PTE As REPORTE_BANCO_CONC_PTEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_BANCO_CONC_PTE = CType(Me.Table,REPORTE_BANCO_CONC_PTEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MP() As String
            Get
                Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.COD_MPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.COD_MPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_MP() As String
            Get
                Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.NRO_MPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.NRO_MPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_BANCO() As String
            Get
                Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.COD_BANCOColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.COD_BANCOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.FECHA_MPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_MP' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.FECHA_MPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_OPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.DESC_OPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_OPE' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.DESC_OPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEBE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.DEBEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEBE' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.DEBEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HABER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.HABERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HABER' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.HABERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.COD_AUXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_AUX' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.COD_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.COD_COMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_COMP' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.COD_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.NRO_COMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_COMP' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.NRO_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_AñO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.FE_AñOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FE_AñO' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.FE_AñOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_MES() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.FE_MESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FE_MES' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.FE_MESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_EXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.STATUS_EXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_EXT' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.STATUS_EXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_CONC() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.STATUS_CONCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_CONC' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.STATUS_CONCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_MES_CONC() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.FE_MES_CONCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FE_MES_CONC' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.FE_MES_CONCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEBE_SOLES() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.DEBE_SOLESColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEBE_SOLES' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.DEBE_SOLESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HABER_SOLES() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.HABER_SOLESColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HABER_SOLES' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.HABER_SOLESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEBE_DOLARES() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.DEBE_DOLARESColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEBE_DOLARES' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.DEBE_DOLARESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HABER_DOLARES() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.HABER_DOLARESColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HABER_DOLARES' de la tabla 'REPORTE_BANCO_CONC_PTE' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.HABER_DOLARESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOLARES() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.DOLARESColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DOLARES' de la tabla 'REPORTE_BANCO_CONC_PTE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.DOLARESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONEDA_EXTRANJERA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE.MONEDA_EXTRANJERAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONEDA_EXTRANJERA' de la tabla 'REPORTE_BANCO_CONC_PTE' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE.MONEDA_EXTRANJERAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.FECHA_MPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MPNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.FECHA_MPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_OPENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.DESC_OPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_OPENull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.DESC_OPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEBENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.DEBEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEBENull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.DEBEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHABERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.HABERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHABERNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.HABERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_AUXNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.COD_AUXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_AUXNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.COD_AUXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.COD_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_COMPNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.COD_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.NRO_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMPNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.NRO_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_AñONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.FE_AñOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_AñONull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.FE_AñOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_MESNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.FE_MESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_MESNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.FE_MESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_EXTNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.STATUS_EXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_EXTNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.STATUS_EXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_CONCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.STATUS_CONCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_CONCNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.STATUS_CONCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_MES_CONCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.FE_MES_CONCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_MES_CONCNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.FE_MES_CONCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEBE_SOLESNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.DEBE_SOLESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEBE_SOLESNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.DEBE_SOLESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHABER_SOLESNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.HABER_SOLESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHABER_SOLESNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.HABER_SOLESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEBE_DOLARESNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.DEBE_DOLARESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEBE_DOLARESNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.DEBE_DOLARESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHABER_DOLARESNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.HABER_DOLARESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHABER_DOLARESNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.HABER_DOLARESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOLARESNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.DOLARESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOLARESNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.DOLARESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONEDA_EXTRANJERANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE.MONEDA_EXTRANJERAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONEDA_EXTRANJERANull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE.MONEDA_EXTRANJERAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_BANCO_CONC_PTE2Row
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_BANCO_CONC_PTE2 As REPORTE_BANCO_CONC_PTE2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_BANCO_CONC_PTE2 = CType(Me.Table,REPORTE_BANCO_CONC_PTE2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MP() As String
            Get
                Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.COD_MPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.COD_MPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_MP() As String
            Get
                Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.NRO_MPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.NRO_MPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_BANCO() As String
            Get
                Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.COD_BANCOColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.COD_BANCOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.FECHA_MPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_MP' de la tabla 'REPORTE_BANCO_CONC_PTE2' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.FECHA_MPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_OPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.DESC_OPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_OPE' de la tabla 'REPORTE_BANCO_CONC_PTE2' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.DESC_OPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEBE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.DEBEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEBE' de la tabla 'REPORTE_BANCO_CONC_PTE2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.DEBEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HABER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.HABERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HABER' de la tabla 'REPORTE_BANCO_CONC_PTE2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.HABERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.COD_AUXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_AUX' de la tabla 'REPORTE_BANCO_CONC_PTE2' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.COD_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.COD_COMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_COMP' de la tabla 'REPORTE_BANCO_CONC_PTE2' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.COD_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.NRO_COMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_COMP' de la tabla 'REPORTE_BANCO_CONC_PTE2' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.NRO_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_AñO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.FE_AñOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FE_AñO' de la tabla 'REPORTE_BANCO_CONC_PTE2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.FE_AñOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_MES() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.FE_MESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FE_MES' de la tabla 'REPORTE_BANCO_CONC_PTE2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.FE_MESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_EXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.STATUS_EXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_EXT' de la tabla 'REPORTE_BANCO_CONC_PTE2' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.STATUS_EXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_CONC() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.STATUS_CONCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_CONC' de la tabla 'REPORTE_BANCO_CONC_PTE2' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.STATUS_CONCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_MES_CONC() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.FE_MES_CONCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FE_MES_CONC' de la tabla 'REPORTE_BANCO_CONC_PTE2' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.FE_MES_CONCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONEDA_EXTRANJERA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.MONEDA_EXTRANJERAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONEDA_EXTRANJERA' de la tabla 'REPORTE_BANCO_CONC_PTE2' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.MONEDA_EXTRANJERAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CAMBIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BANCO_CONC_PTE2.TIPO_CAMBIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_CAMBIO' de la tabla 'REPORTE_BANCO_CONC_PTE2' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BANCO_CONC_PTE2.TIPO_CAMBIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE2.FECHA_MPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MPNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE2.FECHA_MPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_OPENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE2.DESC_OPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_OPENull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE2.DESC_OPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEBENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE2.DEBEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEBENull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE2.DEBEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHABERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE2.HABERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHABERNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE2.HABERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_AUXNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE2.COD_AUXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_AUXNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE2.COD_AUXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE2.COD_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_COMPNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE2.COD_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE2.NRO_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMPNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE2.NRO_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_AñONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE2.FE_AñOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_AñONull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE2.FE_AñOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_MESNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE2.FE_MESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_MESNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE2.FE_MESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_EXTNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE2.STATUS_EXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_EXTNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE2.STATUS_EXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_CONCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE2.STATUS_CONCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_CONCNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE2.STATUS_CONCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_MES_CONCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE2.FE_MES_CONCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_MES_CONCNull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE2.FE_MES_CONCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONEDA_EXTRANJERANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE2.MONEDA_EXTRANJERAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONEDA_EXTRANJERANull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE2.MONEDA_EXTRANJERAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CAMBIONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BANCO_CONC_PTE2.TIPO_CAMBIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CAMBIONull()
            Me(Me.tableREPORTE_BANCO_CONC_PTE2.TIPO_CAMBIOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_BANCO_CONC_PTERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_BANCO_CONC_PTERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_BANCO_CONC_PTERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_BANCO_CONC_PTERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_BANCO_CONC_PTE2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_BANCO_CONC_PTE2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_BANCO_CONC_PTE2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_BANCO_CONC_PTE2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DT_CONC_PTETableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_BANCO_CONC_PTETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_BANCO_CONC_PTE"
            tableMapping.ColumnMappings.Add("COD_MP", "COD_MP")
            tableMapping.ColumnMappings.Add("NRO_MP", "NRO_MP")
            tableMapping.ColumnMappings.Add("COD_BANCO", "COD_BANCO")
            tableMapping.ColumnMappings.Add("FECHA_MP", "FECHA_MP")
            tableMapping.ColumnMappings.Add("DESC_OPE", "DESC_OPE")
            tableMapping.ColumnMappings.Add("DEBE", "DEBE")
            tableMapping.ColumnMappings.Add("HABER", "HABER")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("FE_AñO", "FE_AñO")
            tableMapping.ColumnMappings.Add("FE_MES", "FE_MES")
            tableMapping.ColumnMappings.Add("STATUS_EXT", "STATUS_EXT")
            tableMapping.ColumnMappings.Add("STATUS_CONC", "STATUS_CONC")
            tableMapping.ColumnMappings.Add("FE_MES_CONC", "FE_MES_CONC")
            tableMapping.ColumnMappings.Add("DEBE_SOLES", "DEBE_SOLES")
            tableMapping.ColumnMappings.Add("HABER_SOLES", "HABER_SOLES")
            tableMapping.ColumnMappings.Add("DEBE_DOLARES", "DEBE_DOLARES")
            tableMapping.ColumnMappings.Add("HABER_DOLARES", "HABER_DOLARES")
            tableMapping.ColumnMappings.Add("DOLARES", "DOLARES")
            tableMapping.ColumnMappings.Add("MONEDA_EXTRANJERA", "MONEDA_EXTRANJERA")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_BANCO_CONC_PTE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_BANCO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_MES", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS_CONCILIADO", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_CONC", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_CONC_PTE.REPORTE_BANCO_CONC_PTEDataTable, ByVal COD_BANCO As String, ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal STATUS_CONCILIADO As String, ByVal FECHA_CONC As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_BANCO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_BANCO,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FE_MES,String)
            End If
            If (STATUS_CONCILIADO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(STATUS_CONCILIADO,String)
            End If
            If (FECHA_CONC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(FECHA_CONC.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal COD_BANCO As String, ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal STATUS_CONCILIADO As String, ByVal FECHA_CONC As Global.System.Nullable(Of Date)) As DT_CONC_PTE.REPORTE_BANCO_CONC_PTEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_BANCO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_BANCO,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FE_MES,String)
            End If
            If (STATUS_CONCILIADO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(STATUS_CONCILIADO,String)
            End If
            If (FECHA_CONC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(FECHA_CONC.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DT_CONC_PTE.REPORTE_BANCO_CONC_PTEDataTable = New DT_CONC_PTE.REPORTE_BANCO_CONC_PTEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_BANCO_CONC_PTE2TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_BANCO_CONC_PTE2"
            tableMapping.ColumnMappings.Add("COD_MP", "COD_MP")
            tableMapping.ColumnMappings.Add("NRO_MP", "NRO_MP")
            tableMapping.ColumnMappings.Add("COD_BANCO", "COD_BANCO")
            tableMapping.ColumnMappings.Add("FECHA_MP", "FECHA_MP")
            tableMapping.ColumnMappings.Add("DESC_OPE", "DESC_OPE")
            tableMapping.ColumnMappings.Add("DEBE", "DEBE")
            tableMapping.ColumnMappings.Add("HABER", "HABER")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("FE_AñO", "FE_AñO")
            tableMapping.ColumnMappings.Add("FE_MES", "FE_MES")
            tableMapping.ColumnMappings.Add("STATUS_EXT", "STATUS_EXT")
            tableMapping.ColumnMappings.Add("STATUS_CONC", "STATUS_CONC")
            tableMapping.ColumnMappings.Add("FE_MES_CONC", "FE_MES_CONC")
            tableMapping.ColumnMappings.Add("MONEDA_EXTRANJERA", "MONEDA_EXTRANJERA")
            tableMapping.ColumnMappings.Add("TIPO_CAMBIO", "TIPO_CAMBIO")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_BANCO_CONC_PTE2"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_BANCO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_MES", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS_CONCILIADO", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_CONC", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_CONC_PTE.REPORTE_BANCO_CONC_PTE2DataTable, ByVal COD_BANCO As String, ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal STATUS_CONCILIADO As String, ByVal FECHA_CONC As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_BANCO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_BANCO,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FE_MES,String)
            End If
            If (STATUS_CONCILIADO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(STATUS_CONCILIADO,String)
            End If
            If (FECHA_CONC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(FECHA_CONC.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal COD_BANCO As String, ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal STATUS_CONCILIADO As String, ByVal FECHA_CONC As Global.System.Nullable(Of Date)) As DT_CONC_PTE.REPORTE_BANCO_CONC_PTE2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_BANCO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_BANCO,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FE_MES,String)
            End If
            If (STATUS_CONCILIADO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(STATUS_CONCILIADO,String)
            End If
            If (FECHA_CONC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(FECHA_CONC.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DT_CONC_PTE.REPORTE_BANCO_CONC_PTE2DataTable = New DT_CONC_PTE.REPORTE_BANCO_CONC_PTE2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace

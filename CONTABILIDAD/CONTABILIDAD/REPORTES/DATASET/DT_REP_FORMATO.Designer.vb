'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.7905
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DT_REP_FORMATO"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DT_REP_FORMATO
    Inherits Global.System.Data.DataSet
    
    Private tableREPORTE_BALANCE As REPORTE_BALANCEDataTable
    
    Private tableREPORTE_BALANCE_ANUAL As REPORTE_BALANCE_ANUALDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("REPORTE_BALANCE")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_BALANCEDataTable(ds.Tables("REPORTE_BALANCE")))
            End If
            If (Not (ds.Tables("REPORTE_BALANCE_ANUAL")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_BALANCE_ANUALDataTable(ds.Tables("REPORTE_BALANCE_ANUAL")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_BALANCE() As REPORTE_BALANCEDataTable
        Get
            Return Me.tableREPORTE_BALANCE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_BALANCE_ANUAL() As REPORTE_BALANCE_ANUALDataTable
        Get
            Return Me.tableREPORTE_BALANCE_ANUAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DT_REP_FORMATO = CType(MyBase.Clone,DT_REP_FORMATO)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("REPORTE_BALANCE")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_BALANCEDataTable(ds.Tables("REPORTE_BALANCE")))
            End If
            If (Not (ds.Tables("REPORTE_BALANCE_ANUAL")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_BALANCE_ANUALDataTable(ds.Tables("REPORTE_BALANCE_ANUAL")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableREPORTE_BALANCE = CType(MyBase.Tables("REPORTE_BALANCE"),REPORTE_BALANCEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_BALANCE) Is Nothing) Then
                Me.tableREPORTE_BALANCE.InitVars
            End If
        End If
        Me.tableREPORTE_BALANCE_ANUAL = CType(MyBase.Tables("REPORTE_BALANCE_ANUAL"),REPORTE_BALANCE_ANUALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_BALANCE_ANUAL) Is Nothing) Then
                Me.tableREPORTE_BALANCE_ANUAL.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DT_REP_FORMATO"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DT_REP_FORMATO.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableREPORTE_BALANCE = New REPORTE_BALANCEDataTable
        MyBase.Tables.Add(Me.tableREPORTE_BALANCE)
        Me.tableREPORTE_BALANCE_ANUAL = New REPORTE_BALANCE_ANUALDataTable
        MyBase.Tables.Add(Me.tableREPORTE_BALANCE_ANUAL)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_BALANCE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_BALANCE_ANUAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DT_REP_FORMATO = New DT_REP_FORMATO
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub REPORTE_BALANCERowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_BALANCERowChangeEvent)
    
    Public Delegate Sub REPORTE_BALANCE_ANUALRowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_BALANCE_ANUALRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_BALANCEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_FORMATO As Global.System.Data.DataColumn
        
        Private columnCOD_GRUPO As Global.System.Data.DataColumn
        
        Private columnCOD_DETALLE As Global.System.Data.DataColumn
        
        Private columnSUMA As Global.System.Data.DataColumn
        
        Private columnDESC_GRUPO As Global.System.Data.DataColumn
        
        Private columnDESC_TOTAL As Global.System.Data.DataColumn
        
        Private columnDESC_DETALLE As Global.System.Data.DataColumn
        
        Private columnCOD_CLASE As Global.System.Data.DataColumn
        
        Private columnTOTAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_BALANCE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_FORMATOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_FORMATO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_GRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_GRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DETALLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DETALLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_GRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_GRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_DETALLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_DETALLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CLASEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CLASE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_BALANCERow
            Get
                Return CType(Me.Rows(index),REPORTE_BALANCERow)
            End Get
        End Property
        
        Public Event REPORTE_BALANCERowChanging As REPORTE_BALANCERowChangeEventHandler
        
        Public Event REPORTE_BALANCERowChanged As REPORTE_BALANCERowChangeEventHandler
        
        Public Event REPORTE_BALANCERowDeleting As REPORTE_BALANCERowChangeEventHandler
        
        Public Event REPORTE_BALANCERowDeleted As REPORTE_BALANCERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_BALANCERow(ByVal row As REPORTE_BALANCERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_BALANCERow(ByVal COD_FORMATO As String, ByVal COD_GRUPO As String, ByVal COD_DETALLE As String, ByVal SUMA As Decimal, ByVal DESC_GRUPO As String, ByVal DESC_TOTAL As String, ByVal DESC_DETALLE As String, ByVal COD_CLASE As String, ByVal TOTAL As Decimal) As REPORTE_BALANCERow
            Dim rowREPORTE_BALANCERow As REPORTE_BALANCERow = CType(Me.NewRow,REPORTE_BALANCERow)
            Dim columnValuesArray() As Object = New Object() {COD_FORMATO, COD_GRUPO, COD_DETALLE, SUMA, DESC_GRUPO, DESC_TOTAL, DESC_DETALLE, COD_CLASE, TOTAL}
            rowREPORTE_BALANCERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_BALANCERow)
            Return rowREPORTE_BALANCERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_BALANCEDataTable = CType(MyBase.Clone,REPORTE_BALANCEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_BALANCEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_FORMATO = MyBase.Columns("COD_FORMATO")
            Me.columnCOD_GRUPO = MyBase.Columns("COD_GRUPO")
            Me.columnCOD_DETALLE = MyBase.Columns("COD_DETALLE")
            Me.columnSUMA = MyBase.Columns("SUMA")
            Me.columnDESC_GRUPO = MyBase.Columns("DESC_GRUPO")
            Me.columnDESC_TOTAL = MyBase.Columns("DESC_TOTAL")
            Me.columnDESC_DETALLE = MyBase.Columns("DESC_DETALLE")
            Me.columnCOD_CLASE = MyBase.Columns("COD_CLASE")
            Me.columnTOTAL = MyBase.Columns("TOTAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_FORMATO = New Global.System.Data.DataColumn("COD_FORMATO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_FORMATO)
            Me.columnCOD_GRUPO = New Global.System.Data.DataColumn("COD_GRUPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_GRUPO)
            Me.columnCOD_DETALLE = New Global.System.Data.DataColumn("COD_DETALLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DETALLE)
            Me.columnSUMA = New Global.System.Data.DataColumn("SUMA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUMA)
            Me.columnDESC_GRUPO = New Global.System.Data.DataColumn("DESC_GRUPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_GRUPO)
            Me.columnDESC_TOTAL = New Global.System.Data.DataColumn("DESC_TOTAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_TOTAL)
            Me.columnDESC_DETALLE = New Global.System.Data.DataColumn("DESC_DETALLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_DETALLE)
            Me.columnCOD_CLASE = New Global.System.Data.DataColumn("COD_CLASE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CLASE)
            Me.columnTOTAL = New Global.System.Data.DataColumn("TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL)
            Me.columnCOD_FORMATO.AllowDBNull = false
            Me.columnCOD_FORMATO.MaxLength = 2
            Me.columnCOD_GRUPO.AllowDBNull = false
            Me.columnCOD_GRUPO.MaxLength = 2
            Me.columnCOD_DETALLE.AllowDBNull = false
            Me.columnCOD_DETALLE.MaxLength = 2
            Me.columnSUMA.ReadOnly = true
            Me.columnDESC_GRUPO.ReadOnly = true
            Me.columnDESC_GRUPO.MaxLength = 60
            Me.columnDESC_TOTAL.ReadOnly = true
            Me.columnDESC_TOTAL.MaxLength = 60
            Me.columnDESC_DETALLE.ReadOnly = true
            Me.columnDESC_DETALLE.MaxLength = 60
            Me.columnCOD_CLASE.ReadOnly = true
            Me.columnCOD_CLASE.MaxLength = 1
            Me.columnTOTAL.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_BALANCERow() As REPORTE_BALANCERow
            Return CType(Me.NewRow,REPORTE_BALANCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_BALANCERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_BALANCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_BALANCERowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_BALANCERowChanged(Me, New REPORTE_BALANCERowChangeEvent(CType(e.Row,REPORTE_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_BALANCERowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_BALANCERowChanging(Me, New REPORTE_BALANCERowChangeEvent(CType(e.Row,REPORTE_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_BALANCERowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_BALANCERowDeleted(Me, New REPORTE_BALANCERowChangeEvent(CType(e.Row,REPORTE_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_BALANCERowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_BALANCERowDeleting(Me, New REPORTE_BALANCERowChangeEvent(CType(e.Row,REPORTE_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_BALANCERow(ByVal row As REPORTE_BALANCERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REP_FORMATO = New DT_REP_FORMATO
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_BALANCEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_BALANCE_ANUALDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSALDO0 As Global.System.Data.DataColumn
        
        Private columnSALDO1 As Global.System.Data.DataColumn
        
        Private columnSALDO2 As Global.System.Data.DataColumn
        
        Private columnSALDO3 As Global.System.Data.DataColumn
        
        Private columnSALDO4 As Global.System.Data.DataColumn
        
        Private columnSALDO5 As Global.System.Data.DataColumn
        
        Private columnSALDO6 As Global.System.Data.DataColumn
        
        Private columnSALDO7 As Global.System.Data.DataColumn
        
        Private columnSALDO8 As Global.System.Data.DataColumn
        
        Private columnSALDO9 As Global.System.Data.DataColumn
        
        Private columnSALDO10 As Global.System.Data.DataColumn
        
        Private columnSALDO11 As Global.System.Data.DataColumn
        
        Private columnSALDO12 As Global.System.Data.DataColumn
        
        Private columnSALDO13 As Global.System.Data.DataColumn
        
        Private columnSUMA As Global.System.Data.DataColumn
        
        Private columnCOD_FORMATO As Global.System.Data.DataColumn
        
        Private columnCOD_CLASE As Global.System.Data.DataColumn
        
        Private columnCOD_GRUPO As Global.System.Data.DataColumn
        
        Private columnDESC_GRUPO As Global.System.Data.DataColumn
        
        Private columnCOD_DETALLE As Global.System.Data.DataColumn
        
        Private columnDESC_DETALLE As Global.System.Data.DataColumn
        
        Private columnTOTAL As Global.System.Data.DataColumn
        
        Private columnDESC_TOTAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_BALANCE_ANUAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO0Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO0
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_FORMATOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_FORMATO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CLASEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CLASE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_GRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_GRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_GRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_GRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DETALLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DETALLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_DETALLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_DETALLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_BALANCE_ANUALRow
            Get
                Return CType(Me.Rows(index),REPORTE_BALANCE_ANUALRow)
            End Get
        End Property
        
        Public Event REPORTE_BALANCE_ANUALRowChanging As REPORTE_BALANCE_ANUALRowChangeEventHandler
        
        Public Event REPORTE_BALANCE_ANUALRowChanged As REPORTE_BALANCE_ANUALRowChangeEventHandler
        
        Public Event REPORTE_BALANCE_ANUALRowDeleting As REPORTE_BALANCE_ANUALRowChangeEventHandler
        
        Public Event REPORTE_BALANCE_ANUALRowDeleted As REPORTE_BALANCE_ANUALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_BALANCE_ANUALRow(ByVal row As REPORTE_BALANCE_ANUALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_BALANCE_ANUALRow( _
                    ByVal SALDO0 As Decimal,  _
                    ByVal SALDO1 As Decimal,  _
                    ByVal SALDO2 As Decimal,  _
                    ByVal SALDO3 As Decimal,  _
                    ByVal SALDO4 As Decimal,  _
                    ByVal SALDO5 As Decimal,  _
                    ByVal SALDO6 As Decimal,  _
                    ByVal SALDO7 As Decimal,  _
                    ByVal SALDO8 As Decimal,  _
                    ByVal SALDO9 As Decimal,  _
                    ByVal SALDO10 As Decimal,  _
                    ByVal SALDO11 As Decimal,  _
                    ByVal SALDO12 As Decimal,  _
                    ByVal SALDO13 As Decimal,  _
                    ByVal SUMA As Decimal,  _
                    ByVal COD_FORMATO As String,  _
                    ByVal COD_CLASE As String,  _
                    ByVal COD_GRUPO As String,  _
                    ByVal DESC_GRUPO As String,  _
                    ByVal COD_DETALLE As String,  _
                    ByVal DESC_DETALLE As String,  _
                    ByVal TOTAL As Decimal,  _
                    ByVal DESC_TOTAL As String) As REPORTE_BALANCE_ANUALRow
            Dim rowREPORTE_BALANCE_ANUALRow As REPORTE_BALANCE_ANUALRow = CType(Me.NewRow,REPORTE_BALANCE_ANUALRow)
            Dim columnValuesArray() As Object = New Object() {SALDO0, SALDO1, SALDO2, SALDO3, SALDO4, SALDO5, SALDO6, SALDO7, SALDO8, SALDO9, SALDO10, SALDO11, SALDO12, SALDO13, SUMA, COD_FORMATO, COD_CLASE, COD_GRUPO, DESC_GRUPO, COD_DETALLE, DESC_DETALLE, TOTAL, DESC_TOTAL}
            rowREPORTE_BALANCE_ANUALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_BALANCE_ANUALRow)
            Return rowREPORTE_BALANCE_ANUALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_BALANCE_ANUALDataTable = CType(MyBase.Clone,REPORTE_BALANCE_ANUALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_BALANCE_ANUALDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSALDO0 = MyBase.Columns("SALDO0")
            Me.columnSALDO1 = MyBase.Columns("SALDO1")
            Me.columnSALDO2 = MyBase.Columns("SALDO2")
            Me.columnSALDO3 = MyBase.Columns("SALDO3")
            Me.columnSALDO4 = MyBase.Columns("SALDO4")
            Me.columnSALDO5 = MyBase.Columns("SALDO5")
            Me.columnSALDO6 = MyBase.Columns("SALDO6")
            Me.columnSALDO7 = MyBase.Columns("SALDO7")
            Me.columnSALDO8 = MyBase.Columns("SALDO8")
            Me.columnSALDO9 = MyBase.Columns("SALDO9")
            Me.columnSALDO10 = MyBase.Columns("SALDO10")
            Me.columnSALDO11 = MyBase.Columns("SALDO11")
            Me.columnSALDO12 = MyBase.Columns("SALDO12")
            Me.columnSALDO13 = MyBase.Columns("SALDO13")
            Me.columnSUMA = MyBase.Columns("SUMA")
            Me.columnCOD_FORMATO = MyBase.Columns("COD_FORMATO")
            Me.columnCOD_CLASE = MyBase.Columns("COD_CLASE")
            Me.columnCOD_GRUPO = MyBase.Columns("COD_GRUPO")
            Me.columnDESC_GRUPO = MyBase.Columns("DESC_GRUPO")
            Me.columnCOD_DETALLE = MyBase.Columns("COD_DETALLE")
            Me.columnDESC_DETALLE = MyBase.Columns("DESC_DETALLE")
            Me.columnTOTAL = MyBase.Columns("TOTAL")
            Me.columnDESC_TOTAL = MyBase.Columns("DESC_TOTAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSALDO0 = New Global.System.Data.DataColumn("SALDO0", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO0)
            Me.columnSALDO1 = New Global.System.Data.DataColumn("SALDO1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO1)
            Me.columnSALDO2 = New Global.System.Data.DataColumn("SALDO2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO2)
            Me.columnSALDO3 = New Global.System.Data.DataColumn("SALDO3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO3)
            Me.columnSALDO4 = New Global.System.Data.DataColumn("SALDO4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO4)
            Me.columnSALDO5 = New Global.System.Data.DataColumn("SALDO5", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO5)
            Me.columnSALDO6 = New Global.System.Data.DataColumn("SALDO6", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO6)
            Me.columnSALDO7 = New Global.System.Data.DataColumn("SALDO7", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO7)
            Me.columnSALDO8 = New Global.System.Data.DataColumn("SALDO8", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO8)
            Me.columnSALDO9 = New Global.System.Data.DataColumn("SALDO9", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO9)
            Me.columnSALDO10 = New Global.System.Data.DataColumn("SALDO10", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO10)
            Me.columnSALDO11 = New Global.System.Data.DataColumn("SALDO11", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO11)
            Me.columnSALDO12 = New Global.System.Data.DataColumn("SALDO12", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO12)
            Me.columnSALDO13 = New Global.System.Data.DataColumn("SALDO13", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO13)
            Me.columnSUMA = New Global.System.Data.DataColumn("SUMA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUMA)
            Me.columnCOD_FORMATO = New Global.System.Data.DataColumn("COD_FORMATO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_FORMATO)
            Me.columnCOD_CLASE = New Global.System.Data.DataColumn("COD_CLASE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CLASE)
            Me.columnCOD_GRUPO = New Global.System.Data.DataColumn("COD_GRUPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_GRUPO)
            Me.columnDESC_GRUPO = New Global.System.Data.DataColumn("DESC_GRUPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_GRUPO)
            Me.columnCOD_DETALLE = New Global.System.Data.DataColumn("COD_DETALLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DETALLE)
            Me.columnDESC_DETALLE = New Global.System.Data.DataColumn("DESC_DETALLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_DETALLE)
            Me.columnTOTAL = New Global.System.Data.DataColumn("TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL)
            Me.columnDESC_TOTAL = New Global.System.Data.DataColumn("DESC_TOTAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_TOTAL)
            Me.columnCOD_FORMATO.Caption = "NIVEL1"
            Me.columnCOD_CLASE.ReadOnly = true
            Me.columnCOD_CLASE.MaxLength = 1
            Me.columnCOD_GRUPO.Caption = "NIVEL2"
            Me.columnDESC_GRUPO.ReadOnly = true
            Me.columnDESC_GRUPO.MaxLength = 60
            Me.columnCOD_DETALLE.Caption = "NIVEL3"
            Me.columnDESC_DETALLE.ReadOnly = true
            Me.columnDESC_DETALLE.MaxLength = 60
            Me.columnTOTAL.ReadOnly = true
            Me.columnDESC_TOTAL.ReadOnly = true
            Me.columnDESC_TOTAL.MaxLength = 60
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_BALANCE_ANUALRow() As REPORTE_BALANCE_ANUALRow
            Return CType(Me.NewRow,REPORTE_BALANCE_ANUALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_BALANCE_ANUALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_BALANCE_ANUALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_BALANCE_ANUALRowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_BALANCE_ANUALRowChanged(Me, New REPORTE_BALANCE_ANUALRowChangeEvent(CType(e.Row,REPORTE_BALANCE_ANUALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_BALANCE_ANUALRowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_BALANCE_ANUALRowChanging(Me, New REPORTE_BALANCE_ANUALRowChangeEvent(CType(e.Row,REPORTE_BALANCE_ANUALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_BALANCE_ANUALRowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_BALANCE_ANUALRowDeleted(Me, New REPORTE_BALANCE_ANUALRowChangeEvent(CType(e.Row,REPORTE_BALANCE_ANUALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_BALANCE_ANUALRowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_BALANCE_ANUALRowDeleting(Me, New REPORTE_BALANCE_ANUALRowChangeEvent(CType(e.Row,REPORTE_BALANCE_ANUALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_BALANCE_ANUALRow(ByVal row As REPORTE_BALANCE_ANUALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REP_FORMATO = New DT_REP_FORMATO
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_BALANCE_ANUALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_BALANCERow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_BALANCE As REPORTE_BALANCEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_BALANCE = CType(Me.Table,REPORTE_BALANCEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_FORMATO() As String
            Get
                Return CType(Me(Me.tableREPORTE_BALANCE.COD_FORMATOColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE.COD_FORMATOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_GRUPO() As String
            Get
                Return CType(Me(Me.tableREPORTE_BALANCE.COD_GRUPOColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE.COD_GRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DETALLE() As String
            Get
                Return CType(Me(Me.tableREPORTE_BALANCE.COD_DETALLEColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE.COD_DETALLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUMA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE.SUMAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUMA' de la tabla 'REPORTE_BALANCE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE.SUMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_GRUPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE.DESC_GRUPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_GRUPO' de la tabla 'REPORTE_BALANCE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE.DESC_GRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_TOTAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE.DESC_TOTALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_TOTAL' de la tabla 'REPORTE_BALANCE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE.DESC_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_DETALLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE.DESC_DETALLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_DETALLE' de la tabla 'REPORTE_BALANCE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE.DESC_DETALLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CLASE() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE.COD_CLASEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_CLASE' de la tabla 'REPORTE_BALANCE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE.COD_CLASEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE.TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TOTAL' de la tabla 'REPORTE_BALANCE' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE.TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUMANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE.SUMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUMANull()
            Me(Me.tableREPORTE_BALANCE.SUMAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_GRUPONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE.DESC_GRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_GRUPONull()
            Me(Me.tableREPORTE_BALANCE.DESC_GRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE.DESC_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_TOTALNull()
            Me(Me.tableREPORTE_BALANCE.DESC_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_DETALLENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE.DESC_DETALLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_DETALLENull()
            Me(Me.tableREPORTE_BALANCE.DESC_DETALLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_CLASENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE.COD_CLASEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_CLASENull()
            Me(Me.tableREPORTE_BALANCE.COD_CLASEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE.TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALNull()
            Me(Me.tableREPORTE_BALANCE.TOTALColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_BALANCE_ANUALRow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_BALANCE_ANUAL As REPORTE_BALANCE_ANUALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_BALANCE_ANUAL = CType(Me.Table,REPORTE_BALANCE_ANUALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO0() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO0Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO0' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO0Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO1' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO2' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO3' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO4' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO5() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO5Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO5' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO6() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO6Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO6' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO7() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO7Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO7' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO8() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO8Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO8' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO9() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO9Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO9' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO10() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO10Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO10' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO11() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO11Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO11' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO12() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO12Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO12' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO13() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO13Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO13' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUMA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.SUMAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUMA' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.SUMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_FORMATO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.COD_FORMATOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_FORMATO' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.COD_FORMATOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CLASE() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.COD_CLASEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_CLASE' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.COD_CLASEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_GRUPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.COD_GRUPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_GRUPO' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.COD_GRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_GRUPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.DESC_GRUPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_GRUPO' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.DESC_GRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DETALLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.COD_DETALLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_DETALLE' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.COD_DETALLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_DETALLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.DESC_DETALLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_DETALLE' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.DESC_DETALLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TOTAL' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_TOTAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_BALANCE_ANUAL.DESC_TOTALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_TOTAL' de la tabla 'REPORTE_BALANCE_ANUAL' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_BALANCE_ANUAL.DESC_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO0Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.SALDO0Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO0Null()
            Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO0Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO1Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.SALDO1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO1Null()
            Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO2Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.SALDO2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO2Null()
            Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO3Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.SALDO3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO3Null()
            Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO4Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.SALDO4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO4Null()
            Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO5Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.SALDO5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO5Null()
            Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO6Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.SALDO6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO6Null()
            Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO7Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.SALDO7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO7Null()
            Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO8Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.SALDO8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO8Null()
            Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO9Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.SALDO9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO9Null()
            Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO10Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.SALDO10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO10Null()
            Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO11Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.SALDO11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO11Null()
            Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO12Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.SALDO12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO12Null()
            Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO13Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.SALDO13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO13Null()
            Me(Me.tableREPORTE_BALANCE_ANUAL.SALDO13Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUMANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.SUMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUMANull()
            Me(Me.tableREPORTE_BALANCE_ANUAL.SUMAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_FORMATONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.COD_FORMATOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_FORMATONull()
            Me(Me.tableREPORTE_BALANCE_ANUAL.COD_FORMATOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_CLASENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.COD_CLASEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_CLASENull()
            Me(Me.tableREPORTE_BALANCE_ANUAL.COD_CLASEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_GRUPONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.COD_GRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_GRUPONull()
            Me(Me.tableREPORTE_BALANCE_ANUAL.COD_GRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_GRUPONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.DESC_GRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_GRUPONull()
            Me(Me.tableREPORTE_BALANCE_ANUAL.DESC_GRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_DETALLENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.COD_DETALLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_DETALLENull()
            Me(Me.tableREPORTE_BALANCE_ANUAL.COD_DETALLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_DETALLENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.DESC_DETALLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_DETALLENull()
            Me(Me.tableREPORTE_BALANCE_ANUAL.DESC_DETALLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALNull()
            Me(Me.tableREPORTE_BALANCE_ANUAL.TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_BALANCE_ANUAL.DESC_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_TOTALNull()
            Me(Me.tableREPORTE_BALANCE_ANUAL.DESC_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_BALANCERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_BALANCERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_BALANCERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_BALANCERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_BALANCE_ANUALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_BALANCE_ANUALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_BALANCE_ANUALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_BALANCE_ANUALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DT_REP_FORMATOTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_BALANCETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_BALANCE"
            tableMapping.ColumnMappings.Add("COD_FORMATO", "COD_FORMATO")
            tableMapping.ColumnMappings.Add("COD_GRUPO", "COD_GRUPO")
            tableMapping.ColumnMappings.Add("COD_DETALLE", "COD_DETALLE")
            tableMapping.ColumnMappings.Add("SUMA", "SUMA")
            tableMapping.ColumnMappings.Add("DESC_GRUPO", "DESC_GRUPO")
            tableMapping.ColumnMappings.Add("DESC_TOTAL", "DESC_TOTAL")
            tableMapping.ColumnMappings.Add("DESC_DETALLE", "DESC_DETALLE")
            tableMapping.ColumnMappings.Add("COD_CLASE", "COD_CLASE")
            tableMapping.ColumnMappings.Add("TOTAL", "TOTAL")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI01_local
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_BALANCE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_FORMATO", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REP_FORMATO.REPORTE_BALANCEDataTable, ByVal COD_FORMATO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_FORMATO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_FORMATO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal COD_FORMATO As String) As DT_REP_FORMATO.REPORTE_BALANCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_FORMATO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_FORMATO,String)
            End If
            Dim dataTable As DT_REP_FORMATO.REPORTE_BALANCEDataTable = New DT_REP_FORMATO.REPORTE_BALANCEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace

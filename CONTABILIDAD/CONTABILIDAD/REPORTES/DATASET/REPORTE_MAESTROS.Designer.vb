'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.7905
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("REPORTE_MAESTROS"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class REPORTE_MAESTROS
    Inherits Global.System.Data.DataSet
    
    Private tableREPORTE_M_AUTOMATICAS As REPORTE_M_AUTOMATICASDataTable
    
    Private tableREPORTE_M_CUENTAS As REPORTE_M_CUENTASDataTable
    
    Private tableCUADRE_AUTOMATICA As CUADRE_AUTOMATICADataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("REPORTE_M_AUTOMATICAS")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_M_AUTOMATICASDataTable(ds.Tables("REPORTE_M_AUTOMATICAS")))
            End If
            If (Not (ds.Tables("REPORTE_M_CUENTAS")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_M_CUENTASDataTable(ds.Tables("REPORTE_M_CUENTAS")))
            End If
            If (Not (ds.Tables("CUADRE_AUTOMATICA")) Is Nothing) Then
                MyBase.Tables.Add(New CUADRE_AUTOMATICADataTable(ds.Tables("CUADRE_AUTOMATICA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_M_AUTOMATICAS() As REPORTE_M_AUTOMATICASDataTable
        Get
            Return Me.tableREPORTE_M_AUTOMATICAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_M_CUENTAS() As REPORTE_M_CUENTASDataTable
        Get
            Return Me.tableREPORTE_M_CUENTAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CUADRE_AUTOMATICA() As CUADRE_AUTOMATICADataTable
        Get
            Return Me.tableCUADRE_AUTOMATICA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As REPORTE_MAESTROS = CType(MyBase.Clone,REPORTE_MAESTROS)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("REPORTE_M_AUTOMATICAS")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_M_AUTOMATICASDataTable(ds.Tables("REPORTE_M_AUTOMATICAS")))
            End If
            If (Not (ds.Tables("REPORTE_M_CUENTAS")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_M_CUENTASDataTable(ds.Tables("REPORTE_M_CUENTAS")))
            End If
            If (Not (ds.Tables("CUADRE_AUTOMATICA")) Is Nothing) Then
                MyBase.Tables.Add(New CUADRE_AUTOMATICADataTable(ds.Tables("CUADRE_AUTOMATICA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableREPORTE_M_AUTOMATICAS = CType(MyBase.Tables("REPORTE_M_AUTOMATICAS"),REPORTE_M_AUTOMATICASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_M_AUTOMATICAS) Is Nothing) Then
                Me.tableREPORTE_M_AUTOMATICAS.InitVars
            End If
        End If
        Me.tableREPORTE_M_CUENTAS = CType(MyBase.Tables("REPORTE_M_CUENTAS"),REPORTE_M_CUENTASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_M_CUENTAS) Is Nothing) Then
                Me.tableREPORTE_M_CUENTAS.InitVars
            End If
        End If
        Me.tableCUADRE_AUTOMATICA = CType(MyBase.Tables("CUADRE_AUTOMATICA"),CUADRE_AUTOMATICADataTable)
        If (initTable = true) Then
            If (Not (Me.tableCUADRE_AUTOMATICA) Is Nothing) Then
                Me.tableCUADRE_AUTOMATICA.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "REPORTE_MAESTROS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/REPORTE_MAESTROS.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableREPORTE_M_AUTOMATICAS = New REPORTE_M_AUTOMATICASDataTable
        MyBase.Tables.Add(Me.tableREPORTE_M_AUTOMATICAS)
        Me.tableREPORTE_M_CUENTAS = New REPORTE_M_CUENTASDataTable
        MyBase.Tables.Add(Me.tableREPORTE_M_CUENTAS)
        Me.tableCUADRE_AUTOMATICA = New CUADRE_AUTOMATICADataTable
        MyBase.Tables.Add(Me.tableCUADRE_AUTOMATICA)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_M_AUTOMATICAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_M_CUENTAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCUADRE_AUTOMATICA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As REPORTE_MAESTROS = New REPORTE_MAESTROS
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub REPORTE_M_AUTOMATICASRowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_M_AUTOMATICASRowChangeEvent)
    
    Public Delegate Sub REPORTE_M_CUENTASRowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_M_CUENTASRowChangeEvent)
    
    Public Delegate Sub CUADRE_AUTOMATICARowChangeEventHandler(ByVal sender As Object, ByVal e As CUADRE_AUTOMATICARowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_M_AUTOMATICASDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_CUENTA As Global.System.Data.DataColumn
        
        Private columnAÑO As Global.System.Data.DataColumn
        
        Private columnDESC_CUENTA As Global.System.Data.DataColumn
        
        Private columnTIPO_CUENTA As Global.System.Data.DataColumn
        
        Private columnCUENTA_DESTINO As Global.System.Data.DataColumn
        
        Private columnCUENTA_ENLACE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_M_AUTOMATICAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AÑOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAÑO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUENTA_DESTINOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUENTA_DESTINO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUENTA_ENLACEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUENTA_ENLACE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_M_AUTOMATICASRow
            Get
                Return CType(Me.Rows(index),REPORTE_M_AUTOMATICASRow)
            End Get
        End Property
        
        Public Event REPORTE_M_AUTOMATICASRowChanging As REPORTE_M_AUTOMATICASRowChangeEventHandler
        
        Public Event REPORTE_M_AUTOMATICASRowChanged As REPORTE_M_AUTOMATICASRowChangeEventHandler
        
        Public Event REPORTE_M_AUTOMATICASRowDeleting As REPORTE_M_AUTOMATICASRowChangeEventHandler
        
        Public Event REPORTE_M_AUTOMATICASRowDeleted As REPORTE_M_AUTOMATICASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_M_AUTOMATICASRow(ByVal row As REPORTE_M_AUTOMATICASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_M_AUTOMATICASRow(ByVal COD_CUENTA As String, ByVal AÑO As String, ByVal DESC_CUENTA As String, ByVal TIPO_CUENTA As String, ByVal CUENTA_DESTINO As String, ByVal CUENTA_ENLACE As String) As REPORTE_M_AUTOMATICASRow
            Dim rowREPORTE_M_AUTOMATICASRow As REPORTE_M_AUTOMATICASRow = CType(Me.NewRow,REPORTE_M_AUTOMATICASRow)
            Dim columnValuesArray() As Object = New Object() {COD_CUENTA, AÑO, DESC_CUENTA, TIPO_CUENTA, CUENTA_DESTINO, CUENTA_ENLACE}
            rowREPORTE_M_AUTOMATICASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_M_AUTOMATICASRow)
            Return rowREPORTE_M_AUTOMATICASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_M_AUTOMATICASDataTable = CType(MyBase.Clone,REPORTE_M_AUTOMATICASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_M_AUTOMATICASDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
            Me.columnAÑO = MyBase.Columns("AÑO")
            Me.columnDESC_CUENTA = MyBase.Columns("DESC_CUENTA")
            Me.columnTIPO_CUENTA = MyBase.Columns("TIPO_CUENTA")
            Me.columnCUENTA_DESTINO = MyBase.Columns("CUENTA_DESTINO")
            Me.columnCUENTA_ENLACE = MyBase.Columns("CUENTA_ENLACE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_CUENTA = New Global.System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnAÑO = New Global.System.Data.DataColumn("AÑO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAÑO)
            Me.columnDESC_CUENTA = New Global.System.Data.DataColumn("DESC_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_CUENTA)
            Me.columnTIPO_CUENTA = New Global.System.Data.DataColumn("TIPO_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CUENTA)
            Me.columnCUENTA_DESTINO = New Global.System.Data.DataColumn("CUENTA_DESTINO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUENTA_DESTINO)
            Me.columnCUENTA_ENLACE = New Global.System.Data.DataColumn("CUENTA_ENLACE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUENTA_ENLACE)
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
            Me.columnAÑO.AllowDBNull = false
            Me.columnAÑO.MaxLength = 4
            Me.columnDESC_CUENTA.MaxLength = 60
            Me.columnTIPO_CUENTA.MaxLength = 1
            Me.columnCUENTA_DESTINO.MaxLength = 8
            Me.columnCUENTA_ENLACE.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_M_AUTOMATICASRow() As REPORTE_M_AUTOMATICASRow
            Return CType(Me.NewRow,REPORTE_M_AUTOMATICASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_M_AUTOMATICASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_M_AUTOMATICASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_M_AUTOMATICASRowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_M_AUTOMATICASRowChanged(Me, New REPORTE_M_AUTOMATICASRowChangeEvent(CType(e.Row,REPORTE_M_AUTOMATICASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_M_AUTOMATICASRowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_M_AUTOMATICASRowChanging(Me, New REPORTE_M_AUTOMATICASRowChangeEvent(CType(e.Row,REPORTE_M_AUTOMATICASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_M_AUTOMATICASRowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_M_AUTOMATICASRowDeleted(Me, New REPORTE_M_AUTOMATICASRowChangeEvent(CType(e.Row,REPORTE_M_AUTOMATICASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_M_AUTOMATICASRowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_M_AUTOMATICASRowDeleting(Me, New REPORTE_M_AUTOMATICASRowChangeEvent(CType(e.Row,REPORTE_M_AUTOMATICASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_M_AUTOMATICASRow(ByVal row As REPORTE_M_AUTOMATICASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As REPORTE_MAESTROS = New REPORTE_MAESTROS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_M_AUTOMATICASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_M_CUENTASDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_CUENTA As Global.System.Data.DataColumn
        
        Private columnAÑO As Global.System.Data.DataColumn
        
        Private columnDESC_CUENTA As Global.System.Data.DataColumn
        
        Private columnTIPO_CUENTA As Global.System.Data.DataColumn
        
        Private columnSTATUS_ANA As Global.System.Data.DataColumn
        
        Private columnNIVEL As Global.System.Data.DataColumn
        
        Private columnSTATUS_CC As Global.System.Data.DataColumn
        
        Private columnSTATUS_C As Global.System.Data.DataColumn
        
        Private columnSTATUS_P As Global.System.Data.DataColumn
        
        Private columnSTATUS_SUBNIVEL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_M_CUENTAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AÑOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAÑO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_ANAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_ANA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NIVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_CCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_CC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_PColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_SUBNIVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_SUBNIVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_M_CUENTASRow
            Get
                Return CType(Me.Rows(index),REPORTE_M_CUENTASRow)
            End Get
        End Property
        
        Public Event REPORTE_M_CUENTASRowChanging As REPORTE_M_CUENTASRowChangeEventHandler
        
        Public Event REPORTE_M_CUENTASRowChanged As REPORTE_M_CUENTASRowChangeEventHandler
        
        Public Event REPORTE_M_CUENTASRowDeleting As REPORTE_M_CUENTASRowChangeEventHandler
        
        Public Event REPORTE_M_CUENTASRowDeleted As REPORTE_M_CUENTASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_M_CUENTASRow(ByVal row As REPORTE_M_CUENTASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_M_CUENTASRow(ByVal COD_CUENTA As String, ByVal AÑO As String, ByVal DESC_CUENTA As String, ByVal TIPO_CUENTA As String, ByVal STATUS_ANA As String, ByVal NIVEL As String, ByVal STATUS_CC As String, ByVal STATUS_C As String, ByVal STATUS_P As String, ByVal STATUS_SUBNIVEL As String) As REPORTE_M_CUENTASRow
            Dim rowREPORTE_M_CUENTASRow As REPORTE_M_CUENTASRow = CType(Me.NewRow,REPORTE_M_CUENTASRow)
            Dim columnValuesArray() As Object = New Object() {COD_CUENTA, AÑO, DESC_CUENTA, TIPO_CUENTA, STATUS_ANA, NIVEL, STATUS_CC, STATUS_C, STATUS_P, STATUS_SUBNIVEL}
            rowREPORTE_M_CUENTASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_M_CUENTASRow)
            Return rowREPORTE_M_CUENTASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOD_CUENTAAÑO(ByVal COD_CUENTA As String, ByVal AÑO As String) As REPORTE_M_CUENTASRow
            Return CType(Me.Rows.Find(New Object() {COD_CUENTA, AÑO}),REPORTE_M_CUENTASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_M_CUENTASDataTable = CType(MyBase.Clone,REPORTE_M_CUENTASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_M_CUENTASDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
            Me.columnAÑO = MyBase.Columns("AÑO")
            Me.columnDESC_CUENTA = MyBase.Columns("DESC_CUENTA")
            Me.columnTIPO_CUENTA = MyBase.Columns("TIPO_CUENTA")
            Me.columnSTATUS_ANA = MyBase.Columns("STATUS_ANA")
            Me.columnNIVEL = MyBase.Columns("NIVEL")
            Me.columnSTATUS_CC = MyBase.Columns("STATUS_CC")
            Me.columnSTATUS_C = MyBase.Columns("STATUS_C")
            Me.columnSTATUS_P = MyBase.Columns("STATUS_P")
            Me.columnSTATUS_SUBNIVEL = MyBase.Columns("STATUS_SUBNIVEL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_CUENTA = New Global.System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnAÑO = New Global.System.Data.DataColumn("AÑO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAÑO)
            Me.columnDESC_CUENTA = New Global.System.Data.DataColumn("DESC_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_CUENTA)
            Me.columnTIPO_CUENTA = New Global.System.Data.DataColumn("TIPO_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CUENTA)
            Me.columnSTATUS_ANA = New Global.System.Data.DataColumn("STATUS_ANA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_ANA)
            Me.columnNIVEL = New Global.System.Data.DataColumn("NIVEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIVEL)
            Me.columnSTATUS_CC = New Global.System.Data.DataColumn("STATUS_CC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_CC)
            Me.columnSTATUS_C = New Global.System.Data.DataColumn("STATUS_C", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_C)
            Me.columnSTATUS_P = New Global.System.Data.DataColumn("STATUS_P", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_P)
            Me.columnSTATUS_SUBNIVEL = New Global.System.Data.DataColumn("STATUS_SUBNIVEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_SUBNIVEL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_CUENTA, Me.columnAÑO}, true))
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
            Me.columnAÑO.AllowDBNull = false
            Me.columnAÑO.MaxLength = 4
            Me.columnDESC_CUENTA.MaxLength = 60
            Me.columnTIPO_CUENTA.MaxLength = 1
            Me.columnSTATUS_ANA.ReadOnly = true
            Me.columnSTATUS_ANA.MaxLength = 1
            Me.columnNIVEL.MaxLength = 1
            Me.columnSTATUS_CC.ReadOnly = true
            Me.columnSTATUS_CC.MaxLength = 1
            Me.columnSTATUS_C.ReadOnly = true
            Me.columnSTATUS_C.MaxLength = 1
            Me.columnSTATUS_P.ReadOnly = true
            Me.columnSTATUS_P.MaxLength = 1
            Me.columnSTATUS_SUBNIVEL.ReadOnly = true
            Me.columnSTATUS_SUBNIVEL.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_M_CUENTASRow() As REPORTE_M_CUENTASRow
            Return CType(Me.NewRow,REPORTE_M_CUENTASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_M_CUENTASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_M_CUENTASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_M_CUENTASRowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_M_CUENTASRowChanged(Me, New REPORTE_M_CUENTASRowChangeEvent(CType(e.Row,REPORTE_M_CUENTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_M_CUENTASRowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_M_CUENTASRowChanging(Me, New REPORTE_M_CUENTASRowChangeEvent(CType(e.Row,REPORTE_M_CUENTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_M_CUENTASRowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_M_CUENTASRowDeleted(Me, New REPORTE_M_CUENTASRowChangeEvent(CType(e.Row,REPORTE_M_CUENTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_M_CUENTASRowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_M_CUENTASRowDeleting(Me, New REPORTE_M_CUENTASRowChangeEvent(CType(e.Row,REPORTE_M_CUENTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_M_CUENTASRow(ByVal row As REPORTE_M_CUENTASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As REPORTE_MAESTROS = New REPORTE_MAESTROS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_M_CUENTASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CUADRE_AUTOMATICADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_CUENTA As Global.System.Data.DataColumn
        
        Private columnDESC_CUENTA As Global.System.Data.DataColumn
        
        Private columnTIPO_CUENTA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CUADRE_AUTOMATICA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CUADRE_AUTOMATICARow
            Get
                Return CType(Me.Rows(index),CUADRE_AUTOMATICARow)
            End Get
        End Property
        
        Public Event CUADRE_AUTOMATICARowChanging As CUADRE_AUTOMATICARowChangeEventHandler
        
        Public Event CUADRE_AUTOMATICARowChanged As CUADRE_AUTOMATICARowChangeEventHandler
        
        Public Event CUADRE_AUTOMATICARowDeleting As CUADRE_AUTOMATICARowChangeEventHandler
        
        Public Event CUADRE_AUTOMATICARowDeleted As CUADRE_AUTOMATICARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCUADRE_AUTOMATICARow(ByVal row As CUADRE_AUTOMATICARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCUADRE_AUTOMATICARow(ByVal COD_CUENTA As String, ByVal DESC_CUENTA As String, ByVal TIPO_CUENTA As String) As CUADRE_AUTOMATICARow
            Dim rowCUADRE_AUTOMATICARow As CUADRE_AUTOMATICARow = CType(Me.NewRow,CUADRE_AUTOMATICARow)
            Dim columnValuesArray() As Object = New Object() {COD_CUENTA, DESC_CUENTA, TIPO_CUENTA}
            rowCUADRE_AUTOMATICARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCUADRE_AUTOMATICARow)
            Return rowCUADRE_AUTOMATICARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CUADRE_AUTOMATICADataTable = CType(MyBase.Clone,CUADRE_AUTOMATICADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CUADRE_AUTOMATICADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
            Me.columnDESC_CUENTA = MyBase.Columns("DESC_CUENTA")
            Me.columnTIPO_CUENTA = MyBase.Columns("TIPO_CUENTA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_CUENTA = New Global.System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnDESC_CUENTA = New Global.System.Data.DataColumn("DESC_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_CUENTA)
            Me.columnTIPO_CUENTA = New Global.System.Data.DataColumn("TIPO_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CUENTA)
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
            Me.columnDESC_CUENTA.MaxLength = 60
            Me.columnTIPO_CUENTA.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCUADRE_AUTOMATICARow() As CUADRE_AUTOMATICARow
            Return CType(Me.NewRow,CUADRE_AUTOMATICARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CUADRE_AUTOMATICARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CUADRE_AUTOMATICARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CUADRE_AUTOMATICARowChangedEvent) Is Nothing) Then
                RaiseEvent CUADRE_AUTOMATICARowChanged(Me, New CUADRE_AUTOMATICARowChangeEvent(CType(e.Row,CUADRE_AUTOMATICARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CUADRE_AUTOMATICARowChangingEvent) Is Nothing) Then
                RaiseEvent CUADRE_AUTOMATICARowChanging(Me, New CUADRE_AUTOMATICARowChangeEvent(CType(e.Row,CUADRE_AUTOMATICARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CUADRE_AUTOMATICARowDeletedEvent) Is Nothing) Then
                RaiseEvent CUADRE_AUTOMATICARowDeleted(Me, New CUADRE_AUTOMATICARowChangeEvent(CType(e.Row,CUADRE_AUTOMATICARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CUADRE_AUTOMATICARowDeletingEvent) Is Nothing) Then
                RaiseEvent CUADRE_AUTOMATICARowDeleting(Me, New CUADRE_AUTOMATICARowChangeEvent(CType(e.Row,CUADRE_AUTOMATICARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCUADRE_AUTOMATICARow(ByVal row As CUADRE_AUTOMATICARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As REPORTE_MAESTROS = New REPORTE_MAESTROS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CUADRE_AUTOMATICADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_M_AUTOMATICASRow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_M_AUTOMATICAS As REPORTE_M_AUTOMATICASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_M_AUTOMATICAS = CType(Me.Table,REPORTE_M_AUTOMATICASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_M_AUTOMATICAS.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_M_AUTOMATICAS.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AÑO() As String
            Get
                Return CType(Me(Me.tableREPORTE_M_AUTOMATICAS.AÑOColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_M_AUTOMATICAS.AÑOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_CUENTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_M_AUTOMATICAS.DESC_CUENTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_CUENTA' de la tabla 'REPORTE_M_AUTOMATICAS' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_M_AUTOMATICAS.DESC_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CUENTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_M_AUTOMATICAS.TIPO_CUENTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_CUENTA' de la tabla 'REPORTE_M_AUTOMATICAS' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_M_AUTOMATICAS.TIPO_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUENTA_DESTINO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_M_AUTOMATICAS.CUENTA_DESTINOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CUENTA_DESTINO' de la tabla 'REPORTE_M_AUTOMATICAS' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_M_AUTOMATICAS.CUENTA_DESTINOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUENTA_ENLACE() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_M_AUTOMATICAS.CUENTA_ENLACEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CUENTA_ENLACE' de la tabla 'REPORTE_M_AUTOMATICAS' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_M_AUTOMATICAS.CUENTA_ENLACEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_CUENTANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_M_AUTOMATICAS.DESC_CUENTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_CUENTANull()
            Me(Me.tableREPORTE_M_AUTOMATICAS.DESC_CUENTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CUENTANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_M_AUTOMATICAS.TIPO_CUENTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CUENTANull()
            Me(Me.tableREPORTE_M_AUTOMATICAS.TIPO_CUENTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUENTA_DESTINONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_M_AUTOMATICAS.CUENTA_DESTINOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUENTA_DESTINONull()
            Me(Me.tableREPORTE_M_AUTOMATICAS.CUENTA_DESTINOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUENTA_ENLACENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_M_AUTOMATICAS.CUENTA_ENLACEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUENTA_ENLACENull()
            Me(Me.tableREPORTE_M_AUTOMATICAS.CUENTA_ENLACEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_M_CUENTASRow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_M_CUENTAS As REPORTE_M_CUENTASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_M_CUENTAS = CType(Me.Table,REPORTE_M_CUENTASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_M_CUENTAS.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_M_CUENTAS.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AÑO() As String
            Get
                Return CType(Me(Me.tableREPORTE_M_CUENTAS.AÑOColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_M_CUENTAS.AÑOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_CUENTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_M_CUENTAS.DESC_CUENTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_CUENTA' de la tabla 'REPORTE_M_CUENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_M_CUENTAS.DESC_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CUENTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_M_CUENTAS.TIPO_CUENTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_CUENTA' de la tabla 'REPORTE_M_CUENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_M_CUENTAS.TIPO_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_ANA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_M_CUENTAS.STATUS_ANAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_ANA' de la tabla 'REPORTE_M_CUENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_M_CUENTAS.STATUS_ANAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NIVEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_M_CUENTAS.NIVELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NIVEL' de la tabla 'REPORTE_M_CUENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_M_CUENTAS.NIVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_CC() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_M_CUENTAS.STATUS_CCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_CC' de la tabla 'REPORTE_M_CUENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_M_CUENTAS.STATUS_CCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_C() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_M_CUENTAS.STATUS_CColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_C' de la tabla 'REPORTE_M_CUENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_M_CUENTAS.STATUS_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_P() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_M_CUENTAS.STATUS_PColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_P' de la tabla 'REPORTE_M_CUENTAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_M_CUENTAS.STATUS_PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_SUBNIVEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_M_CUENTAS.STATUS_SUBNIVELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_SUBNIVEL' de la tabla 'REPORTE_M_CUENTAS' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_M_CUENTAS.STATUS_SUBNIVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_CUENTANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_M_CUENTAS.DESC_CUENTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_CUENTANull()
            Me(Me.tableREPORTE_M_CUENTAS.DESC_CUENTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CUENTANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_M_CUENTAS.TIPO_CUENTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CUENTANull()
            Me(Me.tableREPORTE_M_CUENTAS.TIPO_CUENTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_ANANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_M_CUENTAS.STATUS_ANAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_ANANull()
            Me(Me.tableREPORTE_M_CUENTAS.STATUS_ANAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNIVELNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_M_CUENTAS.NIVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNIVELNull()
            Me(Me.tableREPORTE_M_CUENTAS.NIVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_CCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_M_CUENTAS.STATUS_CCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_CCNull()
            Me(Me.tableREPORTE_M_CUENTAS.STATUS_CCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_CNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_M_CUENTAS.STATUS_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_CNull()
            Me(Me.tableREPORTE_M_CUENTAS.STATUS_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_PNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_M_CUENTAS.STATUS_PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_PNull()
            Me(Me.tableREPORTE_M_CUENTAS.STATUS_PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_SUBNIVELNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_M_CUENTAS.STATUS_SUBNIVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_SUBNIVELNull()
            Me(Me.tableREPORTE_M_CUENTAS.STATUS_SUBNIVELColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CUADRE_AUTOMATICARow
        Inherits Global.System.Data.DataRow
        
        Private tableCUADRE_AUTOMATICA As CUADRE_AUTOMATICADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCUADRE_AUTOMATICA = CType(Me.Table,CUADRE_AUTOMATICADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableCUADRE_AUTOMATICA.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableCUADRE_AUTOMATICA.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_CUENTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCUADRE_AUTOMATICA.DESC_CUENTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_CUENTA' de la tabla 'CUADRE_AUTOMATICA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUADRE_AUTOMATICA.DESC_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CUENTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCUADRE_AUTOMATICA.TIPO_CUENTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_CUENTA' de la tabla 'CUADRE_AUTOMATICA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCUADRE_AUTOMATICA.TIPO_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_CUENTANull() As Boolean
            Return Me.IsNull(Me.tableCUADRE_AUTOMATICA.DESC_CUENTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_CUENTANull()
            Me(Me.tableCUADRE_AUTOMATICA.DESC_CUENTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CUENTANull() As Boolean
            Return Me.IsNull(Me.tableCUADRE_AUTOMATICA.TIPO_CUENTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CUENTANull()
            Me(Me.tableCUADRE_AUTOMATICA.TIPO_CUENTAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_M_AUTOMATICASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_M_AUTOMATICASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_M_AUTOMATICASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_M_AUTOMATICASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_M_CUENTASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_M_CUENTASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_M_CUENTASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_M_CUENTASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CUADRE_AUTOMATICARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CUADRE_AUTOMATICARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CUADRE_AUTOMATICARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CUADRE_AUTOMATICARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace REPORTE_MAESTROSTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_M_AUTOMATICASTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_M_AUTOMATICAS"
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            tableMapping.ColumnMappings.Add("AÑO", "AÑO")
            tableMapping.ColumnMappings.Add("DESC_CUENTA", "DESC_CUENTA")
            tableMapping.ColumnMappings.Add("TIPO_CUENTA", "TIPO_CUENTA")
            tableMapping.ColumnMappings.Add("CUENTA_DESTINO", "CUENTA_DESTINO")
            tableMapping.ColumnMappings.Add("CUENTA_ENLACE", "CUENTA_ENLACE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_M_AUTOMATICAS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As REPORTE_MAESTROS.REPORTE_M_AUTOMATICASDataTable, ByVal FE_AÑO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FE_AÑO As String) As REPORTE_MAESTROS.REPORTE_M_AUTOMATICASDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            Dim dataTable As REPORTE_MAESTROS.REPORTE_M_AUTOMATICASDataTable = New REPORTE_MAESTROS.REPORTE_M_AUTOMATICASDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_M_CUENTASTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_M_CUENTAS"
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            tableMapping.ColumnMappings.Add("AÑO", "AÑO")
            tableMapping.ColumnMappings.Add("DESC_CUENTA", "DESC_CUENTA")
            tableMapping.ColumnMappings.Add("TIPO_CUENTA", "TIPO_CUENTA")
            tableMapping.ColumnMappings.Add("STATUS_ANA", "STATUS_ANA")
            tableMapping.ColumnMappings.Add("NIVEL", "NIVEL")
            tableMapping.ColumnMappings.Add("STATUS_CC", "STATUS_CC")
            tableMapping.ColumnMappings.Add("STATUS_C", "STATUS_C")
            tableMapping.ColumnMappings.Add("STATUS_P", "STATUS_P")
            tableMapping.ColumnMappings.Add("STATUS_SUBNIVEL", "STATUS_SUBNIVEL")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_M_CUENTAS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUENTA1", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUENTA2", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As REPORTE_MAESTROS.REPORTE_M_CUENTASDataTable, ByVal FE_AÑO As String, ByVal CUENTA1 As String, ByVal CUENTA2 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (CUENTA1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CUENTA1,String)
            End If
            If (CUENTA2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(CUENTA2,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FE_AÑO As String, ByVal CUENTA1 As String, ByVal CUENTA2 As String) As REPORTE_MAESTROS.REPORTE_M_CUENTASDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (CUENTA1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CUENTA1,String)
            End If
            If (CUENTA2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(CUENTA2,String)
            End If
            Dim dataTable As REPORTE_MAESTROS.REPORTE_M_CUENTASDataTable = New REPORTE_MAESTROS.REPORTE_M_CUENTASDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CUADRE_AUTOMATICATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CUADRE_AUTOMATICA"
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            tableMapping.ColumnMappings.Add("DESC_CUENTA", "DESC_CUENTA")
            tableMapping.ColumnMappings.Add("TIPO_CUENTA", "TIPO_CUENTA")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.CUADRE_AUTOMATICA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As REPORTE_MAESTROS.CUADRE_AUTOMATICADataTable, ByVal FE_AÑO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FE_AÑO As String) As REPORTE_MAESTROS.CUADRE_AUTOMATICADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            Dim dataTable As REPORTE_MAESTROS.CUADRE_AUTOMATICADataTable = New REPORTE_MAESTROS.CUADRE_AUTOMATICADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace

'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.832
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("DT_REPORTES"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DT_REPORTES
    Inherits System.Data.DataSet
    
    Private tableREPORTE_CXC_CANC1 As REPORTE_CXC_CANC1DataTable
    
    Private tableREPORTE_CXC_PTES1 As REPORTE_CXC_PTES1DataTable
    
    Private tableREPORTE_CXC_PTES2 As REPORTE_CXC_PTES2DataTable
    
    Private tableREPORTE_CXC_PTES3 As REPORTE_CXC_PTES3DataTable
    
    Private tableREPORTE_CXP_CANC1 As REPORTE_CXP_CANC1DataTable
    
    Private tableREPORTE_CXP_PTES1 As REPORTE_CXP_PTES1DataTable
    
    Private tableREPORTE_CXP_PTES2 As REPORTE_CXP_PTES2DataTable
    
    Private tableREPORTE_CXP_PTES3 As REPORTE_CXP_PTES3DataTable
    
    Private tableREPORTE_DESCUADRE_COMP As REPORTE_DESCUADRE_COMPDataTable
    
    Private tableREPORTE_DESCUADRE_CXC As REPORTE_DESCUADRE_CXCDataTable
    
    Private tableREPORTE_DESCUADRE_CXP As REPORTE_DESCUADRE_CXPDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("REPORTE_CXC_CANC1")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXC_CANC1DataTable(ds.Tables("REPORTE_CXC_CANC1")))
            End If
            If (Not (ds.Tables("REPORTE_CXC_PTES1")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXC_PTES1DataTable(ds.Tables("REPORTE_CXC_PTES1")))
            End If
            If (Not (ds.Tables("REPORTE_CXC_PTES2")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXC_PTES2DataTable(ds.Tables("REPORTE_CXC_PTES2")))
            End If
            If (Not (ds.Tables("REPORTE_CXC_PTES3")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXC_PTES3DataTable(ds.Tables("REPORTE_CXC_PTES3")))
            End If
            If (Not (ds.Tables("REPORTE_CXP_CANC1")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXP_CANC1DataTable(ds.Tables("REPORTE_CXP_CANC1")))
            End If
            If (Not (ds.Tables("REPORTE_CXP_PTES1")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXP_PTES1DataTable(ds.Tables("REPORTE_CXP_PTES1")))
            End If
            If (Not (ds.Tables("REPORTE_CXP_PTES2")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXP_PTES2DataTable(ds.Tables("REPORTE_CXP_PTES2")))
            End If
            If (Not (ds.Tables("REPORTE_CXP_PTES3")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXP_PTES3DataTable(ds.Tables("REPORTE_CXP_PTES3")))
            End If
            If (Not (ds.Tables("REPORTE_DESCUADRE_COMP")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_DESCUADRE_COMPDataTable(ds.Tables("REPORTE_DESCUADRE_COMP")))
            End If
            If (Not (ds.Tables("REPORTE_DESCUADRE_CXC")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_DESCUADRE_CXCDataTable(ds.Tables("REPORTE_DESCUADRE_CXC")))
            End If
            If (Not (ds.Tables("REPORTE_DESCUADRE_CXP")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_DESCUADRE_CXPDataTable(ds.Tables("REPORTE_DESCUADRE_CXP")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_CXC_CANC1() As REPORTE_CXC_CANC1DataTable
        Get
            Return Me.tableREPORTE_CXC_CANC1
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_CXC_PTES1() As REPORTE_CXC_PTES1DataTable
        Get
            Return Me.tableREPORTE_CXC_PTES1
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_CXC_PTES2() As REPORTE_CXC_PTES2DataTable
        Get
            Return Me.tableREPORTE_CXC_PTES2
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_CXC_PTES3() As REPORTE_CXC_PTES3DataTable
        Get
            Return Me.tableREPORTE_CXC_PTES3
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_CXP_CANC1() As REPORTE_CXP_CANC1DataTable
        Get
            Return Me.tableREPORTE_CXP_CANC1
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_CXP_PTES1() As REPORTE_CXP_PTES1DataTable
        Get
            Return Me.tableREPORTE_CXP_PTES1
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_CXP_PTES2() As REPORTE_CXP_PTES2DataTable
        Get
            Return Me.tableREPORTE_CXP_PTES2
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_CXP_PTES3() As REPORTE_CXP_PTES3DataTable
        Get
            Return Me.tableREPORTE_CXP_PTES3
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_DESCUADRE_COMP() As REPORTE_DESCUADRE_COMPDataTable
        Get
            Return Me.tableREPORTE_DESCUADRE_COMP
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_DESCUADRE_CXC() As REPORTE_DESCUADRE_CXCDataTable
        Get
            Return Me.tableREPORTE_DESCUADRE_CXC
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_DESCUADRE_CXP() As REPORTE_DESCUADRE_CXPDataTable
        Get
            Return Me.tableREPORTE_DESCUADRE_CXP
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As DT_REPORTES = CType(MyBase.Clone,DT_REPORTES)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("REPORTE_CXC_CANC1")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXC_CANC1DataTable(ds.Tables("REPORTE_CXC_CANC1")))
            End If
            If (Not (ds.Tables("REPORTE_CXC_PTES1")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXC_PTES1DataTable(ds.Tables("REPORTE_CXC_PTES1")))
            End If
            If (Not (ds.Tables("REPORTE_CXC_PTES2")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXC_PTES2DataTable(ds.Tables("REPORTE_CXC_PTES2")))
            End If
            If (Not (ds.Tables("REPORTE_CXC_PTES3")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXC_PTES3DataTable(ds.Tables("REPORTE_CXC_PTES3")))
            End If
            If (Not (ds.Tables("REPORTE_CXP_CANC1")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXP_CANC1DataTable(ds.Tables("REPORTE_CXP_CANC1")))
            End If
            If (Not (ds.Tables("REPORTE_CXP_PTES1")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXP_PTES1DataTable(ds.Tables("REPORTE_CXP_PTES1")))
            End If
            If (Not (ds.Tables("REPORTE_CXP_PTES2")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXP_PTES2DataTable(ds.Tables("REPORTE_CXP_PTES2")))
            End If
            If (Not (ds.Tables("REPORTE_CXP_PTES3")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CXP_PTES3DataTable(ds.Tables("REPORTE_CXP_PTES3")))
            End If
            If (Not (ds.Tables("REPORTE_DESCUADRE_COMP")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_DESCUADRE_COMPDataTable(ds.Tables("REPORTE_DESCUADRE_COMP")))
            End If
            If (Not (ds.Tables("REPORTE_DESCUADRE_CXC")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_DESCUADRE_CXCDataTable(ds.Tables("REPORTE_DESCUADRE_CXC")))
            End If
            If (Not (ds.Tables("REPORTE_DESCUADRE_CXP")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_DESCUADRE_CXPDataTable(ds.Tables("REPORTE_DESCUADRE_CXP")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableREPORTE_CXC_CANC1 = CType(MyBase.Tables("REPORTE_CXC_CANC1"),REPORTE_CXC_CANC1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_CXC_CANC1) Is Nothing) Then
                Me.tableREPORTE_CXC_CANC1.InitVars
            End If
        End If
        Me.tableREPORTE_CXC_PTES1 = CType(MyBase.Tables("REPORTE_CXC_PTES1"),REPORTE_CXC_PTES1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_CXC_PTES1) Is Nothing) Then
                Me.tableREPORTE_CXC_PTES1.InitVars
            End If
        End If
        Me.tableREPORTE_CXC_PTES2 = CType(MyBase.Tables("REPORTE_CXC_PTES2"),REPORTE_CXC_PTES2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_CXC_PTES2) Is Nothing) Then
                Me.tableREPORTE_CXC_PTES2.InitVars
            End If
        End If
        Me.tableREPORTE_CXC_PTES3 = CType(MyBase.Tables("REPORTE_CXC_PTES3"),REPORTE_CXC_PTES3DataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_CXC_PTES3) Is Nothing) Then
                Me.tableREPORTE_CXC_PTES3.InitVars
            End If
        End If
        Me.tableREPORTE_CXP_CANC1 = CType(MyBase.Tables("REPORTE_CXP_CANC1"),REPORTE_CXP_CANC1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_CXP_CANC1) Is Nothing) Then
                Me.tableREPORTE_CXP_CANC1.InitVars
            End If
        End If
        Me.tableREPORTE_CXP_PTES1 = CType(MyBase.Tables("REPORTE_CXP_PTES1"),REPORTE_CXP_PTES1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_CXP_PTES1) Is Nothing) Then
                Me.tableREPORTE_CXP_PTES1.InitVars
            End If
        End If
        Me.tableREPORTE_CXP_PTES2 = CType(MyBase.Tables("REPORTE_CXP_PTES2"),REPORTE_CXP_PTES2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_CXP_PTES2) Is Nothing) Then
                Me.tableREPORTE_CXP_PTES2.InitVars
            End If
        End If
        Me.tableREPORTE_CXP_PTES3 = CType(MyBase.Tables("REPORTE_CXP_PTES3"),REPORTE_CXP_PTES3DataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_CXP_PTES3) Is Nothing) Then
                Me.tableREPORTE_CXP_PTES3.InitVars
            End If
        End If
        Me.tableREPORTE_DESCUADRE_COMP = CType(MyBase.Tables("REPORTE_DESCUADRE_COMP"),REPORTE_DESCUADRE_COMPDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_DESCUADRE_COMP) Is Nothing) Then
                Me.tableREPORTE_DESCUADRE_COMP.InitVars
            End If
        End If
        Me.tableREPORTE_DESCUADRE_CXC = CType(MyBase.Tables("REPORTE_DESCUADRE_CXC"),REPORTE_DESCUADRE_CXCDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_DESCUADRE_CXC) Is Nothing) Then
                Me.tableREPORTE_DESCUADRE_CXC.InitVars
            End If
        End If
        Me.tableREPORTE_DESCUADRE_CXP = CType(MyBase.Tables("REPORTE_DESCUADRE_CXP"),REPORTE_DESCUADRE_CXPDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_DESCUADRE_CXP) Is Nothing) Then
                Me.tableREPORTE_DESCUADRE_CXP.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DT_REPORTES"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DT_REPORTES.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableREPORTE_CXC_CANC1 = New REPORTE_CXC_CANC1DataTable
        MyBase.Tables.Add(Me.tableREPORTE_CXC_CANC1)
        Me.tableREPORTE_CXC_PTES1 = New REPORTE_CXC_PTES1DataTable
        MyBase.Tables.Add(Me.tableREPORTE_CXC_PTES1)
        Me.tableREPORTE_CXC_PTES2 = New REPORTE_CXC_PTES2DataTable
        MyBase.Tables.Add(Me.tableREPORTE_CXC_PTES2)
        Me.tableREPORTE_CXC_PTES3 = New REPORTE_CXC_PTES3DataTable
        MyBase.Tables.Add(Me.tableREPORTE_CXC_PTES3)
        Me.tableREPORTE_CXP_CANC1 = New REPORTE_CXP_CANC1DataTable
        MyBase.Tables.Add(Me.tableREPORTE_CXP_CANC1)
        Me.tableREPORTE_CXP_PTES1 = New REPORTE_CXP_PTES1DataTable
        MyBase.Tables.Add(Me.tableREPORTE_CXP_PTES1)
        Me.tableREPORTE_CXP_PTES2 = New REPORTE_CXP_PTES2DataTable
        MyBase.Tables.Add(Me.tableREPORTE_CXP_PTES2)
        Me.tableREPORTE_CXP_PTES3 = New REPORTE_CXP_PTES3DataTable
        MyBase.Tables.Add(Me.tableREPORTE_CXP_PTES3)
        Me.tableREPORTE_DESCUADRE_COMP = New REPORTE_DESCUADRE_COMPDataTable
        MyBase.Tables.Add(Me.tableREPORTE_DESCUADRE_COMP)
        Me.tableREPORTE_DESCUADRE_CXC = New REPORTE_DESCUADRE_CXCDataTable
        MyBase.Tables.Add(Me.tableREPORTE_DESCUADRE_CXC)
        Me.tableREPORTE_DESCUADRE_CXP = New REPORTE_DESCUADRE_CXPDataTable
        MyBase.Tables.Add(Me.tableREPORTE_DESCUADRE_CXP)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_CXC_CANC1() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_CXC_PTES1() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_CXC_PTES2() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_CXC_PTES3() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_CXP_CANC1() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_CXP_PTES1() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_CXP_PTES2() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_CXP_PTES3() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_DESCUADRE_COMP() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_DESCUADRE_CXC() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_DESCUADRE_CXP() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DT_REPORTES = New DT_REPORTES
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub REPORTE_CXC_CANC1RowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_CXC_CANC1RowChangeEvent)
    
    Public Delegate Sub REPORTE_CXC_PTES1RowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_CXC_PTES1RowChangeEvent)
    
    Public Delegate Sub REPORTE_CXC_PTES2RowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_CXC_PTES2RowChangeEvent)
    
    Public Delegate Sub REPORTE_CXC_PTES3RowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_CXC_PTES3RowChangeEvent)
    
    Public Delegate Sub REPORTE_CXP_CANC1RowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_CXP_CANC1RowChangeEvent)
    
    Public Delegate Sub REPORTE_CXP_PTES1RowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_CXP_PTES1RowChangeEvent)
    
    Public Delegate Sub REPORTE_CXP_PTES2RowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_CXP_PTES2RowChangeEvent)
    
    Public Delegate Sub REPORTE_CXP_PTES3RowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_CXP_PTES3RowChangeEvent)
    
    Public Delegate Sub REPORTE_DESCUADRE_COMPRowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_DESCUADRE_COMPRowChangeEvent)
    
    Public Delegate Sub REPORTE_DESCUADRE_CXCRowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_DESCUADRE_CXCRowChangeEvent)
    
    Public Delegate Sub REPORTE_DESCUADRE_CXPRowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_DESCUADRE_CXPRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_CXC_CANC1DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_SUCURSAL As System.Data.DataColumn
        
        Private columnCOD_DOC As System.Data.DataColumn
        
        Private columnCOD_PER As System.Data.DataColumn
        
        Private columnFE_AÑO As System.Data.DataColumn
        
        Private columnNRO_DOC As System.Data.DataColumn
        
        Private columnFE_MES As System.Data.DataColumn
        
        Private columnCOD_BANCO As System.Data.DataColumn
        
        Private columnCOD_MP As System.Data.DataColumn
        
        Private columnNRO_MP As System.Data.DataColumn
        
        Private columnNRO_DOC_PER As System.Data.DataColumn
        
        Private columnFECHA_DOC As System.Data.DataColumn
        
        Private columnCOD_D_H As System.Data.DataColumn
        
        Private columnCOD_MONEDA As System.Data.DataColumn
        
        Private columnTIPO_CAMBIO As System.Data.DataColumn
        
        Private columnIMP_DOC As System.Data.DataColumn
        
        Private columnTIPO_OPE As System.Data.DataColumn
        
        Private columndesc_mp As System.Data.DataColumn
        
        Private columnDESC_SUCURSAL As System.Data.DataColumn
        
        Private columnDESC_PER As System.Data.DataColumn
        
        Private columnDesc_moneda As System.Data.DataColumn
        
        Private columndesc_doc As System.Data.DataColumn
        
        Private columndesc_corta As System.Data.DataColumn
        
        Private columnCOD_AUX As System.Data.DataColumn
        
        Private columnCOD_COMP As System.Data.DataColumn
        
        Private columnNRO_COMP As System.Data.DataColumn
        
        Private columnCOD_CUENTA As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_CXC_CANC1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_SUCURSALColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_SUCURSAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_AÑOColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_AÑO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_MESColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_MES
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_BANCOColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_BANCO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MPColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_MP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_MPColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_MP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_D_HColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_D_H
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MONEDAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_MONEDA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CAMBIOColumn() As System.Data.DataColumn
            Get
                Return Me.columnTIPO_CAMBIO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_OPEColumn() As System.Data.DataColumn
            Get
                Return Me.columnTIPO_OPE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property desc_mpColumn() As System.Data.DataColumn
            Get
                Return Me.columndesc_mp
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_SUCURSALColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_SUCURSAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Desc_monedaColumn() As System.Data.DataColumn
            Get
                Return Me.columnDesc_moneda
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property desc_docColumn() As System.Data.DataColumn
            Get
                Return Me.columndesc_doc
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property desc_cortaColumn() As System.Data.DataColumn
            Get
                Return Me.columndesc_corta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_CXC_CANC1Row
            Get
                Return CType(Me.Rows(index),REPORTE_CXC_CANC1Row)
            End Get
        End Property
        
        Public Event REPORTE_CXC_CANC1RowChanging As REPORTE_CXC_CANC1RowChangeEventHandler
        
        Public Event REPORTE_CXC_CANC1RowChanged As REPORTE_CXC_CANC1RowChangeEventHandler
        
        Public Event REPORTE_CXC_CANC1RowDeleting As REPORTE_CXC_CANC1RowChangeEventHandler
        
        Public Event REPORTE_CXC_CANC1RowDeleted As REPORTE_CXC_CANC1RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_CXC_CANC1Row(ByVal row As REPORTE_CXC_CANC1Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_CXC_CANC1Row( _
                    ByVal COD_SUCURSAL As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal COD_PER As String,  _
                    ByVal FE_AÑO As String,  _
                    ByVal NRO_DOC As String,  _
                    ByVal FE_MES As String,  _
                    ByVal COD_BANCO As String,  _
                    ByVal COD_MP As String,  _
                    ByVal NRO_MP As String,  _
                    ByVal NRO_DOC_PER As String,  _
                    ByVal FECHA_DOC As Date,  _
                    ByVal COD_D_H As String,  _
                    ByVal COD_MONEDA As String,  _
                    ByVal TIPO_CAMBIO As Decimal,  _
                    ByVal IMP_DOC As Decimal,  _
                    ByVal TIPO_OPE As String,  _
                    ByVal desc_mp As String,  _
                    ByVal DESC_SUCURSAL As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal Desc_moneda As String,  _
                    ByVal desc_doc As String,  _
                    ByVal desc_corta As String,  _
                    ByVal COD_AUX As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal COD_CUENTA As String) As REPORTE_CXC_CANC1Row
            Dim rowREPORTE_CXC_CANC1Row As REPORTE_CXC_CANC1Row = CType(Me.NewRow,REPORTE_CXC_CANC1Row)
            rowREPORTE_CXC_CANC1Row.ItemArray = New Object() {COD_SUCURSAL, COD_DOC, COD_PER, FE_AÑO, NRO_DOC, FE_MES, COD_BANCO, COD_MP, NRO_MP, NRO_DOC_PER, FECHA_DOC, COD_D_H, COD_MONEDA, TIPO_CAMBIO, IMP_DOC, TIPO_OPE, desc_mp, DESC_SUCURSAL, DESC_PER, Desc_moneda, desc_doc, desc_corta, COD_AUX, COD_COMP, NRO_COMP, COD_CUENTA}
            Me.Rows.Add(rowREPORTE_CXC_CANC1Row)
            Return rowREPORTE_CXC_CANC1Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As REPORTE_CXC_CANC1DataTable = CType(MyBase.Clone,REPORTE_CXC_CANC1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New REPORTE_CXC_CANC1DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_SUCURSAL = MyBase.Columns("COD_SUCURSAL")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnFE_AÑO = MyBase.Columns("FE_AÑO")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnFE_MES = MyBase.Columns("FE_MES")
            Me.columnCOD_BANCO = MyBase.Columns("COD_BANCO")
            Me.columnCOD_MP = MyBase.Columns("COD_MP")
            Me.columnNRO_MP = MyBase.Columns("NRO_MP")
            Me.columnNRO_DOC_PER = MyBase.Columns("NRO_DOC_PER")
            Me.columnFECHA_DOC = MyBase.Columns("FECHA_DOC")
            Me.columnCOD_D_H = MyBase.Columns("COD_D_H")
            Me.columnCOD_MONEDA = MyBase.Columns("COD_MONEDA")
            Me.columnTIPO_CAMBIO = MyBase.Columns("TIPO_CAMBIO")
            Me.columnIMP_DOC = MyBase.Columns("IMP_DOC")
            Me.columnTIPO_OPE = MyBase.Columns("TIPO_OPE")
            Me.columndesc_mp = MyBase.Columns("desc_mp")
            Me.columnDESC_SUCURSAL = MyBase.Columns("DESC_SUCURSAL")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnDesc_moneda = MyBase.Columns("Desc_moneda")
            Me.columndesc_doc = MyBase.Columns("desc_doc")
            Me.columndesc_corta = MyBase.Columns("desc_corta")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_SUCURSAL = New System.Data.DataColumn("COD_SUCURSAL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_SUCURSAL)
            Me.columnCOD_DOC = New System.Data.DataColumn("COD_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnCOD_PER = New System.Data.DataColumn("COD_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnFE_AÑO = New System.Data.DataColumn("FE_AÑO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_AÑO)
            Me.columnNRO_DOC = New System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnFE_MES = New System.Data.DataColumn("FE_MES", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_MES)
            Me.columnCOD_BANCO = New System.Data.DataColumn("COD_BANCO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_BANCO)
            Me.columnCOD_MP = New System.Data.DataColumn("COD_MP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MP)
            Me.columnNRO_MP = New System.Data.DataColumn("NRO_MP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_MP)
            Me.columnNRO_DOC_PER = New System.Data.DataColumn("NRO_DOC_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC_PER)
            Me.columnFECHA_DOC = New System.Data.DataColumn("FECHA_DOC", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DOC)
            Me.columnCOD_D_H = New System.Data.DataColumn("COD_D_H", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_D_H)
            Me.columnCOD_MONEDA = New System.Data.DataColumn("COD_MONEDA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MONEDA)
            Me.columnTIPO_CAMBIO = New System.Data.DataColumn("TIPO_CAMBIO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CAMBIO)
            Me.columnIMP_DOC = New System.Data.DataColumn("IMP_DOC", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_DOC)
            Me.columnTIPO_OPE = New System.Data.DataColumn("TIPO_OPE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_OPE)
            Me.columndesc_mp = New System.Data.DataColumn("desc_mp", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_mp)
            Me.columnDESC_SUCURSAL = New System.Data.DataColumn("DESC_SUCURSAL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_SUCURSAL)
            Me.columnDESC_PER = New System.Data.DataColumn("DESC_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnDesc_moneda = New System.Data.DataColumn("Desc_moneda", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesc_moneda)
            Me.columndesc_doc = New System.Data.DataColumn("desc_doc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_doc)
            Me.columndesc_corta = New System.Data.DataColumn("desc_corta", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_corta)
            Me.columnCOD_AUX = New System.Data.DataColumn("COD_AUX", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnCOD_COMP = New System.Data.DataColumn("COD_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnNRO_COMP = New System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnCOD_CUENTA = New System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnCOD_SUCURSAL.AllowDBNull = false
            Me.columnCOD_SUCURSAL.MaxLength = 2
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnFE_AÑO.MaxLength = 4
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 15
            Me.columnFE_MES.MaxLength = 2
            Me.columnCOD_BANCO.MaxLength = 4
            Me.columnCOD_MP.MaxLength = 3
            Me.columnNRO_MP.MaxLength = 20
            Me.columnNRO_DOC_PER.AllowDBNull = false
            Me.columnNRO_DOC_PER.MaxLength = 20
            Me.columnCOD_D_H.MaxLength = 1
            Me.columnCOD_MONEDA.MaxLength = 1
            Me.columnTIPO_OPE.MaxLength = 2
            Me.columndesc_mp.MaxLength = 40
            Me.columnDESC_SUCURSAL.MaxLength = 60
            Me.columnDESC_PER.MaxLength = 60
            Me.columnDesc_moneda.MaxLength = 20
            Me.columndesc_doc.AllowDBNull = false
            Me.columndesc_doc.MaxLength = 30
            Me.columndesc_corta.MaxLength = 15
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_CXC_CANC1Row() As REPORTE_CXC_CANC1Row
            Return CType(Me.NewRow,REPORTE_CXC_CANC1Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New REPORTE_CXC_CANC1Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(REPORTE_CXC_CANC1Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_CXC_CANC1RowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_CANC1RowChanged(Me, New REPORTE_CXC_CANC1RowChangeEvent(CType(e.Row,REPORTE_CXC_CANC1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_CXC_CANC1RowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_CANC1RowChanging(Me, New REPORTE_CXC_CANC1RowChangeEvent(CType(e.Row,REPORTE_CXC_CANC1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_CXC_CANC1RowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_CANC1RowDeleted(Me, New REPORTE_CXC_CANC1RowChangeEvent(CType(e.Row,REPORTE_CXC_CANC1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_CXC_CANC1RowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_CANC1RowDeleting(Me, New REPORTE_CXC_CANC1RowChangeEvent(CType(e.Row,REPORTE_CXC_CANC1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_CXC_CANC1Row(ByVal row As REPORTE_CXC_CANC1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REPORTES = New DT_REPORTES
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_CXC_CANC1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_CXC_PTES1DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSUC As System.Data.DataColumn
        
        Private columnSUCURSAL As System.Data.DataColumn
        
        Private columnCOD_DOC As System.Data.DataColumn
        
        Private columnDOC As System.Data.DataColumn
        
        Private columnNRO_DOC As System.Data.DataColumn
        
        Private columnCOD_PER As System.Data.DataColumn
        
        Private columnDESC_PER As System.Data.DataColumn
        
        Private columnRUC As System.Data.DataColumn
        
        Private columnFE_DOC As System.Data.DataColumn
        
        Private columnFE_VEN As System.Data.DataColumn
        
        Private columnIMP_INI As System.Data.DataColumn
        
        Private columnIMP_DOC As System.Data.DataColumn
        
        Private columnMON As System.Data.DataColumn
        
        Private columnDESC_MON As System.Data.DataColumn
        
        Private columnDESC_MONEDA As System.Data.DataColumn
        
        Private columnCOD_AUX As System.Data.DataColumn
        
        Private columnCOD_COMP As System.Data.DataColumn
        
        Private columnNRO_COMP As System.Data.DataColumn
        
        Private columnCOD_CUENTA As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_CXC_PTES1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCColumn() As System.Data.DataColumn
            Get
                Return Me.columnSUC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCURSALColumn() As System.Data.DataColumn
            Get
                Return Me.columnSUCURSAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnDOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUCColumn() As System.Data.DataColumn
            Get
                Return Me.columnRUC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_VENColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_VEN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_INIColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_INI
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONColumn() As System.Data.DataColumn
            Get
                Return Me.columnMON
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_MON
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONEDAColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_MONEDA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_CXC_PTES1Row
            Get
                Return CType(Me.Rows(index),REPORTE_CXC_PTES1Row)
            End Get
        End Property
        
        Public Event REPORTE_CXC_PTES1RowChanging As REPORTE_CXC_PTES1RowChangeEventHandler
        
        Public Event REPORTE_CXC_PTES1RowChanged As REPORTE_CXC_PTES1RowChangeEventHandler
        
        Public Event REPORTE_CXC_PTES1RowDeleting As REPORTE_CXC_PTES1RowChangeEventHandler
        
        Public Event REPORTE_CXC_PTES1RowDeleted As REPORTE_CXC_PTES1RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_CXC_PTES1Row(ByVal row As REPORTE_CXC_PTES1Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_CXC_PTES1Row( _
                    ByVal SUC As String,  _
                    ByVal SUCURSAL As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal DOC As String,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal RUC As String,  _
                    ByVal FE_DOC As Date,  _
                    ByVal FE_VEN As Date,  _
                    ByVal IMP_INI As Decimal,  _
                    ByVal IMP_DOC As Decimal,  _
                    ByVal MON As String,  _
                    ByVal DESC_MON As String,  _
                    ByVal DESC_MONEDA As String,  _
                    ByVal COD_AUX As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal COD_CUENTA As String) As REPORTE_CXC_PTES1Row
            Dim rowREPORTE_CXC_PTES1Row As REPORTE_CXC_PTES1Row = CType(Me.NewRow,REPORTE_CXC_PTES1Row)
            rowREPORTE_CXC_PTES1Row.ItemArray = New Object() {SUC, SUCURSAL, COD_DOC, DOC, NRO_DOC, COD_PER, DESC_PER, RUC, FE_DOC, FE_VEN, IMP_INI, IMP_DOC, MON, DESC_MON, DESC_MONEDA, COD_AUX, COD_COMP, NRO_COMP, COD_CUENTA}
            Me.Rows.Add(rowREPORTE_CXC_PTES1Row)
            Return rowREPORTE_CXC_PTES1Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As REPORTE_CXC_PTES1DataTable = CType(MyBase.Clone,REPORTE_CXC_PTES1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New REPORTE_CXC_PTES1DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSUC = MyBase.Columns("SUC")
            Me.columnSUCURSAL = MyBase.Columns("SUCURSAL")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnDOC = MyBase.Columns("DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnRUC = MyBase.Columns("RUC")
            Me.columnFE_DOC = MyBase.Columns("FE_DOC")
            Me.columnFE_VEN = MyBase.Columns("FE_VEN")
            Me.columnIMP_INI = MyBase.Columns("IMP_INI")
            Me.columnIMP_DOC = MyBase.Columns("IMP_DOC")
            Me.columnMON = MyBase.Columns("MON")
            Me.columnDESC_MON = MyBase.Columns("DESC_MON")
            Me.columnDESC_MONEDA = MyBase.Columns("DESC_MONEDA")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSUC = New System.Data.DataColumn("SUC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUC)
            Me.columnSUCURSAL = New System.Data.DataColumn("SUCURSAL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUCURSAL)
            Me.columnCOD_DOC = New System.Data.DataColumn("COD_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnDOC = New System.Data.DataColumn("DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOC)
            Me.columnNRO_DOC = New System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_PER = New System.Data.DataColumn("COD_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New System.Data.DataColumn("DESC_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnRUC = New System.Data.DataColumn("RUC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUC)
            Me.columnFE_DOC = New System.Data.DataColumn("FE_DOC", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_DOC)
            Me.columnFE_VEN = New System.Data.DataColumn("FE_VEN", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_VEN)
            Me.columnIMP_INI = New System.Data.DataColumn("IMP_INI", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_INI)
            Me.columnIMP_DOC = New System.Data.DataColumn("IMP_DOC", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_DOC)
            Me.columnMON = New System.Data.DataColumn("MON", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMON)
            Me.columnDESC_MON = New System.Data.DataColumn("DESC_MON", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MON)
            Me.columnDESC_MONEDA = New System.Data.DataColumn("DESC_MONEDA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MONEDA)
            Me.columnCOD_AUX = New System.Data.DataColumn("COD_AUX", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnCOD_COMP = New System.Data.DataColumn("COD_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnNRO_COMP = New System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnCOD_CUENTA = New System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnSUC.AllowDBNull = false
            Me.columnSUC.MaxLength = 2
            Me.columnSUCURSAL.MaxLength = 60
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnDOC.AllowDBNull = false
            Me.columnDOC.MaxLength = 30
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 15
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnRUC.MaxLength = 20
            Me.columnIMP_INI.ReadOnly = true
            Me.columnIMP_DOC.ReadOnly = true
            Me.columnMON.MaxLength = 1
            Me.columnDESC_MON.MaxLength = 15
            Me.columnDESC_MONEDA.MaxLength = 20
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_CXC_PTES1Row() As REPORTE_CXC_PTES1Row
            Return CType(Me.NewRow,REPORTE_CXC_PTES1Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New REPORTE_CXC_PTES1Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(REPORTE_CXC_PTES1Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_CXC_PTES1RowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_PTES1RowChanged(Me, New REPORTE_CXC_PTES1RowChangeEvent(CType(e.Row,REPORTE_CXC_PTES1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_CXC_PTES1RowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_PTES1RowChanging(Me, New REPORTE_CXC_PTES1RowChangeEvent(CType(e.Row,REPORTE_CXC_PTES1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_CXC_PTES1RowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_PTES1RowDeleted(Me, New REPORTE_CXC_PTES1RowChangeEvent(CType(e.Row,REPORTE_CXC_PTES1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_CXC_PTES1RowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_PTES1RowDeleting(Me, New REPORTE_CXC_PTES1RowChangeEvent(CType(e.Row,REPORTE_CXC_PTES1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_CXC_PTES1Row(ByVal row As REPORTE_CXC_PTES1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REPORTES = New DT_REPORTES
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_CXC_PTES1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_CXC_PTES2DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSUC As System.Data.DataColumn
        
        Private columnSUCURSAL As System.Data.DataColumn
        
        Private columnCOD_DOC As System.Data.DataColumn
        
        Private columnDOC As System.Data.DataColumn
        
        Private columnNRO_DOC As System.Data.DataColumn
        
        Private columnCOD_PER As System.Data.DataColumn
        
        Private columnDESC_PER As System.Data.DataColumn
        
        Private columnRUC As System.Data.DataColumn
        
        Private columnFE_DOC As System.Data.DataColumn
        
        Private columnFE_VEN As System.Data.DataColumn
        
        Private columnIMP_INI As System.Data.DataColumn
        
        Private columnIMP_DOC As System.Data.DataColumn
        
        Private columnMON As System.Data.DataColumn
        
        Private columnDESC_MON As System.Data.DataColumn
        
        Private columnDESC_MONEDA As System.Data.DataColumn
        
        Private columnCOD_AUX As System.Data.DataColumn
        
        Private columnCOD_COMP As System.Data.DataColumn
        
        Private columnNRO_COMP As System.Data.DataColumn
        
        Private columnCOD_CUENTA As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_CXC_PTES2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCColumn() As System.Data.DataColumn
            Get
                Return Me.columnSUC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCURSALColumn() As System.Data.DataColumn
            Get
                Return Me.columnSUCURSAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnDOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUCColumn() As System.Data.DataColumn
            Get
                Return Me.columnRUC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_VENColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_VEN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_INIColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_INI
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONColumn() As System.Data.DataColumn
            Get
                Return Me.columnMON
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_MON
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONEDAColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_MONEDA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_CXC_PTES2Row
            Get
                Return CType(Me.Rows(index),REPORTE_CXC_PTES2Row)
            End Get
        End Property
        
        Public Event REPORTE_CXC_PTES2RowChanging As REPORTE_CXC_PTES2RowChangeEventHandler
        
        Public Event REPORTE_CXC_PTES2RowChanged As REPORTE_CXC_PTES2RowChangeEventHandler
        
        Public Event REPORTE_CXC_PTES2RowDeleting As REPORTE_CXC_PTES2RowChangeEventHandler
        
        Public Event REPORTE_CXC_PTES2RowDeleted As REPORTE_CXC_PTES2RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_CXC_PTES2Row(ByVal row As REPORTE_CXC_PTES2Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_CXC_PTES2Row( _
                    ByVal SUC As String,  _
                    ByVal SUCURSAL As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal DOC As String,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal RUC As String,  _
                    ByVal FE_DOC As Date,  _
                    ByVal FE_VEN As Date,  _
                    ByVal IMP_INI As Decimal,  _
                    ByVal IMP_DOC As Decimal,  _
                    ByVal MON As String,  _
                    ByVal DESC_MON As String,  _
                    ByVal DESC_MONEDA As String,  _
                    ByVal COD_AUX As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal COD_CUENTA As String) As REPORTE_CXC_PTES2Row
            Dim rowREPORTE_CXC_PTES2Row As REPORTE_CXC_PTES2Row = CType(Me.NewRow,REPORTE_CXC_PTES2Row)
            rowREPORTE_CXC_PTES2Row.ItemArray = New Object() {SUC, SUCURSAL, COD_DOC, DOC, NRO_DOC, COD_PER, DESC_PER, RUC, FE_DOC, FE_VEN, IMP_INI, IMP_DOC, MON, DESC_MON, DESC_MONEDA, COD_AUX, COD_COMP, NRO_COMP, COD_CUENTA}
            Me.Rows.Add(rowREPORTE_CXC_PTES2Row)
            Return rowREPORTE_CXC_PTES2Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As REPORTE_CXC_PTES2DataTable = CType(MyBase.Clone,REPORTE_CXC_PTES2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New REPORTE_CXC_PTES2DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSUC = MyBase.Columns("SUC")
            Me.columnSUCURSAL = MyBase.Columns("SUCURSAL")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnDOC = MyBase.Columns("DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnRUC = MyBase.Columns("RUC")
            Me.columnFE_DOC = MyBase.Columns("FE_DOC")
            Me.columnFE_VEN = MyBase.Columns("FE_VEN")
            Me.columnIMP_INI = MyBase.Columns("IMP_INI")
            Me.columnIMP_DOC = MyBase.Columns("IMP_DOC")
            Me.columnMON = MyBase.Columns("MON")
            Me.columnDESC_MON = MyBase.Columns("DESC_MON")
            Me.columnDESC_MONEDA = MyBase.Columns("DESC_MONEDA")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSUC = New System.Data.DataColumn("SUC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUC)
            Me.columnSUCURSAL = New System.Data.DataColumn("SUCURSAL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUCURSAL)
            Me.columnCOD_DOC = New System.Data.DataColumn("COD_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnDOC = New System.Data.DataColumn("DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOC)
            Me.columnNRO_DOC = New System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_PER = New System.Data.DataColumn("COD_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New System.Data.DataColumn("DESC_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnRUC = New System.Data.DataColumn("RUC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUC)
            Me.columnFE_DOC = New System.Data.DataColumn("FE_DOC", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_DOC)
            Me.columnFE_VEN = New System.Data.DataColumn("FE_VEN", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_VEN)
            Me.columnIMP_INI = New System.Data.DataColumn("IMP_INI", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_INI)
            Me.columnIMP_DOC = New System.Data.DataColumn("IMP_DOC", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_DOC)
            Me.columnMON = New System.Data.DataColumn("MON", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMON)
            Me.columnDESC_MON = New System.Data.DataColumn("DESC_MON", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MON)
            Me.columnDESC_MONEDA = New System.Data.DataColumn("DESC_MONEDA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MONEDA)
            Me.columnCOD_AUX = New System.Data.DataColumn("COD_AUX", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnCOD_COMP = New System.Data.DataColumn("COD_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnNRO_COMP = New System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnCOD_CUENTA = New System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnSUC.AllowDBNull = false
            Me.columnSUC.MaxLength = 2
            Me.columnSUCURSAL.MaxLength = 60
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnDOC.AllowDBNull = false
            Me.columnDOC.MaxLength = 30
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 15
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnRUC.MaxLength = 20
            Me.columnIMP_INI.ReadOnly = true
            Me.columnIMP_DOC.ReadOnly = true
            Me.columnMON.MaxLength = 1
            Me.columnDESC_MON.MaxLength = 15
            Me.columnDESC_MONEDA.MaxLength = 20
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_CXC_PTES2Row() As REPORTE_CXC_PTES2Row
            Return CType(Me.NewRow,REPORTE_CXC_PTES2Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New REPORTE_CXC_PTES2Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(REPORTE_CXC_PTES2Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_CXC_PTES2RowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_PTES2RowChanged(Me, New REPORTE_CXC_PTES2RowChangeEvent(CType(e.Row,REPORTE_CXC_PTES2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_CXC_PTES2RowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_PTES2RowChanging(Me, New REPORTE_CXC_PTES2RowChangeEvent(CType(e.Row,REPORTE_CXC_PTES2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_CXC_PTES2RowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_PTES2RowDeleted(Me, New REPORTE_CXC_PTES2RowChangeEvent(CType(e.Row,REPORTE_CXC_PTES2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_CXC_PTES2RowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_PTES2RowDeleting(Me, New REPORTE_CXC_PTES2RowChangeEvent(CType(e.Row,REPORTE_CXC_PTES2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_CXC_PTES2Row(ByVal row As REPORTE_CXC_PTES2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REPORTES = New DT_REPORTES
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_CXC_PTES2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_CXC_PTES3DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSUC As System.Data.DataColumn
        
        Private columnSUCURSAL As System.Data.DataColumn
        
        Private columnCOD_DOC As System.Data.DataColumn
        
        Private columnDOC As System.Data.DataColumn
        
        Private columnNRO_DOC As System.Data.DataColumn
        
        Private columnCOD_PER As System.Data.DataColumn
        
        Private columnDESC_PER As System.Data.DataColumn
        
        Private columnRUC As System.Data.DataColumn
        
        Private columnFE_DOC As System.Data.DataColumn
        
        Private columnFE_VEN As System.Data.DataColumn
        
        Private columnIMP_INI As System.Data.DataColumn
        
        Private columnIMP_DOC As System.Data.DataColumn
        
        Private columnMON As System.Data.DataColumn
        
        Private columnDESC_MON As System.Data.DataColumn
        
        Private columnDESC_MONEDA As System.Data.DataColumn
        
        Private columnsoles As System.Data.DataColumn
        
        Private columndolares As System.Data.DataColumn
        
        Private columnCOD_AUX As System.Data.DataColumn
        
        Private columnCOD_COMP As System.Data.DataColumn
        
        Private columnNRO_COMP As System.Data.DataColumn
        
        Private columnCOD_CUENTA As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_CXC_PTES3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCColumn() As System.Data.DataColumn
            Get
                Return Me.columnSUC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCURSALColumn() As System.Data.DataColumn
            Get
                Return Me.columnSUCURSAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnDOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUCColumn() As System.Data.DataColumn
            Get
                Return Me.columnRUC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_VENColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_VEN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_INIColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_INI
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONColumn() As System.Data.DataColumn
            Get
                Return Me.columnMON
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_MON
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONEDAColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_MONEDA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property solesColumn() As System.Data.DataColumn
            Get
                Return Me.columnsoles
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dolaresColumn() As System.Data.DataColumn
            Get
                Return Me.columndolares
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_CXC_PTES3Row
            Get
                Return CType(Me.Rows(index),REPORTE_CXC_PTES3Row)
            End Get
        End Property
        
        Public Event REPORTE_CXC_PTES3RowChanging As REPORTE_CXC_PTES3RowChangeEventHandler
        
        Public Event REPORTE_CXC_PTES3RowChanged As REPORTE_CXC_PTES3RowChangeEventHandler
        
        Public Event REPORTE_CXC_PTES3RowDeleting As REPORTE_CXC_PTES3RowChangeEventHandler
        
        Public Event REPORTE_CXC_PTES3RowDeleted As REPORTE_CXC_PTES3RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_CXC_PTES3Row(ByVal row As REPORTE_CXC_PTES3Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_CXC_PTES3Row( _
                    ByVal SUC As String,  _
                    ByVal SUCURSAL As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal DOC As String,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal RUC As String,  _
                    ByVal FE_DOC As Date,  _
                    ByVal FE_VEN As Date,  _
                    ByVal IMP_INI As Decimal,  _
                    ByVal IMP_DOC As Decimal,  _
                    ByVal MON As String,  _
                    ByVal DESC_MON As String,  _
                    ByVal DESC_MONEDA As String,  _
                    ByVal soles As Decimal,  _
                    ByVal dolares As Decimal,  _
                    ByVal COD_AUX As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal COD_CUENTA As String) As REPORTE_CXC_PTES3Row
            Dim rowREPORTE_CXC_PTES3Row As REPORTE_CXC_PTES3Row = CType(Me.NewRow,REPORTE_CXC_PTES3Row)
            rowREPORTE_CXC_PTES3Row.ItemArray = New Object() {SUC, SUCURSAL, COD_DOC, DOC, NRO_DOC, COD_PER, DESC_PER, RUC, FE_DOC, FE_VEN, IMP_INI, IMP_DOC, MON, DESC_MON, DESC_MONEDA, soles, dolares, COD_AUX, COD_COMP, NRO_COMP, COD_CUENTA}
            Me.Rows.Add(rowREPORTE_CXC_PTES3Row)
            Return rowREPORTE_CXC_PTES3Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySUCCOD_DOCNRO_DOCCOD_PERRUCCOD_CUENTA(ByVal SUC As String, ByVal COD_DOC As String, ByVal NRO_DOC As String, ByVal COD_PER As String, ByVal RUC As String, ByVal COD_CUENTA As String) As REPORTE_CXC_PTES3Row
            Return CType(Me.Rows.Find(New Object() {SUC, COD_DOC, NRO_DOC, COD_PER, RUC, COD_CUENTA}),REPORTE_CXC_PTES3Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As REPORTE_CXC_PTES3DataTable = CType(MyBase.Clone,REPORTE_CXC_PTES3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New REPORTE_CXC_PTES3DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSUC = MyBase.Columns("SUC")
            Me.columnSUCURSAL = MyBase.Columns("SUCURSAL")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnDOC = MyBase.Columns("DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnRUC = MyBase.Columns("RUC")
            Me.columnFE_DOC = MyBase.Columns("FE_DOC")
            Me.columnFE_VEN = MyBase.Columns("FE_VEN")
            Me.columnIMP_INI = MyBase.Columns("IMP_INI")
            Me.columnIMP_DOC = MyBase.Columns("IMP_DOC")
            Me.columnMON = MyBase.Columns("MON")
            Me.columnDESC_MON = MyBase.Columns("DESC_MON")
            Me.columnDESC_MONEDA = MyBase.Columns("DESC_MONEDA")
            Me.columnsoles = MyBase.Columns("soles")
            Me.columndolares = MyBase.Columns("dolares")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSUC = New System.Data.DataColumn("SUC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUC)
            Me.columnSUCURSAL = New System.Data.DataColumn("SUCURSAL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUCURSAL)
            Me.columnCOD_DOC = New System.Data.DataColumn("COD_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnDOC = New System.Data.DataColumn("DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOC)
            Me.columnNRO_DOC = New System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_PER = New System.Data.DataColumn("COD_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New System.Data.DataColumn("DESC_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnRUC = New System.Data.DataColumn("RUC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUC)
            Me.columnFE_DOC = New System.Data.DataColumn("FE_DOC", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_DOC)
            Me.columnFE_VEN = New System.Data.DataColumn("FE_VEN", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_VEN)
            Me.columnIMP_INI = New System.Data.DataColumn("IMP_INI", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_INI)
            Me.columnIMP_DOC = New System.Data.DataColumn("IMP_DOC", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_DOC)
            Me.columnMON = New System.Data.DataColumn("MON", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMON)
            Me.columnDESC_MON = New System.Data.DataColumn("DESC_MON", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MON)
            Me.columnDESC_MONEDA = New System.Data.DataColumn("DESC_MONEDA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MONEDA)
            Me.columnsoles = New System.Data.DataColumn("soles", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsoles)
            Me.columndolares = New System.Data.DataColumn("dolares", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndolares)
            Me.columnCOD_AUX = New System.Data.DataColumn("COD_AUX", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnCOD_COMP = New System.Data.DataColumn("COD_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnNRO_COMP = New System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnCOD_CUENTA = New System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSUC, Me.columnCOD_DOC, Me.columnNRO_DOC, Me.columnCOD_PER, Me.columnRUC, Me.columnCOD_CUENTA}, true))
            Me.columnSUC.AllowDBNull = false
            Me.columnSUC.MaxLength = 2
            Me.columnSUCURSAL.MaxLength = 60
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnDOC.AllowDBNull = false
            Me.columnDOC.MaxLength = 30
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 15
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnRUC.AllowDBNull = false
            Me.columnRUC.MaxLength = 20
            Me.columnMON.MaxLength = 1
            Me.columnDESC_MON.MaxLength = 15
            Me.columnDESC_MONEDA.MaxLength = 20
            Me.columnsoles.ReadOnly = true
            Me.columndolares.ReadOnly = true
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_CXC_PTES3Row() As REPORTE_CXC_PTES3Row
            Return CType(Me.NewRow,REPORTE_CXC_PTES3Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New REPORTE_CXC_PTES3Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(REPORTE_CXC_PTES3Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_CXC_PTES3RowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_PTES3RowChanged(Me, New REPORTE_CXC_PTES3RowChangeEvent(CType(e.Row,REPORTE_CXC_PTES3Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_CXC_PTES3RowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_PTES3RowChanging(Me, New REPORTE_CXC_PTES3RowChangeEvent(CType(e.Row,REPORTE_CXC_PTES3Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_CXC_PTES3RowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_PTES3RowDeleted(Me, New REPORTE_CXC_PTES3RowChangeEvent(CType(e.Row,REPORTE_CXC_PTES3Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_CXC_PTES3RowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXC_PTES3RowDeleting(Me, New REPORTE_CXC_PTES3RowChangeEvent(CType(e.Row,REPORTE_CXC_PTES3Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_CXC_PTES3Row(ByVal row As REPORTE_CXC_PTES3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REPORTES = New DT_REPORTES
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_CXC_PTES3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_CXP_CANC1DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_SUCURSAL As System.Data.DataColumn
        
        Private columnCOD_DOC As System.Data.DataColumn
        
        Private columnCOD_PER As System.Data.DataColumn
        
        Private columnFE_AÑO As System.Data.DataColumn
        
        Private columnNRO_DOC As System.Data.DataColumn
        
        Private columnFE_MES As System.Data.DataColumn
        
        Private columnCOD_BANCO As System.Data.DataColumn
        
        Private columnCOD_MP As System.Data.DataColumn
        
        Private columnNRO_MP As System.Data.DataColumn
        
        Private columnNRO_DOC_PER As System.Data.DataColumn
        
        Private columnFECHA_DOC As System.Data.DataColumn
        
        Private columnCOD_D_H As System.Data.DataColumn
        
        Private columnCOD_MONEDA As System.Data.DataColumn
        
        Private columnTIPO_CAMBIO As System.Data.DataColumn
        
        Private columnIMP_DOC As System.Data.DataColumn
        
        Private columnTIPO_OPE As System.Data.DataColumn
        
        Private columndesc_mp As System.Data.DataColumn
        
        Private columnDESC_SUCURSAL As System.Data.DataColumn
        
        Private columnDESC_PER As System.Data.DataColumn
        
        Private columnDesc_moneda As System.Data.DataColumn
        
        Private columndesc_doc As System.Data.DataColumn
        
        Private columndesc_corta As System.Data.DataColumn
        
        Private columnCOD_AUX As System.Data.DataColumn
        
        Private columnCOD_COMP As System.Data.DataColumn
        
        Private columnNRO_COMP As System.Data.DataColumn
        
        Private columnCOD_CUENTA As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_CXP_CANC1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_SUCURSALColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_SUCURSAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_AÑOColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_AÑO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_MESColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_MES
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_BANCOColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_BANCO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MPColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_MP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_MPColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_MP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_D_HColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_D_H
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MONEDAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_MONEDA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CAMBIOColumn() As System.Data.DataColumn
            Get
                Return Me.columnTIPO_CAMBIO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_OPEColumn() As System.Data.DataColumn
            Get
                Return Me.columnTIPO_OPE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property desc_mpColumn() As System.Data.DataColumn
            Get
                Return Me.columndesc_mp
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_SUCURSALColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_SUCURSAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Desc_monedaColumn() As System.Data.DataColumn
            Get
                Return Me.columnDesc_moneda
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property desc_docColumn() As System.Data.DataColumn
            Get
                Return Me.columndesc_doc
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property desc_cortaColumn() As System.Data.DataColumn
            Get
                Return Me.columndesc_corta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_CXP_CANC1Row
            Get
                Return CType(Me.Rows(index),REPORTE_CXP_CANC1Row)
            End Get
        End Property
        
        Public Event REPORTE_CXP_CANC1RowChanging As REPORTE_CXP_CANC1RowChangeEventHandler
        
        Public Event REPORTE_CXP_CANC1RowChanged As REPORTE_CXP_CANC1RowChangeEventHandler
        
        Public Event REPORTE_CXP_CANC1RowDeleting As REPORTE_CXP_CANC1RowChangeEventHandler
        
        Public Event REPORTE_CXP_CANC1RowDeleted As REPORTE_CXP_CANC1RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_CXP_CANC1Row(ByVal row As REPORTE_CXP_CANC1Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_CXP_CANC1Row( _
                    ByVal COD_SUCURSAL As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal COD_PER As String,  _
                    ByVal FE_AÑO As String,  _
                    ByVal NRO_DOC As String,  _
                    ByVal FE_MES As String,  _
                    ByVal COD_BANCO As String,  _
                    ByVal COD_MP As String,  _
                    ByVal NRO_MP As String,  _
                    ByVal NRO_DOC_PER As String,  _
                    ByVal FECHA_DOC As Date,  _
                    ByVal COD_D_H As String,  _
                    ByVal COD_MONEDA As String,  _
                    ByVal TIPO_CAMBIO As Decimal,  _
                    ByVal IMP_DOC As Decimal,  _
                    ByVal TIPO_OPE As String,  _
                    ByVal desc_mp As String,  _
                    ByVal DESC_SUCURSAL As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal Desc_moneda As String,  _
                    ByVal desc_doc As String,  _
                    ByVal desc_corta As String,  _
                    ByVal COD_AUX As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal COD_CUENTA As String) As REPORTE_CXP_CANC1Row
            Dim rowREPORTE_CXP_CANC1Row As REPORTE_CXP_CANC1Row = CType(Me.NewRow,REPORTE_CXP_CANC1Row)
            rowREPORTE_CXP_CANC1Row.ItemArray = New Object() {COD_SUCURSAL, COD_DOC, COD_PER, FE_AÑO, NRO_DOC, FE_MES, COD_BANCO, COD_MP, NRO_MP, NRO_DOC_PER, FECHA_DOC, COD_D_H, COD_MONEDA, TIPO_CAMBIO, IMP_DOC, TIPO_OPE, desc_mp, DESC_SUCURSAL, DESC_PER, Desc_moneda, desc_doc, desc_corta, COD_AUX, COD_COMP, NRO_COMP, COD_CUENTA}
            Me.Rows.Add(rowREPORTE_CXP_CANC1Row)
            Return rowREPORTE_CXP_CANC1Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As REPORTE_CXP_CANC1DataTable = CType(MyBase.Clone,REPORTE_CXP_CANC1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New REPORTE_CXP_CANC1DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_SUCURSAL = MyBase.Columns("COD_SUCURSAL")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnFE_AÑO = MyBase.Columns("FE_AÑO")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnFE_MES = MyBase.Columns("FE_MES")
            Me.columnCOD_BANCO = MyBase.Columns("COD_BANCO")
            Me.columnCOD_MP = MyBase.Columns("COD_MP")
            Me.columnNRO_MP = MyBase.Columns("NRO_MP")
            Me.columnNRO_DOC_PER = MyBase.Columns("NRO_DOC_PER")
            Me.columnFECHA_DOC = MyBase.Columns("FECHA_DOC")
            Me.columnCOD_D_H = MyBase.Columns("COD_D_H")
            Me.columnCOD_MONEDA = MyBase.Columns("COD_MONEDA")
            Me.columnTIPO_CAMBIO = MyBase.Columns("TIPO_CAMBIO")
            Me.columnIMP_DOC = MyBase.Columns("IMP_DOC")
            Me.columnTIPO_OPE = MyBase.Columns("TIPO_OPE")
            Me.columndesc_mp = MyBase.Columns("desc_mp")
            Me.columnDESC_SUCURSAL = MyBase.Columns("DESC_SUCURSAL")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnDesc_moneda = MyBase.Columns("Desc_moneda")
            Me.columndesc_doc = MyBase.Columns("desc_doc")
            Me.columndesc_corta = MyBase.Columns("desc_corta")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_SUCURSAL = New System.Data.DataColumn("COD_SUCURSAL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_SUCURSAL)
            Me.columnCOD_DOC = New System.Data.DataColumn("COD_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnCOD_PER = New System.Data.DataColumn("COD_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnFE_AÑO = New System.Data.DataColumn("FE_AÑO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_AÑO)
            Me.columnNRO_DOC = New System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnFE_MES = New System.Data.DataColumn("FE_MES", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_MES)
            Me.columnCOD_BANCO = New System.Data.DataColumn("COD_BANCO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_BANCO)
            Me.columnCOD_MP = New System.Data.DataColumn("COD_MP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MP)
            Me.columnNRO_MP = New System.Data.DataColumn("NRO_MP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_MP)
            Me.columnNRO_DOC_PER = New System.Data.DataColumn("NRO_DOC_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC_PER)
            Me.columnFECHA_DOC = New System.Data.DataColumn("FECHA_DOC", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DOC)
            Me.columnCOD_D_H = New System.Data.DataColumn("COD_D_H", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_D_H)
            Me.columnCOD_MONEDA = New System.Data.DataColumn("COD_MONEDA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MONEDA)
            Me.columnTIPO_CAMBIO = New System.Data.DataColumn("TIPO_CAMBIO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CAMBIO)
            Me.columnIMP_DOC = New System.Data.DataColumn("IMP_DOC", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_DOC)
            Me.columnTIPO_OPE = New System.Data.DataColumn("TIPO_OPE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_OPE)
            Me.columndesc_mp = New System.Data.DataColumn("desc_mp", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_mp)
            Me.columnDESC_SUCURSAL = New System.Data.DataColumn("DESC_SUCURSAL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_SUCURSAL)
            Me.columnDESC_PER = New System.Data.DataColumn("DESC_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnDesc_moneda = New System.Data.DataColumn("Desc_moneda", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesc_moneda)
            Me.columndesc_doc = New System.Data.DataColumn("desc_doc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_doc)
            Me.columndesc_corta = New System.Data.DataColumn("desc_corta", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_corta)
            Me.columnCOD_AUX = New System.Data.DataColumn("COD_AUX", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnCOD_COMP = New System.Data.DataColumn("COD_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnNRO_COMP = New System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnCOD_CUENTA = New System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnCOD_SUCURSAL.AllowDBNull = false
            Me.columnCOD_SUCURSAL.MaxLength = 2
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnFE_AÑO.MaxLength = 4
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 20
            Me.columnFE_MES.MaxLength = 2
            Me.columnCOD_BANCO.MaxLength = 4
            Me.columnCOD_MP.MaxLength = 3
            Me.columnNRO_MP.MaxLength = 20
            Me.columnNRO_DOC_PER.AllowDBNull = false
            Me.columnNRO_DOC_PER.MaxLength = 20
            Me.columnCOD_D_H.MaxLength = 1
            Me.columnCOD_MONEDA.MaxLength = 1
            Me.columnTIPO_OPE.MaxLength = 2
            Me.columndesc_mp.MaxLength = 40
            Me.columnDESC_SUCURSAL.MaxLength = 60
            Me.columnDESC_PER.MaxLength = 60
            Me.columnDesc_moneda.MaxLength = 20
            Me.columndesc_doc.AllowDBNull = false
            Me.columndesc_doc.MaxLength = 30
            Me.columndesc_corta.MaxLength = 15
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_CXP_CANC1Row() As REPORTE_CXP_CANC1Row
            Return CType(Me.NewRow,REPORTE_CXP_CANC1Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New REPORTE_CXP_CANC1Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(REPORTE_CXP_CANC1Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_CXP_CANC1RowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_CANC1RowChanged(Me, New REPORTE_CXP_CANC1RowChangeEvent(CType(e.Row,REPORTE_CXP_CANC1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_CXP_CANC1RowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_CANC1RowChanging(Me, New REPORTE_CXP_CANC1RowChangeEvent(CType(e.Row,REPORTE_CXP_CANC1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_CXP_CANC1RowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_CANC1RowDeleted(Me, New REPORTE_CXP_CANC1RowChangeEvent(CType(e.Row,REPORTE_CXP_CANC1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_CXP_CANC1RowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_CANC1RowDeleting(Me, New REPORTE_CXP_CANC1RowChangeEvent(CType(e.Row,REPORTE_CXP_CANC1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_CXP_CANC1Row(ByVal row As REPORTE_CXP_CANC1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REPORTES = New DT_REPORTES
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_CXP_CANC1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_CXP_PTES1DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSUC As System.Data.DataColumn
        
        Private columnSUCURSAL As System.Data.DataColumn
        
        Private columnCOD_DOC As System.Data.DataColumn
        
        Private columnDOC As System.Data.DataColumn
        
        Private columnNRO_DOC As System.Data.DataColumn
        
        Private columnCOD_PER As System.Data.DataColumn
        
        Private columnDESC_PER As System.Data.DataColumn
        
        Private columnRUC As System.Data.DataColumn
        
        Private columnFE_DOC As System.Data.DataColumn
        
        Private columnFE_VEN As System.Data.DataColumn
        
        Private columnIMP_INI As System.Data.DataColumn
        
        Private columnIMP_DOC As System.Data.DataColumn
        
        Private columnMON As System.Data.DataColumn
        
        Private columnDESC_MON As System.Data.DataColumn
        
        Private columnDESC_MONEDA As System.Data.DataColumn
        
        Private columnCOD_AUX As System.Data.DataColumn
        
        Private columnCOD_COMP As System.Data.DataColumn
        
        Private columnNRO_COMP As System.Data.DataColumn
        
        Private columnCOD_CUENTA As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_CXP_PTES1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCColumn() As System.Data.DataColumn
            Get
                Return Me.columnSUC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCURSALColumn() As System.Data.DataColumn
            Get
                Return Me.columnSUCURSAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnDOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUCColumn() As System.Data.DataColumn
            Get
                Return Me.columnRUC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_VENColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_VEN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_INIColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_INI
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONColumn() As System.Data.DataColumn
            Get
                Return Me.columnMON
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_MON
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONEDAColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_MONEDA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_CXP_PTES1Row
            Get
                Return CType(Me.Rows(index),REPORTE_CXP_PTES1Row)
            End Get
        End Property
        
        Public Event REPORTE_CXP_PTES1RowChanging As REPORTE_CXP_PTES1RowChangeEventHandler
        
        Public Event REPORTE_CXP_PTES1RowChanged As REPORTE_CXP_PTES1RowChangeEventHandler
        
        Public Event REPORTE_CXP_PTES1RowDeleting As REPORTE_CXP_PTES1RowChangeEventHandler
        
        Public Event REPORTE_CXP_PTES1RowDeleted As REPORTE_CXP_PTES1RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_CXP_PTES1Row(ByVal row As REPORTE_CXP_PTES1Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_CXP_PTES1Row( _
                    ByVal SUC As String,  _
                    ByVal SUCURSAL As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal DOC As String,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal RUC As String,  _
                    ByVal FE_DOC As Date,  _
                    ByVal FE_VEN As Date,  _
                    ByVal IMP_INI As Decimal,  _
                    ByVal IMP_DOC As Decimal,  _
                    ByVal MON As String,  _
                    ByVal DESC_MON As String,  _
                    ByVal DESC_MONEDA As String,  _
                    ByVal COD_AUX As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal COD_CUENTA As String) As REPORTE_CXP_PTES1Row
            Dim rowREPORTE_CXP_PTES1Row As REPORTE_CXP_PTES1Row = CType(Me.NewRow,REPORTE_CXP_PTES1Row)
            rowREPORTE_CXP_PTES1Row.ItemArray = New Object() {SUC, SUCURSAL, COD_DOC, DOC, NRO_DOC, COD_PER, DESC_PER, RUC, FE_DOC, FE_VEN, IMP_INI, IMP_DOC, MON, DESC_MON, DESC_MONEDA, COD_AUX, COD_COMP, NRO_COMP, COD_CUENTA}
            Me.Rows.Add(rowREPORTE_CXP_PTES1Row)
            Return rowREPORTE_CXP_PTES1Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As REPORTE_CXP_PTES1DataTable = CType(MyBase.Clone,REPORTE_CXP_PTES1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New REPORTE_CXP_PTES1DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSUC = MyBase.Columns("SUC")
            Me.columnSUCURSAL = MyBase.Columns("SUCURSAL")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnDOC = MyBase.Columns("DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnRUC = MyBase.Columns("RUC")
            Me.columnFE_DOC = MyBase.Columns("FE_DOC")
            Me.columnFE_VEN = MyBase.Columns("FE_VEN")
            Me.columnIMP_INI = MyBase.Columns("IMP_INI")
            Me.columnIMP_DOC = MyBase.Columns("IMP_DOC")
            Me.columnMON = MyBase.Columns("MON")
            Me.columnDESC_MON = MyBase.Columns("DESC_MON")
            Me.columnDESC_MONEDA = MyBase.Columns("DESC_MONEDA")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSUC = New System.Data.DataColumn("SUC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUC)
            Me.columnSUCURSAL = New System.Data.DataColumn("SUCURSAL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUCURSAL)
            Me.columnCOD_DOC = New System.Data.DataColumn("COD_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnDOC = New System.Data.DataColumn("DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOC)
            Me.columnNRO_DOC = New System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_PER = New System.Data.DataColumn("COD_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New System.Data.DataColumn("DESC_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnRUC = New System.Data.DataColumn("RUC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUC)
            Me.columnFE_DOC = New System.Data.DataColumn("FE_DOC", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_DOC)
            Me.columnFE_VEN = New System.Data.DataColumn("FE_VEN", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_VEN)
            Me.columnIMP_INI = New System.Data.DataColumn("IMP_INI", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_INI)
            Me.columnIMP_DOC = New System.Data.DataColumn("IMP_DOC", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_DOC)
            Me.columnMON = New System.Data.DataColumn("MON", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMON)
            Me.columnDESC_MON = New System.Data.DataColumn("DESC_MON", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MON)
            Me.columnDESC_MONEDA = New System.Data.DataColumn("DESC_MONEDA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MONEDA)
            Me.columnCOD_AUX = New System.Data.DataColumn("COD_AUX", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnCOD_COMP = New System.Data.DataColumn("COD_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnNRO_COMP = New System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnCOD_CUENTA = New System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnSUC.AllowDBNull = false
            Me.columnSUC.MaxLength = 2
            Me.columnSUCURSAL.MaxLength = 60
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnDOC.AllowDBNull = false
            Me.columnDOC.MaxLength = 30
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 20
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnRUC.MaxLength = 20
            Me.columnIMP_INI.ReadOnly = true
            Me.columnIMP_DOC.ReadOnly = true
            Me.columnMON.MaxLength = 1
            Me.columnDESC_MON.MaxLength = 15
            Me.columnDESC_MONEDA.MaxLength = 20
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_CXP_PTES1Row() As REPORTE_CXP_PTES1Row
            Return CType(Me.NewRow,REPORTE_CXP_PTES1Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New REPORTE_CXP_PTES1Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(REPORTE_CXP_PTES1Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_CXP_PTES1RowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_PTES1RowChanged(Me, New REPORTE_CXP_PTES1RowChangeEvent(CType(e.Row,REPORTE_CXP_PTES1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_CXP_PTES1RowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_PTES1RowChanging(Me, New REPORTE_CXP_PTES1RowChangeEvent(CType(e.Row,REPORTE_CXP_PTES1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_CXP_PTES1RowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_PTES1RowDeleted(Me, New REPORTE_CXP_PTES1RowChangeEvent(CType(e.Row,REPORTE_CXP_PTES1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_CXP_PTES1RowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_PTES1RowDeleting(Me, New REPORTE_CXP_PTES1RowChangeEvent(CType(e.Row,REPORTE_CXP_PTES1Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_CXP_PTES1Row(ByVal row As REPORTE_CXP_PTES1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REPORTES = New DT_REPORTES
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_CXP_PTES1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_CXP_PTES2DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSUC As System.Data.DataColumn
        
        Private columnSUCURSAL As System.Data.DataColumn
        
        Private columnCOD_DOC As System.Data.DataColumn
        
        Private columnDOC As System.Data.DataColumn
        
        Private columnNRO_DOC As System.Data.DataColumn
        
        Private columnCOD_PER As System.Data.DataColumn
        
        Private columnDESC_PER As System.Data.DataColumn
        
        Private columnRUC As System.Data.DataColumn
        
        Private columnFE_DOC As System.Data.DataColumn
        
        Private columnFE_VEN As System.Data.DataColumn
        
        Private columnIMP_INI As System.Data.DataColumn
        
        Private columnIMP_DOC As System.Data.DataColumn
        
        Private columnMON As System.Data.DataColumn
        
        Private columnDESC_MON As System.Data.DataColumn
        
        Private columnDESC_MONEDA As System.Data.DataColumn
        
        Private columnCOD_AUX As System.Data.DataColumn
        
        Private columnCOD_COMP As System.Data.DataColumn
        
        Private columnNRO_COMP As System.Data.DataColumn
        
        Private columnCOD_CUENTA As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_CXP_PTES2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCColumn() As System.Data.DataColumn
            Get
                Return Me.columnSUC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCURSALColumn() As System.Data.DataColumn
            Get
                Return Me.columnSUCURSAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnDOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUCColumn() As System.Data.DataColumn
            Get
                Return Me.columnRUC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_VENColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_VEN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_INIColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_INI
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONColumn() As System.Data.DataColumn
            Get
                Return Me.columnMON
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_MON
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONEDAColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_MONEDA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_CXP_PTES2Row
            Get
                Return CType(Me.Rows(index),REPORTE_CXP_PTES2Row)
            End Get
        End Property
        
        Public Event REPORTE_CXP_PTES2RowChanging As REPORTE_CXP_PTES2RowChangeEventHandler
        
        Public Event REPORTE_CXP_PTES2RowChanged As REPORTE_CXP_PTES2RowChangeEventHandler
        
        Public Event REPORTE_CXP_PTES2RowDeleting As REPORTE_CXP_PTES2RowChangeEventHandler
        
        Public Event REPORTE_CXP_PTES2RowDeleted As REPORTE_CXP_PTES2RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_CXP_PTES2Row(ByVal row As REPORTE_CXP_PTES2Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_CXP_PTES2Row( _
                    ByVal SUC As String,  _
                    ByVal SUCURSAL As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal DOC As String,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal RUC As String,  _
                    ByVal FE_DOC As Date,  _
                    ByVal FE_VEN As Date,  _
                    ByVal IMP_INI As Decimal,  _
                    ByVal IMP_DOC As Decimal,  _
                    ByVal MON As String,  _
                    ByVal DESC_MON As String,  _
                    ByVal DESC_MONEDA As String,  _
                    ByVal COD_AUX As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal COD_CUENTA As String) As REPORTE_CXP_PTES2Row
            Dim rowREPORTE_CXP_PTES2Row As REPORTE_CXP_PTES2Row = CType(Me.NewRow,REPORTE_CXP_PTES2Row)
            rowREPORTE_CXP_PTES2Row.ItemArray = New Object() {SUC, SUCURSAL, COD_DOC, DOC, NRO_DOC, COD_PER, DESC_PER, RUC, FE_DOC, FE_VEN, IMP_INI, IMP_DOC, MON, DESC_MON, DESC_MONEDA, COD_AUX, COD_COMP, NRO_COMP, COD_CUENTA}
            Me.Rows.Add(rowREPORTE_CXP_PTES2Row)
            Return rowREPORTE_CXP_PTES2Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As REPORTE_CXP_PTES2DataTable = CType(MyBase.Clone,REPORTE_CXP_PTES2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New REPORTE_CXP_PTES2DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSUC = MyBase.Columns("SUC")
            Me.columnSUCURSAL = MyBase.Columns("SUCURSAL")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnDOC = MyBase.Columns("DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnRUC = MyBase.Columns("RUC")
            Me.columnFE_DOC = MyBase.Columns("FE_DOC")
            Me.columnFE_VEN = MyBase.Columns("FE_VEN")
            Me.columnIMP_INI = MyBase.Columns("IMP_INI")
            Me.columnIMP_DOC = MyBase.Columns("IMP_DOC")
            Me.columnMON = MyBase.Columns("MON")
            Me.columnDESC_MON = MyBase.Columns("DESC_MON")
            Me.columnDESC_MONEDA = MyBase.Columns("DESC_MONEDA")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSUC = New System.Data.DataColumn("SUC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUC)
            Me.columnSUCURSAL = New System.Data.DataColumn("SUCURSAL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUCURSAL)
            Me.columnCOD_DOC = New System.Data.DataColumn("COD_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnDOC = New System.Data.DataColumn("DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOC)
            Me.columnNRO_DOC = New System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_PER = New System.Data.DataColumn("COD_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New System.Data.DataColumn("DESC_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnRUC = New System.Data.DataColumn("RUC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUC)
            Me.columnFE_DOC = New System.Data.DataColumn("FE_DOC", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_DOC)
            Me.columnFE_VEN = New System.Data.DataColumn("FE_VEN", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_VEN)
            Me.columnIMP_INI = New System.Data.DataColumn("IMP_INI", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_INI)
            Me.columnIMP_DOC = New System.Data.DataColumn("IMP_DOC", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_DOC)
            Me.columnMON = New System.Data.DataColumn("MON", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMON)
            Me.columnDESC_MON = New System.Data.DataColumn("DESC_MON", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MON)
            Me.columnDESC_MONEDA = New System.Data.DataColumn("DESC_MONEDA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MONEDA)
            Me.columnCOD_AUX = New System.Data.DataColumn("COD_AUX", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnCOD_COMP = New System.Data.DataColumn("COD_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnNRO_COMP = New System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnCOD_CUENTA = New System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnSUC.AllowDBNull = false
            Me.columnSUC.MaxLength = 2
            Me.columnSUCURSAL.MaxLength = 60
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnDOC.AllowDBNull = false
            Me.columnDOC.MaxLength = 30
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 20
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnRUC.MaxLength = 20
            Me.columnIMP_INI.ReadOnly = true
            Me.columnIMP_DOC.ReadOnly = true
            Me.columnMON.MaxLength = 1
            Me.columnDESC_MON.MaxLength = 15
            Me.columnDESC_MONEDA.MaxLength = 20
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_CXP_PTES2Row() As REPORTE_CXP_PTES2Row
            Return CType(Me.NewRow,REPORTE_CXP_PTES2Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New REPORTE_CXP_PTES2Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(REPORTE_CXP_PTES2Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_CXP_PTES2RowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_PTES2RowChanged(Me, New REPORTE_CXP_PTES2RowChangeEvent(CType(e.Row,REPORTE_CXP_PTES2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_CXP_PTES2RowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_PTES2RowChanging(Me, New REPORTE_CXP_PTES2RowChangeEvent(CType(e.Row,REPORTE_CXP_PTES2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_CXP_PTES2RowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_PTES2RowDeleted(Me, New REPORTE_CXP_PTES2RowChangeEvent(CType(e.Row,REPORTE_CXP_PTES2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_CXP_PTES2RowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_PTES2RowDeleting(Me, New REPORTE_CXP_PTES2RowChangeEvent(CType(e.Row,REPORTE_CXP_PTES2Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_CXP_PTES2Row(ByVal row As REPORTE_CXP_PTES2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REPORTES = New DT_REPORTES
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_CXP_PTES2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_CXP_PTES3DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSUC As System.Data.DataColumn
        
        Private columnSUCURSAL As System.Data.DataColumn
        
        Private columnCOD_DOC As System.Data.DataColumn
        
        Private columnDOC As System.Data.DataColumn
        
        Private columnNRO_DOC As System.Data.DataColumn
        
        Private columnCOD_PER As System.Data.DataColumn
        
        Private columnDESC_PER As System.Data.DataColumn
        
        Private columnRUC As System.Data.DataColumn
        
        Private columnFE_DOC As System.Data.DataColumn
        
        Private columnFE_VEN As System.Data.DataColumn
        
        Private columnIMP_INI As System.Data.DataColumn
        
        Private columnIMP_DOC As System.Data.DataColumn
        
        Private columnMON As System.Data.DataColumn
        
        Private columnDESC_MON As System.Data.DataColumn
        
        Private columnDESC_MONEDA As System.Data.DataColumn
        
        Private columnsoles As System.Data.DataColumn
        
        Private columndolares As System.Data.DataColumn
        
        Private columnCOD_AUX As System.Data.DataColumn
        
        Private columnCOD_COMP As System.Data.DataColumn
        
        Private columnNRO_COMP As System.Data.DataColumn
        
        Private columnCOD_CUENTA As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_CXP_PTES3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCColumn() As System.Data.DataColumn
            Get
                Return Me.columnSUC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCURSALColumn() As System.Data.DataColumn
            Get
                Return Me.columnSUCURSAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnDOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RUCColumn() As System.Data.DataColumn
            Get
                Return Me.columnRUC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_VENColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_VEN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_INIColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_INI
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONColumn() As System.Data.DataColumn
            Get
                Return Me.columnMON
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_MON
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONEDAColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_MONEDA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property solesColumn() As System.Data.DataColumn
            Get
                Return Me.columnsoles
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dolaresColumn() As System.Data.DataColumn
            Get
                Return Me.columndolares
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_CXP_PTES3Row
            Get
                Return CType(Me.Rows(index),REPORTE_CXP_PTES3Row)
            End Get
        End Property
        
        Public Event REPORTE_CXP_PTES3RowChanging As REPORTE_CXP_PTES3RowChangeEventHandler
        
        Public Event REPORTE_CXP_PTES3RowChanged As REPORTE_CXP_PTES3RowChangeEventHandler
        
        Public Event REPORTE_CXP_PTES3RowDeleting As REPORTE_CXP_PTES3RowChangeEventHandler
        
        Public Event REPORTE_CXP_PTES3RowDeleted As REPORTE_CXP_PTES3RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_CXP_PTES3Row(ByVal row As REPORTE_CXP_PTES3Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_CXP_PTES3Row( _
                    ByVal SUC As String,  _
                    ByVal SUCURSAL As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal DOC As String,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal RUC As String,  _
                    ByVal FE_DOC As Date,  _
                    ByVal FE_VEN As Date,  _
                    ByVal IMP_INI As Decimal,  _
                    ByVal IMP_DOC As Decimal,  _
                    ByVal MON As String,  _
                    ByVal DESC_MON As String,  _
                    ByVal DESC_MONEDA As String,  _
                    ByVal soles As Decimal,  _
                    ByVal dolares As Decimal,  _
                    ByVal COD_AUX As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal COD_CUENTA As String) As REPORTE_CXP_PTES3Row
            Dim rowREPORTE_CXP_PTES3Row As REPORTE_CXP_PTES3Row = CType(Me.NewRow,REPORTE_CXP_PTES3Row)
            rowREPORTE_CXP_PTES3Row.ItemArray = New Object() {SUC, SUCURSAL, COD_DOC, DOC, NRO_DOC, COD_PER, DESC_PER, RUC, FE_DOC, FE_VEN, IMP_INI, IMP_DOC, MON, DESC_MON, DESC_MONEDA, soles, dolares, COD_AUX, COD_COMP, NRO_COMP, COD_CUENTA}
            Me.Rows.Add(rowREPORTE_CXP_PTES3Row)
            Return rowREPORTE_CXP_PTES3Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySUCCOD_DOCNRO_DOCCOD_PERRUCCOD_CUENTA(ByVal SUC As String, ByVal COD_DOC As String, ByVal NRO_DOC As String, ByVal COD_PER As String, ByVal RUC As String, ByVal COD_CUENTA As String) As REPORTE_CXP_PTES3Row
            Return CType(Me.Rows.Find(New Object() {SUC, COD_DOC, NRO_DOC, COD_PER, RUC, COD_CUENTA}),REPORTE_CXP_PTES3Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As REPORTE_CXP_PTES3DataTable = CType(MyBase.Clone,REPORTE_CXP_PTES3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New REPORTE_CXP_PTES3DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSUC = MyBase.Columns("SUC")
            Me.columnSUCURSAL = MyBase.Columns("SUCURSAL")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnDOC = MyBase.Columns("DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnRUC = MyBase.Columns("RUC")
            Me.columnFE_DOC = MyBase.Columns("FE_DOC")
            Me.columnFE_VEN = MyBase.Columns("FE_VEN")
            Me.columnIMP_INI = MyBase.Columns("IMP_INI")
            Me.columnIMP_DOC = MyBase.Columns("IMP_DOC")
            Me.columnMON = MyBase.Columns("MON")
            Me.columnDESC_MON = MyBase.Columns("DESC_MON")
            Me.columnDESC_MONEDA = MyBase.Columns("DESC_MONEDA")
            Me.columnsoles = MyBase.Columns("soles")
            Me.columndolares = MyBase.Columns("dolares")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSUC = New System.Data.DataColumn("SUC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUC)
            Me.columnSUCURSAL = New System.Data.DataColumn("SUCURSAL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUCURSAL)
            Me.columnCOD_DOC = New System.Data.DataColumn("COD_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnDOC = New System.Data.DataColumn("DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOC)
            Me.columnNRO_DOC = New System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_PER = New System.Data.DataColumn("COD_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New System.Data.DataColumn("DESC_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnRUC = New System.Data.DataColumn("RUC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRUC)
            Me.columnFE_DOC = New System.Data.DataColumn("FE_DOC", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_DOC)
            Me.columnFE_VEN = New System.Data.DataColumn("FE_VEN", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_VEN)
            Me.columnIMP_INI = New System.Data.DataColumn("IMP_INI", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_INI)
            Me.columnIMP_DOC = New System.Data.DataColumn("IMP_DOC", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_DOC)
            Me.columnMON = New System.Data.DataColumn("MON", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMON)
            Me.columnDESC_MON = New System.Data.DataColumn("DESC_MON", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MON)
            Me.columnDESC_MONEDA = New System.Data.DataColumn("DESC_MONEDA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MONEDA)
            Me.columnsoles = New System.Data.DataColumn("soles", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsoles)
            Me.columndolares = New System.Data.DataColumn("dolares", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndolares)
            Me.columnCOD_AUX = New System.Data.DataColumn("COD_AUX", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnCOD_COMP = New System.Data.DataColumn("COD_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnNRO_COMP = New System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnCOD_CUENTA = New System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSUC, Me.columnCOD_DOC, Me.columnNRO_DOC, Me.columnCOD_PER, Me.columnRUC, Me.columnCOD_CUENTA}, true))
            Me.columnSUC.AllowDBNull = false
            Me.columnSUC.MaxLength = 2
            Me.columnSUCURSAL.MaxLength = 60
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnDOC.AllowDBNull = false
            Me.columnDOC.MaxLength = 30
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 20
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnRUC.AllowDBNull = false
            Me.columnRUC.MaxLength = 20
            Me.columnMON.MaxLength = 1
            Me.columnDESC_MON.MaxLength = 15
            Me.columnDESC_MONEDA.MaxLength = 20
            Me.columnsoles.ReadOnly = true
            Me.columndolares.ReadOnly = true
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_CXP_PTES3Row() As REPORTE_CXP_PTES3Row
            Return CType(Me.NewRow,REPORTE_CXP_PTES3Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New REPORTE_CXP_PTES3Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(REPORTE_CXP_PTES3Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_CXP_PTES3RowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_PTES3RowChanged(Me, New REPORTE_CXP_PTES3RowChangeEvent(CType(e.Row,REPORTE_CXP_PTES3Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_CXP_PTES3RowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_PTES3RowChanging(Me, New REPORTE_CXP_PTES3RowChangeEvent(CType(e.Row,REPORTE_CXP_PTES3Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_CXP_PTES3RowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_PTES3RowDeleted(Me, New REPORTE_CXP_PTES3RowChangeEvent(CType(e.Row,REPORTE_CXP_PTES3Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_CXP_PTES3RowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CXP_PTES3RowDeleting(Me, New REPORTE_CXP_PTES3RowChangeEvent(CType(e.Row,REPORTE_CXP_PTES3Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_CXP_PTES3Row(ByVal row As REPORTE_CXP_PTES3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REPORTES = New DT_REPORTES
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_CXP_PTES3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_DESCUADRE_COMPDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_AUX As System.Data.DataColumn
        
        Private columnDESC_AUX As System.Data.DataColumn
        
        Private columnCOD_COMP As System.Data.DataColumn
        
        Private columnDESC_COMP As System.Data.DataColumn
        
        Private columnNRO_COMP As System.Data.DataColumn
        
        Private columnDEBE As System.Data.DataColumn
        
        Private columnHABER As System.Data.DataColumn
        
        Private columnCOD_USU As System.Data.DataColumn
        
        Private columnNICK As System.Data.DataColumn
        
        Private columnFECHA_COMP As System.Data.DataColumn
        
        Private columnSTATUS_MODULO As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_DESCUADRE_COMP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_AUXColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_AUX
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEBEColumn() As System.Data.DataColumn
            Get
                Return Me.columnDEBE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HABERColumn() As System.Data.DataColumn
            Get
                Return Me.columnHABER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_USUColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_USU
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NICKColumn() As System.Data.DataColumn
            Get
                Return Me.columnNICK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_MODULOColumn() As System.Data.DataColumn
            Get
                Return Me.columnSTATUS_MODULO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_DESCUADRE_COMPRow
            Get
                Return CType(Me.Rows(index),REPORTE_DESCUADRE_COMPRow)
            End Get
        End Property
        
        Public Event REPORTE_DESCUADRE_COMPRowChanging As REPORTE_DESCUADRE_COMPRowChangeEventHandler
        
        Public Event REPORTE_DESCUADRE_COMPRowChanged As REPORTE_DESCUADRE_COMPRowChangeEventHandler
        
        Public Event REPORTE_DESCUADRE_COMPRowDeleting As REPORTE_DESCUADRE_COMPRowChangeEventHandler
        
        Public Event REPORTE_DESCUADRE_COMPRowDeleted As REPORTE_DESCUADRE_COMPRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_DESCUADRE_COMPRow(ByVal row As REPORTE_DESCUADRE_COMPRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_DESCUADRE_COMPRow(ByVal COD_AUX As String, ByVal DESC_AUX As String, ByVal COD_COMP As String, ByVal DESC_COMP As String, ByVal NRO_COMP As String, ByVal DEBE As Decimal, ByVal HABER As Decimal, ByVal COD_USU As String, ByVal NICK As String, ByVal FECHA_COMP As Date, ByVal STATUS_MODULO As String) As REPORTE_DESCUADRE_COMPRow
            Dim rowREPORTE_DESCUADRE_COMPRow As REPORTE_DESCUADRE_COMPRow = CType(Me.NewRow,REPORTE_DESCUADRE_COMPRow)
            rowREPORTE_DESCUADRE_COMPRow.ItemArray = New Object() {COD_AUX, DESC_AUX, COD_COMP, DESC_COMP, NRO_COMP, DEBE, HABER, COD_USU, NICK, FECHA_COMP, STATUS_MODULO}
            Me.Rows.Add(rowREPORTE_DESCUADRE_COMPRow)
            Return rowREPORTE_DESCUADRE_COMPRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As REPORTE_DESCUADRE_COMPDataTable = CType(MyBase.Clone,REPORTE_DESCUADRE_COMPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New REPORTE_DESCUADRE_COMPDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnDESC_AUX = MyBase.Columns("DESC_AUX")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnDESC_COMP = MyBase.Columns("DESC_COMP")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnDEBE = MyBase.Columns("DEBE")
            Me.columnHABER = MyBase.Columns("HABER")
            Me.columnCOD_USU = MyBase.Columns("COD_USU")
            Me.columnNICK = MyBase.Columns("NICK")
            Me.columnFECHA_COMP = MyBase.Columns("FECHA_COMP")
            Me.columnSTATUS_MODULO = MyBase.Columns("STATUS_MODULO")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_AUX = New System.Data.DataColumn("COD_AUX", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnDESC_AUX = New System.Data.DataColumn("DESC_AUX", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_AUX)
            Me.columnCOD_COMP = New System.Data.DataColumn("COD_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnDESC_COMP = New System.Data.DataColumn("DESC_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_COMP)
            Me.columnNRO_COMP = New System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnDEBE = New System.Data.DataColumn("DEBE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEBE)
            Me.columnHABER = New System.Data.DataColumn("HABER", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHABER)
            Me.columnCOD_USU = New System.Data.DataColumn("COD_USU", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_USU)
            Me.columnNICK = New System.Data.DataColumn("NICK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNICK)
            Me.columnFECHA_COMP = New System.Data.DataColumn("FECHA_COMP", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_COMP)
            Me.columnSTATUS_MODULO = New System.Data.DataColumn("STATUS_MODULO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_MODULO)
            Me.columnCOD_AUX.AllowDBNull = false
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnDESC_AUX.MaxLength = 30
            Me.columnCOD_COMP.AllowDBNull = false
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnDESC_COMP.MaxLength = 30
            Me.columnNRO_COMP.AllowDBNull = false
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnDEBE.ReadOnly = true
            Me.columnHABER.ReadOnly = true
            Me.columnCOD_USU.MaxLength = 4
            Me.columnNICK.MaxLength = 15
            Me.columnSTATUS_MODULO.MaxLength = 5
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_DESCUADRE_COMPRow() As REPORTE_DESCUADRE_COMPRow
            Return CType(Me.NewRow,REPORTE_DESCUADRE_COMPRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New REPORTE_DESCUADRE_COMPRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(REPORTE_DESCUADRE_COMPRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_DESCUADRE_COMPRowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_DESCUADRE_COMPRowChanged(Me, New REPORTE_DESCUADRE_COMPRowChangeEvent(CType(e.Row,REPORTE_DESCUADRE_COMPRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_DESCUADRE_COMPRowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_DESCUADRE_COMPRowChanging(Me, New REPORTE_DESCUADRE_COMPRowChangeEvent(CType(e.Row,REPORTE_DESCUADRE_COMPRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_DESCUADRE_COMPRowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_DESCUADRE_COMPRowDeleted(Me, New REPORTE_DESCUADRE_COMPRowChangeEvent(CType(e.Row,REPORTE_DESCUADRE_COMPRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_DESCUADRE_COMPRowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_DESCUADRE_COMPRowDeleting(Me, New REPORTE_DESCUADRE_COMPRowChangeEvent(CType(e.Row,REPORTE_DESCUADRE_COMPRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_DESCUADRE_COMPRow(ByVal row As REPORTE_DESCUADRE_COMPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REPORTES = New DT_REPORTES
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_DESCUADRE_COMPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_DESCUADRE_CXCDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_SUCURSAL As System.Data.DataColumn
        
        Private columnDESC_SUCURSAL As System.Data.DataColumn
        
        Private columnCOD_DOC As System.Data.DataColumn
        
        Private columndesc_doc As System.Data.DataColumn
        
        Private columnNRO_DOC As System.Data.DataColumn
        
        Private columnCOD_PER As System.Data.DataColumn
        
        Private columnDESC_PER As System.Data.DataColumn
        
        Private columnFE_AÑO As System.Data.DataColumn
        
        Private columnFE_MES As System.Data.DataColumn
        
        Private columnNRO_COMP As System.Data.DataColumn
        
        Private columnCOD_MP As System.Data.DataColumn
        
        Private columnNRO_MP As System.Data.DataColumn
        
        Private columnNRO_DOC_PER As System.Data.DataColumn
        
        Private columnFECHA_DOC As System.Data.DataColumn
        
        Private columnFECHA_VEN As System.Data.DataColumn
        
        Private columnCOD_D_H As System.Data.DataColumn
        
        Private columnCOD_MONEDA As System.Data.DataColumn
        
        Private columnTIPO_CAMBIO As System.Data.DataColumn
        
        Private columnIMP_DOC As System.Data.DataColumn
        
        Private columnINGRESO As System.Data.DataColumn
        
        Private columnTIPO_OPE As System.Data.DataColumn
        
        Private columnDesc_moneda As System.Data.DataColumn
        
        Private columnPENDIENTE As System.Data.DataColumn
        
        Private columnCANCELACION As System.Data.DataColumn
        
        Private columnPTE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_DESCUADRE_CXC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_SUCURSALColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_SUCURSAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_SUCURSALColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_SUCURSAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property desc_docColumn() As System.Data.DataColumn
            Get
                Return Me.columndesc_doc
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_AÑOColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_AÑO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_MESColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_MES
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MPColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_MP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_MPColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_MP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_VENColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_VEN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_D_HColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_D_H
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MONEDAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_MONEDA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CAMBIOColumn() As System.Data.DataColumn
            Get
                Return Me.columnTIPO_CAMBIO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOColumn() As System.Data.DataColumn
            Get
                Return Me.columnINGRESO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_OPEColumn() As System.Data.DataColumn
            Get
                Return Me.columnTIPO_OPE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Desc_monedaColumn() As System.Data.DataColumn
            Get
                Return Me.columnDesc_moneda
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PENDIENTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnPENDIENTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANCELACIONColumn() As System.Data.DataColumn
            Get
                Return Me.columnCANCELACION
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnPTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_DESCUADRE_CXCRow
            Get
                Return CType(Me.Rows(index),REPORTE_DESCUADRE_CXCRow)
            End Get
        End Property
        
        Public Event REPORTE_DESCUADRE_CXCRowChanging As REPORTE_DESCUADRE_CXCRowChangeEventHandler
        
        Public Event REPORTE_DESCUADRE_CXCRowChanged As REPORTE_DESCUADRE_CXCRowChangeEventHandler
        
        Public Event REPORTE_DESCUADRE_CXCRowDeleting As REPORTE_DESCUADRE_CXCRowChangeEventHandler
        
        Public Event REPORTE_DESCUADRE_CXCRowDeleted As REPORTE_DESCUADRE_CXCRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_DESCUADRE_CXCRow(ByVal row As REPORTE_DESCUADRE_CXCRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_DESCUADRE_CXCRow( _
                    ByVal COD_SUCURSAL As String,  _
                    ByVal DESC_SUCURSAL As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal desc_doc As String,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal FE_AÑO As String,  _
                    ByVal FE_MES As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal COD_MP As String,  _
                    ByVal NRO_MP As String,  _
                    ByVal NRO_DOC_PER As String,  _
                    ByVal FECHA_DOC As Date,  _
                    ByVal FECHA_VEN As Date,  _
                    ByVal COD_D_H As String,  _
                    ByVal COD_MONEDA As String,  _
                    ByVal TIPO_CAMBIO As Decimal,  _
                    ByVal IMP_DOC As Decimal,  _
                    ByVal INGRESO As String,  _
                    ByVal TIPO_OPE As String,  _
                    ByVal Desc_moneda As String,  _
                    ByVal PENDIENTE As Decimal,  _
                    ByVal CANCELACION As Decimal,  _
                    ByVal PTE As Decimal) As REPORTE_DESCUADRE_CXCRow
            Dim rowREPORTE_DESCUADRE_CXCRow As REPORTE_DESCUADRE_CXCRow = CType(Me.NewRow,REPORTE_DESCUADRE_CXCRow)
            rowREPORTE_DESCUADRE_CXCRow.ItemArray = New Object() {COD_SUCURSAL, DESC_SUCURSAL, COD_DOC, desc_doc, NRO_DOC, COD_PER, DESC_PER, FE_AÑO, FE_MES, NRO_COMP, COD_MP, NRO_MP, NRO_DOC_PER, FECHA_DOC, FECHA_VEN, COD_D_H, COD_MONEDA, TIPO_CAMBIO, IMP_DOC, INGRESO, TIPO_OPE, Desc_moneda, PENDIENTE, CANCELACION, PTE}
            Me.Rows.Add(rowREPORTE_DESCUADRE_CXCRow)
            Return rowREPORTE_DESCUADRE_CXCRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As REPORTE_DESCUADRE_CXCDataTable = CType(MyBase.Clone,REPORTE_DESCUADRE_CXCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New REPORTE_DESCUADRE_CXCDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_SUCURSAL = MyBase.Columns("COD_SUCURSAL")
            Me.columnDESC_SUCURSAL = MyBase.Columns("DESC_SUCURSAL")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columndesc_doc = MyBase.Columns("desc_doc")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnFE_AÑO = MyBase.Columns("FE_AÑO")
            Me.columnFE_MES = MyBase.Columns("FE_MES")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnCOD_MP = MyBase.Columns("COD_MP")
            Me.columnNRO_MP = MyBase.Columns("NRO_MP")
            Me.columnNRO_DOC_PER = MyBase.Columns("NRO_DOC_PER")
            Me.columnFECHA_DOC = MyBase.Columns("FECHA_DOC")
            Me.columnFECHA_VEN = MyBase.Columns("FECHA_VEN")
            Me.columnCOD_D_H = MyBase.Columns("COD_D_H")
            Me.columnCOD_MONEDA = MyBase.Columns("COD_MONEDA")
            Me.columnTIPO_CAMBIO = MyBase.Columns("TIPO_CAMBIO")
            Me.columnIMP_DOC = MyBase.Columns("IMP_DOC")
            Me.columnINGRESO = MyBase.Columns("INGRESO")
            Me.columnTIPO_OPE = MyBase.Columns("TIPO_OPE")
            Me.columnDesc_moneda = MyBase.Columns("Desc_moneda")
            Me.columnPENDIENTE = MyBase.Columns("PENDIENTE")
            Me.columnCANCELACION = MyBase.Columns("CANCELACION")
            Me.columnPTE = MyBase.Columns("PTE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_SUCURSAL = New System.Data.DataColumn("COD_SUCURSAL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_SUCURSAL)
            Me.columnDESC_SUCURSAL = New System.Data.DataColumn("DESC_SUCURSAL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_SUCURSAL)
            Me.columnCOD_DOC = New System.Data.DataColumn("COD_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columndesc_doc = New System.Data.DataColumn("desc_doc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_doc)
            Me.columnNRO_DOC = New System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_PER = New System.Data.DataColumn("COD_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New System.Data.DataColumn("DESC_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnFE_AÑO = New System.Data.DataColumn("FE_AÑO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_AÑO)
            Me.columnFE_MES = New System.Data.DataColumn("FE_MES", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_MES)
            Me.columnNRO_COMP = New System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnCOD_MP = New System.Data.DataColumn("COD_MP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MP)
            Me.columnNRO_MP = New System.Data.DataColumn("NRO_MP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_MP)
            Me.columnNRO_DOC_PER = New System.Data.DataColumn("NRO_DOC_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC_PER)
            Me.columnFECHA_DOC = New System.Data.DataColumn("FECHA_DOC", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DOC)
            Me.columnFECHA_VEN = New System.Data.DataColumn("FECHA_VEN", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_VEN)
            Me.columnCOD_D_H = New System.Data.DataColumn("COD_D_H", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_D_H)
            Me.columnCOD_MONEDA = New System.Data.DataColumn("COD_MONEDA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MONEDA)
            Me.columnTIPO_CAMBIO = New System.Data.DataColumn("TIPO_CAMBIO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CAMBIO)
            Me.columnIMP_DOC = New System.Data.DataColumn("IMP_DOC", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_DOC)
            Me.columnINGRESO = New System.Data.DataColumn("INGRESO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESO)
            Me.columnTIPO_OPE = New System.Data.DataColumn("TIPO_OPE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_OPE)
            Me.columnDesc_moneda = New System.Data.DataColumn("Desc_moneda", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesc_moneda)
            Me.columnPENDIENTE = New System.Data.DataColumn("PENDIENTE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPENDIENTE)
            Me.columnCANCELACION = New System.Data.DataColumn("CANCELACION", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANCELACION)
            Me.columnPTE = New System.Data.DataColumn("PTE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPTE)
            Me.columnCOD_SUCURSAL.AllowDBNull = false
            Me.columnCOD_SUCURSAL.MaxLength = 2
            Me.columnDESC_SUCURSAL.MaxLength = 60
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columndesc_doc.MaxLength = 15
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 15
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnFE_AÑO.MaxLength = 4
            Me.columnFE_MES.MaxLength = 2
            Me.columnNRO_COMP.ReadOnly = true
            Me.columnNRO_COMP.MaxLength = 11
            Me.columnCOD_MP.MaxLength = 3
            Me.columnNRO_MP.MaxLength = 20
            Me.columnNRO_DOC_PER.AllowDBNull = false
            Me.columnNRO_DOC_PER.MaxLength = 20
            Me.columnCOD_D_H.MaxLength = 1
            Me.columnCOD_MONEDA.MaxLength = 1
            Me.columnIMP_DOC.ReadOnly = true
            Me.columnINGRESO.ReadOnly = true
            Me.columnINGRESO.MaxLength = 1
            Me.columnTIPO_OPE.MaxLength = 2
            Me.columnDesc_moneda.MaxLength = 20
            Me.columnPENDIENTE.ReadOnly = true
            Me.columnCANCELACION.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_DESCUADRE_CXCRow() As REPORTE_DESCUADRE_CXCRow
            Return CType(Me.NewRow,REPORTE_DESCUADRE_CXCRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New REPORTE_DESCUADRE_CXCRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(REPORTE_DESCUADRE_CXCRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_DESCUADRE_CXCRowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_DESCUADRE_CXCRowChanged(Me, New REPORTE_DESCUADRE_CXCRowChangeEvent(CType(e.Row,REPORTE_DESCUADRE_CXCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_DESCUADRE_CXCRowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_DESCUADRE_CXCRowChanging(Me, New REPORTE_DESCUADRE_CXCRowChangeEvent(CType(e.Row,REPORTE_DESCUADRE_CXCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_DESCUADRE_CXCRowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_DESCUADRE_CXCRowDeleted(Me, New REPORTE_DESCUADRE_CXCRowChangeEvent(CType(e.Row,REPORTE_DESCUADRE_CXCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_DESCUADRE_CXCRowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_DESCUADRE_CXCRowDeleting(Me, New REPORTE_DESCUADRE_CXCRowChangeEvent(CType(e.Row,REPORTE_DESCUADRE_CXCRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_DESCUADRE_CXCRow(ByVal row As REPORTE_DESCUADRE_CXCRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REPORTES = New DT_REPORTES
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_DESCUADRE_CXCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_DESCUADRE_CXPDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOD_SUCURSAL As System.Data.DataColumn
        
        Private columnDESC_SUCURSAL As System.Data.DataColumn
        
        Private columnCOD_DOC As System.Data.DataColumn
        
        Private columndesc_doc As System.Data.DataColumn
        
        Private columnNRO_DOC As System.Data.DataColumn
        
        Private columnCOD_PER As System.Data.DataColumn
        
        Private columnDESC_PER As System.Data.DataColumn
        
        Private columnFE_AÑO As System.Data.DataColumn
        
        Private columnFE_MES As System.Data.DataColumn
        
        Private columnNRO_COMP As System.Data.DataColumn
        
        Private columnCOD_MP As System.Data.DataColumn
        
        Private columnNRO_MP As System.Data.DataColumn
        
        Private columnNRO_DOC_PER As System.Data.DataColumn
        
        Private columnFECHA_DOC As System.Data.DataColumn
        
        Private columnFECHA_VEN As System.Data.DataColumn
        
        Private columnCOD_D_H As System.Data.DataColumn
        
        Private columnCOD_MONEDA As System.Data.DataColumn
        
        Private columnTIPO_CAMBIO As System.Data.DataColumn
        
        Private columnIMP_DOC As System.Data.DataColumn
        
        Private columnINGRESO As System.Data.DataColumn
        
        Private columnTIPO_OPE As System.Data.DataColumn
        
        Private columnDesc_moneda As System.Data.DataColumn
        
        Private columnPENDIENTE As System.Data.DataColumn
        
        Private columnCANCELACION As System.Data.DataColumn
        
        Private columnPTE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_DESCUADRE_CXP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_SUCURSALColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_SUCURSAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_SUCURSALColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_SUCURSAL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property desc_docColumn() As System.Data.DataColumn
            Get
                Return Me.columndesc_doc
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_AÑOColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_AÑO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FE_MESColumn() As System.Data.DataColumn
            Get
                Return Me.columnFE_MES
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MPColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_MP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_MPColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_MP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOC_PERColumn() As System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC_PER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_VENColumn() As System.Data.DataColumn
            Get
                Return Me.columnFECHA_VEN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_D_HColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_D_H
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MONEDAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOD_MONEDA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CAMBIOColumn() As System.Data.DataColumn
            Get
                Return Me.columnTIPO_CAMBIO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DOCColumn() As System.Data.DataColumn
            Get
                Return Me.columnIMP_DOC
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOColumn() As System.Data.DataColumn
            Get
                Return Me.columnINGRESO
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_OPEColumn() As System.Data.DataColumn
            Get
                Return Me.columnTIPO_OPE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Desc_monedaColumn() As System.Data.DataColumn
            Get
                Return Me.columnDesc_moneda
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PENDIENTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnPENDIENTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANCELACIONColumn() As System.Data.DataColumn
            Get
                Return Me.columnCANCELACION
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnPTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_DESCUADRE_CXPRow
            Get
                Return CType(Me.Rows(index),REPORTE_DESCUADRE_CXPRow)
            End Get
        End Property
        
        Public Event REPORTE_DESCUADRE_CXPRowChanging As REPORTE_DESCUADRE_CXPRowChangeEventHandler
        
        Public Event REPORTE_DESCUADRE_CXPRowChanged As REPORTE_DESCUADRE_CXPRowChangeEventHandler
        
        Public Event REPORTE_DESCUADRE_CXPRowDeleting As REPORTE_DESCUADRE_CXPRowChangeEventHandler
        
        Public Event REPORTE_DESCUADRE_CXPRowDeleted As REPORTE_DESCUADRE_CXPRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_DESCUADRE_CXPRow(ByVal row As REPORTE_DESCUADRE_CXPRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_DESCUADRE_CXPRow( _
                    ByVal COD_SUCURSAL As String,  _
                    ByVal DESC_SUCURSAL As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal desc_doc As String,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal FE_AÑO As String,  _
                    ByVal FE_MES As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal COD_MP As String,  _
                    ByVal NRO_MP As String,  _
                    ByVal NRO_DOC_PER As String,  _
                    ByVal FECHA_DOC As Date,  _
                    ByVal FECHA_VEN As Date,  _
                    ByVal COD_D_H As String,  _
                    ByVal COD_MONEDA As String,  _
                    ByVal TIPO_CAMBIO As Decimal,  _
                    ByVal IMP_DOC As Decimal,  _
                    ByVal INGRESO As String,  _
                    ByVal TIPO_OPE As String,  _
                    ByVal Desc_moneda As String,  _
                    ByVal PENDIENTE As Decimal,  _
                    ByVal CANCELACION As Decimal,  _
                    ByVal PTE As Decimal) As REPORTE_DESCUADRE_CXPRow
            Dim rowREPORTE_DESCUADRE_CXPRow As REPORTE_DESCUADRE_CXPRow = CType(Me.NewRow,REPORTE_DESCUADRE_CXPRow)
            rowREPORTE_DESCUADRE_CXPRow.ItemArray = New Object() {COD_SUCURSAL, DESC_SUCURSAL, COD_DOC, desc_doc, NRO_DOC, COD_PER, DESC_PER, FE_AÑO, FE_MES, NRO_COMP, COD_MP, NRO_MP, NRO_DOC_PER, FECHA_DOC, FECHA_VEN, COD_D_H, COD_MONEDA, TIPO_CAMBIO, IMP_DOC, INGRESO, TIPO_OPE, Desc_moneda, PENDIENTE, CANCELACION, PTE}
            Me.Rows.Add(rowREPORTE_DESCUADRE_CXPRow)
            Return rowREPORTE_DESCUADRE_CXPRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As REPORTE_DESCUADRE_CXPDataTable = CType(MyBase.Clone,REPORTE_DESCUADRE_CXPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New REPORTE_DESCUADRE_CXPDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_SUCURSAL = MyBase.Columns("COD_SUCURSAL")
            Me.columnDESC_SUCURSAL = MyBase.Columns("DESC_SUCURSAL")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columndesc_doc = MyBase.Columns("desc_doc")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnFE_AÑO = MyBase.Columns("FE_AÑO")
            Me.columnFE_MES = MyBase.Columns("FE_MES")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnCOD_MP = MyBase.Columns("COD_MP")
            Me.columnNRO_MP = MyBase.Columns("NRO_MP")
            Me.columnNRO_DOC_PER = MyBase.Columns("NRO_DOC_PER")
            Me.columnFECHA_DOC = MyBase.Columns("FECHA_DOC")
            Me.columnFECHA_VEN = MyBase.Columns("FECHA_VEN")
            Me.columnCOD_D_H = MyBase.Columns("COD_D_H")
            Me.columnCOD_MONEDA = MyBase.Columns("COD_MONEDA")
            Me.columnTIPO_CAMBIO = MyBase.Columns("TIPO_CAMBIO")
            Me.columnIMP_DOC = MyBase.Columns("IMP_DOC")
            Me.columnINGRESO = MyBase.Columns("INGRESO")
            Me.columnTIPO_OPE = MyBase.Columns("TIPO_OPE")
            Me.columnDesc_moneda = MyBase.Columns("Desc_moneda")
            Me.columnPENDIENTE = MyBase.Columns("PENDIENTE")
            Me.columnCANCELACION = MyBase.Columns("CANCELACION")
            Me.columnPTE = MyBase.Columns("PTE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_SUCURSAL = New System.Data.DataColumn("COD_SUCURSAL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_SUCURSAL)
            Me.columnDESC_SUCURSAL = New System.Data.DataColumn("DESC_SUCURSAL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_SUCURSAL)
            Me.columnCOD_DOC = New System.Data.DataColumn("COD_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columndesc_doc = New System.Data.DataColumn("desc_doc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_doc)
            Me.columnNRO_DOC = New System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_PER = New System.Data.DataColumn("COD_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New System.Data.DataColumn("DESC_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnFE_AÑO = New System.Data.DataColumn("FE_AÑO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_AÑO)
            Me.columnFE_MES = New System.Data.DataColumn("FE_MES", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFE_MES)
            Me.columnNRO_COMP = New System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnCOD_MP = New System.Data.DataColumn("COD_MP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MP)
            Me.columnNRO_MP = New System.Data.DataColumn("NRO_MP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_MP)
            Me.columnNRO_DOC_PER = New System.Data.DataColumn("NRO_DOC_PER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC_PER)
            Me.columnFECHA_DOC = New System.Data.DataColumn("FECHA_DOC", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DOC)
            Me.columnFECHA_VEN = New System.Data.DataColumn("FECHA_VEN", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_VEN)
            Me.columnCOD_D_H = New System.Data.DataColumn("COD_D_H", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_D_H)
            Me.columnCOD_MONEDA = New System.Data.DataColumn("COD_MONEDA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MONEDA)
            Me.columnTIPO_CAMBIO = New System.Data.DataColumn("TIPO_CAMBIO", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CAMBIO)
            Me.columnIMP_DOC = New System.Data.DataColumn("IMP_DOC", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_DOC)
            Me.columnINGRESO = New System.Data.DataColumn("INGRESO", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESO)
            Me.columnTIPO_OPE = New System.Data.DataColumn("TIPO_OPE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_OPE)
            Me.columnDesc_moneda = New System.Data.DataColumn("Desc_moneda", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesc_moneda)
            Me.columnPENDIENTE = New System.Data.DataColumn("PENDIENTE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPENDIENTE)
            Me.columnCANCELACION = New System.Data.DataColumn("CANCELACION", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANCELACION)
            Me.columnPTE = New System.Data.DataColumn("PTE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPTE)
            Me.columnCOD_SUCURSAL.AllowDBNull = false
            Me.columnCOD_SUCURSAL.MaxLength = 2
            Me.columnDESC_SUCURSAL.MaxLength = 60
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columndesc_doc.MaxLength = 15
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 20
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnFE_AÑO.MaxLength = 4
            Me.columnFE_MES.MaxLength = 2
            Me.columnNRO_COMP.ReadOnly = true
            Me.columnNRO_COMP.MaxLength = 11
            Me.columnCOD_MP.MaxLength = 3
            Me.columnNRO_MP.MaxLength = 20
            Me.columnNRO_DOC_PER.AllowDBNull = false
            Me.columnNRO_DOC_PER.MaxLength = 20
            Me.columnCOD_D_H.MaxLength = 1
            Me.columnCOD_MONEDA.MaxLength = 1
            Me.columnIMP_DOC.ReadOnly = true
            Me.columnINGRESO.ReadOnly = true
            Me.columnINGRESO.MaxLength = 1
            Me.columnTIPO_OPE.MaxLength = 2
            Me.columnDesc_moneda.MaxLength = 20
            Me.columnPENDIENTE.ReadOnly = true
            Me.columnCANCELACION.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_DESCUADRE_CXPRow() As REPORTE_DESCUADRE_CXPRow
            Return CType(Me.NewRow,REPORTE_DESCUADRE_CXPRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New REPORTE_DESCUADRE_CXPRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(REPORTE_DESCUADRE_CXPRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_DESCUADRE_CXPRowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_DESCUADRE_CXPRowChanged(Me, New REPORTE_DESCUADRE_CXPRowChangeEvent(CType(e.Row,REPORTE_DESCUADRE_CXPRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_DESCUADRE_CXPRowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_DESCUADRE_CXPRowChanging(Me, New REPORTE_DESCUADRE_CXPRowChangeEvent(CType(e.Row,REPORTE_DESCUADRE_CXPRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_DESCUADRE_CXPRowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_DESCUADRE_CXPRowDeleted(Me, New REPORTE_DESCUADRE_CXPRowChangeEvent(CType(e.Row,REPORTE_DESCUADRE_CXPRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_DESCUADRE_CXPRowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_DESCUADRE_CXPRowDeleting(Me, New REPORTE_DESCUADRE_CXPRowChangeEvent(CType(e.Row,REPORTE_DESCUADRE_CXPRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_DESCUADRE_CXPRow(ByVal row As REPORTE_DESCUADRE_CXPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REPORTES = New DT_REPORTES
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_DESCUADRE_CXPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_CXC_CANC1Row
        Inherits System.Data.DataRow
        
        Private tableREPORTE_CXC_CANC1 As REPORTE_CXC_CANC1DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_CXC_CANC1 = CType(Me.Table,REPORTE_CXC_CANC1DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_SUCURSAL() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_CANC1.COD_SUCURSALColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.COD_SUCURSALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_CANC1.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.COD_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_CANC1.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.COD_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_AÑO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.FE_AÑOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_AÑO' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.FE_AÑOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_CANC1.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.NRO_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_MES() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.FE_MESColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_MES' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.FE_MESColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_BANCO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.COD_BANCOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_BANCO' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.COD_BANCOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.COD_MPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_MP' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.COD_MPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_MP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.NRO_MPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NRO_MP' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.NRO_MPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_CANC1.NRO_DOC_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.NRO_DOC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.FECHA_DOCColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FECHA_DOC' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.FECHA_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_D_H() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.COD_D_HColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_D_H' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.COD_D_HColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.COD_MONEDAColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_MONEDA' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.COD_MONEDAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CAMBIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.TIPO_CAMBIOColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'TIPO_CAMBIO' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.TIPO_CAMBIOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_DOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.IMP_DOCColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_DOC' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.IMP_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_OPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.TIPO_OPEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'TIPO_OPE' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.TIPO_OPEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property desc_mp() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.desc_mpColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'desc_mp' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.desc_mpColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_SUCURSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.DESC_SUCURSALColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_SUCURSAL' de la tabla 'REPORTE_CXC_CANC1' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.DESC_SUCURSALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.DESC_PERColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.DESC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Desc_moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.Desc_monedaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Desc_moneda' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.Desc_monedaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property desc_doc() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_CANC1.desc_docColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.desc_docColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property desc_corta() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.desc_cortaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'desc_corta' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.desc_cortaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.COD_AUXColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_AUX' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.COD_AUXColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.COD_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_COMP' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.COD_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_CANC1.NRO_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NRO_COMP' de la tabla 'REPORTE_CXC_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.NRO_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_CANC1.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_CANC1.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_AÑONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.FE_AÑOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_AÑONull()
            Me(Me.tableREPORTE_CXC_CANC1.FE_AÑOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_MESNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.FE_MESColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_MESNull()
            Me(Me.tableREPORTE_CXC_CANC1.FE_MESColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_BANCONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.COD_BANCOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_BANCONull()
            Me(Me.tableREPORTE_CXC_CANC1.COD_BANCOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.COD_MPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MPNull()
            Me(Me.tableREPORTE_CXC_CANC1.COD_MPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_MPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.NRO_MPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_MPNull()
            Me(Me.tableREPORTE_CXC_CANC1.NRO_MPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.FECHA_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DOCNull()
            Me(Me.tableREPORTE_CXC_CANC1.FECHA_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_D_HNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.COD_D_HColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_D_HNull()
            Me(Me.tableREPORTE_CXC_CANC1.COD_D_HColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.COD_MONEDAColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MONEDANull()
            Me(Me.tableREPORTE_CXC_CANC1.COD_MONEDAColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CAMBIONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.TIPO_CAMBIOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CAMBIONull()
            Me(Me.tableREPORTE_CXC_CANC1.TIPO_CAMBIOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.IMP_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DOCNull()
            Me(Me.tableREPORTE_CXC_CANC1.IMP_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_OPENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.TIPO_OPEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_OPENull()
            Me(Me.tableREPORTE_CXC_CANC1.TIPO_OPEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdesc_mpNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.desc_mpColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdesc_mpNull()
            Me(Me.tableREPORTE_CXC_CANC1.desc_mpColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_SUCURSALNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.DESC_SUCURSALColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_SUCURSALNull()
            Me(Me.tableREPORTE_CXC_CANC1.DESC_SUCURSALColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.DESC_PERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_CXC_CANC1.DESC_PERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesc_monedaNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.Desc_monedaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesc_monedaNull()
            Me(Me.tableREPORTE_CXC_CANC1.Desc_monedaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdesc_cortaNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.desc_cortaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdesc_cortaNull()
            Me(Me.tableREPORTE_CXC_CANC1.desc_cortaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_AUXNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.COD_AUXColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_AUXNull()
            Me(Me.tableREPORTE_CXC_CANC1.COD_AUXColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.COD_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_COMPNull()
            Me(Me.tableREPORTE_CXC_CANC1.COD_COMPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_CANC1.NRO_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMPNull()
            Me(Me.tableREPORTE_CXC_CANC1.NRO_COMPColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_CXC_PTES1Row
        Inherits System.Data.DataRow
        
        Private tableREPORTE_CXC_PTES1 As REPORTE_CXC_PTES1DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_CXC_PTES1 = CType(Me.Table,REPORTE_CXC_PTES1DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES1.SUCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.SUCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUCURSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES1.SUCURSALColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SUCURSAL' de la tabla 'REPORTE_CXC_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.SUCURSALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES1.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.COD_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES1.DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES1.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.NRO_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES1.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.COD_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES1.DESC_PERColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_CXC_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.DESC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUC() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES1.RUCColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'RUC' de la tabla 'REPORTE_CXC_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.RUCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES1.FE_DOCColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_DOC' de la tabla 'REPORTE_CXC_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.FE_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_VEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES1.FE_VENColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_VEN' de la tabla 'REPORTE_CXC_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.FE_VENColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_INI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES1.IMP_INIColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_INI' de la tabla 'REPORTE_CXC_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.IMP_INIColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_DOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES1.IMP_DOCColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_DOC' de la tabla 'REPORTE_CXC_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.IMP_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MON() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES1.MONColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MON' de la tabla 'REPORTE_CXC_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.MONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MON() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES1.DESC_MONColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_MON' de la tabla 'REPORTE_CXC_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.DESC_MONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES1.DESC_MONEDAColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_MONEDA' de la tabla 'REPORTE_CXC_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.DESC_MONEDAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES1.COD_AUXColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_AUX' de la tabla 'REPORTE_CXC_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.COD_AUXColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES1.COD_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_COMP' de la tabla 'REPORTE_CXC_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.COD_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES1.NRO_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NRO_COMP' de la tabla 'REPORTE_CXC_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.NRO_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES1.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES1.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUCURSALNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES1.SUCURSALColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUCURSALNull()
            Me(Me.tableREPORTE_CXC_PTES1.SUCURSALColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES1.DESC_PERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_CXC_PTES1.DESC_PERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRUCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES1.RUCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRUCNull()
            Me(Me.tableREPORTE_CXC_PTES1.RUCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES1.FE_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_DOCNull()
            Me(Me.tableREPORTE_CXC_PTES1.FE_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_VENNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES1.FE_VENColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_VENNull()
            Me(Me.tableREPORTE_CXC_PTES1.FE_VENColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_ININull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES1.IMP_INIColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_ININull()
            Me(Me.tableREPORTE_CXC_PTES1.IMP_INIColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES1.IMP_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DOCNull()
            Me(Me.tableREPORTE_CXC_PTES1.IMP_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES1.MONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONNull()
            Me(Me.tableREPORTE_CXC_PTES1.MONColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES1.DESC_MONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONNull()
            Me(Me.tableREPORTE_CXC_PTES1.DESC_MONColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES1.DESC_MONEDAColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONEDANull()
            Me(Me.tableREPORTE_CXC_PTES1.DESC_MONEDAColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_AUXNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES1.COD_AUXColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_AUXNull()
            Me(Me.tableREPORTE_CXC_PTES1.COD_AUXColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES1.COD_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_COMPNull()
            Me(Me.tableREPORTE_CXC_PTES1.COD_COMPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES1.NRO_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMPNull()
            Me(Me.tableREPORTE_CXC_PTES1.NRO_COMPColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_CXC_PTES2Row
        Inherits System.Data.DataRow
        
        Private tableREPORTE_CXC_PTES2 As REPORTE_CXC_PTES2DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_CXC_PTES2 = CType(Me.Table,REPORTE_CXC_PTES2DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES2.SUCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.SUCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUCURSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES2.SUCURSALColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SUCURSAL' de la tabla 'REPORTE_CXC_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.SUCURSALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES2.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.COD_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES2.DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES2.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.NRO_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES2.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.COD_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES2.DESC_PERColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_CXC_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.DESC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUC() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES2.RUCColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'RUC' de la tabla 'REPORTE_CXC_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.RUCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES2.FE_DOCColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_DOC' de la tabla 'REPORTE_CXC_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.FE_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_VEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES2.FE_VENColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_VEN' de la tabla 'REPORTE_CXC_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.FE_VENColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_INI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES2.IMP_INIColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_INI' de la tabla 'REPORTE_CXC_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.IMP_INIColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_DOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES2.IMP_DOCColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_DOC' de la tabla 'REPORTE_CXC_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.IMP_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MON() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES2.MONColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MON' de la tabla 'REPORTE_CXC_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.MONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MON() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES2.DESC_MONColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_MON' de la tabla 'REPORTE_CXC_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.DESC_MONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES2.DESC_MONEDAColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_MONEDA' de la tabla 'REPORTE_CXC_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.DESC_MONEDAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES2.COD_AUXColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_AUX' de la tabla 'REPORTE_CXC_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.COD_AUXColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES2.COD_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_COMP' de la tabla 'REPORTE_CXC_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.COD_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES2.NRO_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NRO_COMP' de la tabla 'REPORTE_CXC_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.NRO_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES2.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES2.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUCURSALNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES2.SUCURSALColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUCURSALNull()
            Me(Me.tableREPORTE_CXC_PTES2.SUCURSALColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES2.DESC_PERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_CXC_PTES2.DESC_PERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRUCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES2.RUCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRUCNull()
            Me(Me.tableREPORTE_CXC_PTES2.RUCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES2.FE_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_DOCNull()
            Me(Me.tableREPORTE_CXC_PTES2.FE_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_VENNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES2.FE_VENColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_VENNull()
            Me(Me.tableREPORTE_CXC_PTES2.FE_VENColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_ININull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES2.IMP_INIColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_ININull()
            Me(Me.tableREPORTE_CXC_PTES2.IMP_INIColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES2.IMP_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DOCNull()
            Me(Me.tableREPORTE_CXC_PTES2.IMP_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES2.MONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONNull()
            Me(Me.tableREPORTE_CXC_PTES2.MONColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES2.DESC_MONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONNull()
            Me(Me.tableREPORTE_CXC_PTES2.DESC_MONColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES2.DESC_MONEDAColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONEDANull()
            Me(Me.tableREPORTE_CXC_PTES2.DESC_MONEDAColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_AUXNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES2.COD_AUXColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_AUXNull()
            Me(Me.tableREPORTE_CXC_PTES2.COD_AUXColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES2.COD_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_COMPNull()
            Me(Me.tableREPORTE_CXC_PTES2.COD_COMPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES2.NRO_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMPNull()
            Me(Me.tableREPORTE_CXC_PTES2.NRO_COMPColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_CXC_PTES3Row
        Inherits System.Data.DataRow
        
        Private tableREPORTE_CXC_PTES3 As REPORTE_CXC_PTES3DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_CXC_PTES3 = CType(Me.Table,REPORTE_CXC_PTES3DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES3.SUCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.SUCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUCURSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES3.SUCURSALColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SUCURSAL' de la tabla 'REPORTE_CXC_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.SUCURSALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES3.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.COD_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES3.DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES3.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.NRO_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES3.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.COD_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES3.DESC_PERColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_CXC_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.DESC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES3.RUCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.RUCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES3.FE_DOCColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_DOC' de la tabla 'REPORTE_CXC_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.FE_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_VEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES3.FE_VENColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_VEN' de la tabla 'REPORTE_CXC_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.FE_VENColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_INI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES3.IMP_INIColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_INI' de la tabla 'REPORTE_CXC_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.IMP_INIColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_DOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES3.IMP_DOCColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_DOC' de la tabla 'REPORTE_CXC_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.IMP_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MON() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES3.MONColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MON' de la tabla 'REPORTE_CXC_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.MONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MON() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES3.DESC_MONColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_MON' de la tabla 'REPORTE_CXC_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.DESC_MONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES3.DESC_MONEDAColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_MONEDA' de la tabla 'REPORTE_CXC_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.DESC_MONEDAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property soles() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES3.solesColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'soles' de la tabla 'REPORTE_CXC_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.solesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dolares() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES3.dolaresColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'dolares' de la tabla 'REPORTE_CXC_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.dolaresColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES3.COD_AUXColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_AUX' de la tabla 'REPORTE_CXC_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.COD_AUXColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES3.COD_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_COMP' de la tabla 'REPORTE_CXC_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.COD_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXC_PTES3.NRO_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NRO_COMP' de la tabla 'REPORTE_CXC_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.NRO_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXC_PTES3.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXC_PTES3.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUCURSALNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES3.SUCURSALColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUCURSALNull()
            Me(Me.tableREPORTE_CXC_PTES3.SUCURSALColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES3.DESC_PERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_CXC_PTES3.DESC_PERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES3.FE_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_DOCNull()
            Me(Me.tableREPORTE_CXC_PTES3.FE_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_VENNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES3.FE_VENColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_VENNull()
            Me(Me.tableREPORTE_CXC_PTES3.FE_VENColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_ININull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES3.IMP_INIColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_ININull()
            Me(Me.tableREPORTE_CXC_PTES3.IMP_INIColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES3.IMP_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DOCNull()
            Me(Me.tableREPORTE_CXC_PTES3.IMP_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES3.MONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONNull()
            Me(Me.tableREPORTE_CXC_PTES3.MONColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES3.DESC_MONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONNull()
            Me(Me.tableREPORTE_CXC_PTES3.DESC_MONColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES3.DESC_MONEDAColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONEDANull()
            Me(Me.tableREPORTE_CXC_PTES3.DESC_MONEDAColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssolesNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES3.solesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsolesNull()
            Me(Me.tableREPORTE_CXC_PTES3.solesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdolaresNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES3.dolaresColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdolaresNull()
            Me(Me.tableREPORTE_CXC_PTES3.dolaresColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_AUXNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES3.COD_AUXColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_AUXNull()
            Me(Me.tableREPORTE_CXC_PTES3.COD_AUXColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES3.COD_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_COMPNull()
            Me(Me.tableREPORTE_CXC_PTES3.COD_COMPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXC_PTES3.NRO_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMPNull()
            Me(Me.tableREPORTE_CXC_PTES3.NRO_COMPColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_CXP_CANC1Row
        Inherits System.Data.DataRow
        
        Private tableREPORTE_CXP_CANC1 As REPORTE_CXP_CANC1DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_CXP_CANC1 = CType(Me.Table,REPORTE_CXP_CANC1DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_SUCURSAL() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_CANC1.COD_SUCURSALColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.COD_SUCURSALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_CANC1.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.COD_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_CANC1.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.COD_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_AÑO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.FE_AÑOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_AÑO' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.FE_AÑOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_CANC1.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.NRO_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_MES() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.FE_MESColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_MES' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.FE_MESColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_BANCO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.COD_BANCOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_BANCO' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.COD_BANCOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.COD_MPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_MP' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.COD_MPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_MP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.NRO_MPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NRO_MP' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.NRO_MPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_CANC1.NRO_DOC_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.NRO_DOC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.FECHA_DOCColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FECHA_DOC' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.FECHA_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_D_H() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.COD_D_HColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_D_H' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.COD_D_HColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.COD_MONEDAColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_MONEDA' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.COD_MONEDAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CAMBIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.TIPO_CAMBIOColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'TIPO_CAMBIO' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.TIPO_CAMBIOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_DOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.IMP_DOCColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_DOC' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.IMP_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_OPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.TIPO_OPEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'TIPO_OPE' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.TIPO_OPEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property desc_mp() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.desc_mpColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'desc_mp' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.desc_mpColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_SUCURSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.DESC_SUCURSALColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_SUCURSAL' de la tabla 'REPORTE_CXP_CANC1' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.DESC_SUCURSALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.DESC_PERColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.DESC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Desc_moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.Desc_monedaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Desc_moneda' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.Desc_monedaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property desc_doc() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_CANC1.desc_docColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.desc_docColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property desc_corta() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.desc_cortaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'desc_corta' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.desc_cortaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.COD_AUXColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_AUX' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.COD_AUXColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.COD_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_COMP' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.COD_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_CANC1.NRO_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NRO_COMP' de la tabla 'REPORTE_CXP_CANC1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.NRO_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_CANC1.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_CANC1.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_AÑONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.FE_AÑOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_AÑONull()
            Me(Me.tableREPORTE_CXP_CANC1.FE_AÑOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_MESNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.FE_MESColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_MESNull()
            Me(Me.tableREPORTE_CXP_CANC1.FE_MESColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_BANCONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.COD_BANCOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_BANCONull()
            Me(Me.tableREPORTE_CXP_CANC1.COD_BANCOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.COD_MPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MPNull()
            Me(Me.tableREPORTE_CXP_CANC1.COD_MPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_MPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.NRO_MPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_MPNull()
            Me(Me.tableREPORTE_CXP_CANC1.NRO_MPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.FECHA_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DOCNull()
            Me(Me.tableREPORTE_CXP_CANC1.FECHA_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_D_HNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.COD_D_HColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_D_HNull()
            Me(Me.tableREPORTE_CXP_CANC1.COD_D_HColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.COD_MONEDAColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MONEDANull()
            Me(Me.tableREPORTE_CXP_CANC1.COD_MONEDAColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CAMBIONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.TIPO_CAMBIOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CAMBIONull()
            Me(Me.tableREPORTE_CXP_CANC1.TIPO_CAMBIOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.IMP_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DOCNull()
            Me(Me.tableREPORTE_CXP_CANC1.IMP_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_OPENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.TIPO_OPEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_OPENull()
            Me(Me.tableREPORTE_CXP_CANC1.TIPO_OPEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdesc_mpNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.desc_mpColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdesc_mpNull()
            Me(Me.tableREPORTE_CXP_CANC1.desc_mpColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_SUCURSALNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.DESC_SUCURSALColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_SUCURSALNull()
            Me(Me.tableREPORTE_CXP_CANC1.DESC_SUCURSALColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.DESC_PERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_CXP_CANC1.DESC_PERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesc_monedaNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.Desc_monedaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesc_monedaNull()
            Me(Me.tableREPORTE_CXP_CANC1.Desc_monedaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdesc_cortaNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.desc_cortaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdesc_cortaNull()
            Me(Me.tableREPORTE_CXP_CANC1.desc_cortaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_AUXNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.COD_AUXColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_AUXNull()
            Me(Me.tableREPORTE_CXP_CANC1.COD_AUXColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.COD_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_COMPNull()
            Me(Me.tableREPORTE_CXP_CANC1.COD_COMPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_CANC1.NRO_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMPNull()
            Me(Me.tableREPORTE_CXP_CANC1.NRO_COMPColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_CXP_PTES1Row
        Inherits System.Data.DataRow
        
        Private tableREPORTE_CXP_PTES1 As REPORTE_CXP_PTES1DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_CXP_PTES1 = CType(Me.Table,REPORTE_CXP_PTES1DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES1.SUCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.SUCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUCURSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES1.SUCURSALColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SUCURSAL' de la tabla 'REPORTE_CXP_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.SUCURSALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES1.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.COD_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES1.DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES1.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.NRO_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES1.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.COD_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES1.DESC_PERColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_CXP_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.DESC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUC() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES1.RUCColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'RUC' de la tabla 'REPORTE_CXP_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.RUCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES1.FE_DOCColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_DOC' de la tabla 'REPORTE_CXP_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.FE_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_VEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES1.FE_VENColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_VEN' de la tabla 'REPORTE_CXP_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.FE_VENColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_INI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES1.IMP_INIColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_INI' de la tabla 'REPORTE_CXP_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.IMP_INIColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_DOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES1.IMP_DOCColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_DOC' de la tabla 'REPORTE_CXP_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.IMP_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MON() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES1.MONColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MON' de la tabla 'REPORTE_CXP_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.MONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MON() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES1.DESC_MONColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_MON' de la tabla 'REPORTE_CXP_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.DESC_MONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES1.DESC_MONEDAColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_MONEDA' de la tabla 'REPORTE_CXP_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.DESC_MONEDAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES1.COD_AUXColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_AUX' de la tabla 'REPORTE_CXP_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.COD_AUXColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES1.COD_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_COMP' de la tabla 'REPORTE_CXP_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.COD_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES1.NRO_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NRO_COMP' de la tabla 'REPORTE_CXP_PTES1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.NRO_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES1.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES1.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUCURSALNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES1.SUCURSALColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUCURSALNull()
            Me(Me.tableREPORTE_CXP_PTES1.SUCURSALColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES1.DESC_PERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_CXP_PTES1.DESC_PERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRUCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES1.RUCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRUCNull()
            Me(Me.tableREPORTE_CXP_PTES1.RUCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES1.FE_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_DOCNull()
            Me(Me.tableREPORTE_CXP_PTES1.FE_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_VENNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES1.FE_VENColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_VENNull()
            Me(Me.tableREPORTE_CXP_PTES1.FE_VENColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_ININull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES1.IMP_INIColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_ININull()
            Me(Me.tableREPORTE_CXP_PTES1.IMP_INIColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES1.IMP_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DOCNull()
            Me(Me.tableREPORTE_CXP_PTES1.IMP_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES1.MONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONNull()
            Me(Me.tableREPORTE_CXP_PTES1.MONColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES1.DESC_MONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONNull()
            Me(Me.tableREPORTE_CXP_PTES1.DESC_MONColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES1.DESC_MONEDAColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONEDANull()
            Me(Me.tableREPORTE_CXP_PTES1.DESC_MONEDAColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_AUXNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES1.COD_AUXColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_AUXNull()
            Me(Me.tableREPORTE_CXP_PTES1.COD_AUXColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES1.COD_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_COMPNull()
            Me(Me.tableREPORTE_CXP_PTES1.COD_COMPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES1.NRO_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMPNull()
            Me(Me.tableREPORTE_CXP_PTES1.NRO_COMPColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_CXP_PTES2Row
        Inherits System.Data.DataRow
        
        Private tableREPORTE_CXP_PTES2 As REPORTE_CXP_PTES2DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_CXP_PTES2 = CType(Me.Table,REPORTE_CXP_PTES2DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES2.SUCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.SUCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUCURSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES2.SUCURSALColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SUCURSAL' de la tabla 'REPORTE_CXP_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.SUCURSALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES2.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.COD_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES2.DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES2.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.NRO_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES2.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.COD_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES2.DESC_PERColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_CXP_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.DESC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUC() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES2.RUCColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'RUC' de la tabla 'REPORTE_CXP_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.RUCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES2.FE_DOCColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_DOC' de la tabla 'REPORTE_CXP_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.FE_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_VEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES2.FE_VENColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_VEN' de la tabla 'REPORTE_CXP_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.FE_VENColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_INI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES2.IMP_INIColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_INI' de la tabla 'REPORTE_CXP_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.IMP_INIColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_DOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES2.IMP_DOCColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_DOC' de la tabla 'REPORTE_CXP_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.IMP_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MON() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES2.MONColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MON' de la tabla 'REPORTE_CXP_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.MONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MON() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES2.DESC_MONColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_MON' de la tabla 'REPORTE_CXP_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.DESC_MONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES2.DESC_MONEDAColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_MONEDA' de la tabla 'REPORTE_CXP_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.DESC_MONEDAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES2.COD_AUXColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_AUX' de la tabla 'REPORTE_CXP_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.COD_AUXColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES2.COD_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_COMP' de la tabla 'REPORTE_CXP_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.COD_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES2.NRO_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NRO_COMP' de la tabla 'REPORTE_CXP_PTES2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.NRO_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES2.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES2.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUCURSALNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES2.SUCURSALColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUCURSALNull()
            Me(Me.tableREPORTE_CXP_PTES2.SUCURSALColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES2.DESC_PERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_CXP_PTES2.DESC_PERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRUCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES2.RUCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRUCNull()
            Me(Me.tableREPORTE_CXP_PTES2.RUCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES2.FE_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_DOCNull()
            Me(Me.tableREPORTE_CXP_PTES2.FE_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_VENNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES2.FE_VENColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_VENNull()
            Me(Me.tableREPORTE_CXP_PTES2.FE_VENColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_ININull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES2.IMP_INIColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_ININull()
            Me(Me.tableREPORTE_CXP_PTES2.IMP_INIColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES2.IMP_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DOCNull()
            Me(Me.tableREPORTE_CXP_PTES2.IMP_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES2.MONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONNull()
            Me(Me.tableREPORTE_CXP_PTES2.MONColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES2.DESC_MONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONNull()
            Me(Me.tableREPORTE_CXP_PTES2.DESC_MONColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES2.DESC_MONEDAColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONEDANull()
            Me(Me.tableREPORTE_CXP_PTES2.DESC_MONEDAColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_AUXNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES2.COD_AUXColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_AUXNull()
            Me(Me.tableREPORTE_CXP_PTES2.COD_AUXColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES2.COD_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_COMPNull()
            Me(Me.tableREPORTE_CXP_PTES2.COD_COMPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES2.NRO_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMPNull()
            Me(Me.tableREPORTE_CXP_PTES2.NRO_COMPColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_CXP_PTES3Row
        Inherits System.Data.DataRow
        
        Private tableREPORTE_CXP_PTES3 As REPORTE_CXP_PTES3DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_CXP_PTES3 = CType(Me.Table,REPORTE_CXP_PTES3DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES3.SUCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.SUCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUCURSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES3.SUCURSALColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SUCURSAL' de la tabla 'REPORTE_CXP_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.SUCURSALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES3.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.COD_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES3.DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES3.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.NRO_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES3.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.COD_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES3.DESC_PERColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_CXP_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.DESC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RUC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES3.RUCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.RUCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES3.FE_DOCColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_DOC' de la tabla 'REPORTE_CXP_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.FE_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_VEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES3.FE_VENColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_VEN' de la tabla 'REPORTE_CXP_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.FE_VENColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_INI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES3.IMP_INIColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_INI' de la tabla 'REPORTE_CXP_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.IMP_INIColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_DOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES3.IMP_DOCColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_DOC' de la tabla 'REPORTE_CXP_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.IMP_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MON() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES3.MONColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MON' de la tabla 'REPORTE_CXP_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.MONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MON() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES3.DESC_MONColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_MON' de la tabla 'REPORTE_CXP_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.DESC_MONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES3.DESC_MONEDAColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_MONEDA' de la tabla 'REPORTE_CXP_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.DESC_MONEDAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property soles() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES3.solesColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'soles' de la tabla 'REPORTE_CXP_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.solesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dolares() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES3.dolaresColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'dolares' de la tabla 'REPORTE_CXP_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.dolaresColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES3.COD_AUXColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_AUX' de la tabla 'REPORTE_CXP_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.COD_AUXColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES3.COD_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_COMP' de la tabla 'REPORTE_CXP_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.COD_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CXP_PTES3.NRO_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NRO_COMP' de la tabla 'REPORTE_CXP_PTES3' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.NRO_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_CXP_PTES3.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CXP_PTES3.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUCURSALNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES3.SUCURSALColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUCURSALNull()
            Me(Me.tableREPORTE_CXP_PTES3.SUCURSALColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES3.DESC_PERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_CXP_PTES3.DESC_PERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES3.FE_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_DOCNull()
            Me(Me.tableREPORTE_CXP_PTES3.FE_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_VENNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES3.FE_VENColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_VENNull()
            Me(Me.tableREPORTE_CXP_PTES3.FE_VENColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_ININull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES3.IMP_INIColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_ININull()
            Me(Me.tableREPORTE_CXP_PTES3.IMP_INIColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES3.IMP_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DOCNull()
            Me(Me.tableREPORTE_CXP_PTES3.IMP_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES3.MONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONNull()
            Me(Me.tableREPORTE_CXP_PTES3.MONColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES3.DESC_MONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONNull()
            Me(Me.tableREPORTE_CXP_PTES3.DESC_MONColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES3.DESC_MONEDAColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONEDANull()
            Me(Me.tableREPORTE_CXP_PTES3.DESC_MONEDAColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssolesNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES3.solesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsolesNull()
            Me(Me.tableREPORTE_CXP_PTES3.solesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdolaresNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES3.dolaresColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdolaresNull()
            Me(Me.tableREPORTE_CXP_PTES3.dolaresColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_AUXNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES3.COD_AUXColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_AUXNull()
            Me(Me.tableREPORTE_CXP_PTES3.COD_AUXColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES3.COD_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_COMPNull()
            Me(Me.tableREPORTE_CXP_PTES3.COD_COMPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CXP_PTES3.NRO_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMPNull()
            Me(Me.tableREPORTE_CXP_PTES3.NRO_COMPColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_DESCUADRE_COMPRow
        Inherits System.Data.DataRow
        
        Private tableREPORTE_DESCUADRE_COMP As REPORTE_DESCUADRE_COMPDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_DESCUADRE_COMP = CType(Me.Table,REPORTE_DESCUADRE_COMPDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Return CType(Me(Me.tableREPORTE_DESCUADRE_COMP.COD_AUXColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_COMP.COD_AUXColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_AUX() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_COMP.DESC_AUXColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_AUX' de la tabla 'REPORTE_DESCUADRE_COMP' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_COMP.DESC_AUXColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_DESCUADRE_COMP.COD_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_COMP.COD_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_COMP.DESC_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_COMP' de la tabla 'REPORTE_DESCUADRE_COMP' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_COMP.DESC_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_DESCUADRE_COMP.NRO_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_COMP.NRO_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEBE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_COMP.DEBEColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DEBE' de la tabla 'REPORTE_DESCUADRE_COMP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_COMP.DEBEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HABER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_COMP.HABERColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'HABER' de la tabla 'REPORTE_DESCUADRE_COMP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_COMP.HABERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_USU() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_COMP.COD_USUColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_USU' de la tabla 'REPORTE_DESCUADRE_COMP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_COMP.COD_USUColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NICK() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_COMP.NICKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NICK' de la tabla 'REPORTE_DESCUADRE_COMP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_COMP.NICKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_COMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_COMP.FECHA_COMPColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FECHA_COMP' de la tabla 'REPORTE_DESCUADRE_COMP' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_COMP.FECHA_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_MODULO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_COMP.STATUS_MODULOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'STATUS_MODULO' de la tabla 'REPORTE_DESCUADRE_COMP' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_COMP.STATUS_MODULOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_AUXNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_COMP.DESC_AUXColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_AUXNull()
            Me(Me.tableREPORTE_DESCUADRE_COMP.DESC_AUXColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_COMP.DESC_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_COMPNull()
            Me(Me.tableREPORTE_DESCUADRE_COMP.DESC_COMPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEBENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_COMP.DEBEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEBENull()
            Me(Me.tableREPORTE_DESCUADRE_COMP.DEBEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHABERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_COMP.HABERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHABERNull()
            Me(Me.tableREPORTE_DESCUADRE_COMP.HABERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_USUNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_COMP.COD_USUColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_USUNull()
            Me(Me.tableREPORTE_DESCUADRE_COMP.COD_USUColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNICKNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_COMP.NICKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNICKNull()
            Me(Me.tableREPORTE_DESCUADRE_COMP.NICKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_COMP.FECHA_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_COMPNull()
            Me(Me.tableREPORTE_DESCUADRE_COMP.FECHA_COMPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_MODULONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_COMP.STATUS_MODULOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_MODULONull()
            Me(Me.tableREPORTE_DESCUADRE_COMP.STATUS_MODULOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_DESCUADRE_CXCRow
        Inherits System.Data.DataRow
        
        Private tableREPORTE_DESCUADRE_CXC As REPORTE_DESCUADRE_CXCDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_DESCUADRE_CXC = CType(Me.Table,REPORTE_DESCUADRE_CXCDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_SUCURSAL() As String
            Get
                Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.COD_SUCURSALColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.COD_SUCURSALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_SUCURSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.DESC_SUCURSALColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_SUCURSAL' de la tabla 'REPORTE_DESCUADRE_CXC' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.DESC_SUCURSALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.COD_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property desc_doc() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.desc_docColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'desc_doc' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.desc_docColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.NRO_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.COD_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.DESC_PERColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.DESC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_AÑO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.FE_AÑOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_AÑO' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.FE_AÑOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_MES() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.FE_MESColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_MES' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.FE_MESColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.NRO_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NRO_COMP' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.NRO_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.COD_MPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_MP' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.COD_MPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_MP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.NRO_MPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NRO_MP' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.NRO_MPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.NRO_DOC_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.NRO_DOC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.FECHA_DOCColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FECHA_DOC' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.FECHA_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_VEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.FECHA_VENColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FECHA_VEN' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.FECHA_VENColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_D_H() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.COD_D_HColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_D_H' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.COD_D_HColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.COD_MONEDAColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_MONEDA' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.COD_MONEDAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CAMBIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.TIPO_CAMBIOColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'TIPO_CAMBIO' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.TIPO_CAMBIOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_DOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.IMP_DOCColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_DOC' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.IMP_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.INGRESOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'INGRESO' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.INGRESOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_OPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.TIPO_OPEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'TIPO_OPE' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.TIPO_OPEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Desc_moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.Desc_monedaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Desc_moneda' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.Desc_monedaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PENDIENTE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.PENDIENTEColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PENDIENTE' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.PENDIENTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANCELACION() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.CANCELACIONColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CANCELACION' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.CANCELACIONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PTE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXC.PTEColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PTE' de la tabla 'REPORTE_DESCUADRE_CXC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXC.PTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_SUCURSALNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.DESC_SUCURSALColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_SUCURSALNull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.DESC_SUCURSALColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdesc_docNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.desc_docColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdesc_docNull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.desc_docColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.DESC_PERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.DESC_PERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_AÑONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.FE_AÑOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_AÑONull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.FE_AÑOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_MESNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.FE_MESColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_MESNull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.FE_MESColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.NRO_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMPNull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.NRO_COMPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.COD_MPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MPNull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.COD_MPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_MPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.NRO_MPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_MPNull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.NRO_MPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.FECHA_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DOCNull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.FECHA_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_VENNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.FECHA_VENColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_VENNull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.FECHA_VENColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_D_HNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.COD_D_HColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_D_HNull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.COD_D_HColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.COD_MONEDAColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MONEDANull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.COD_MONEDAColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CAMBIONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.TIPO_CAMBIOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CAMBIONull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.TIPO_CAMBIOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.IMP_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DOCNull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.IMP_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.INGRESOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESONull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.INGRESOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_OPENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.TIPO_OPEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_OPENull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.TIPO_OPEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesc_monedaNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.Desc_monedaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesc_monedaNull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.Desc_monedaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPENDIENTENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.PENDIENTEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPENDIENTENull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.PENDIENTEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANCELACIONNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.CANCELACIONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANCELACIONNull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.CANCELACIONColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPTENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXC.PTEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPTENull()
            Me(Me.tableREPORTE_DESCUADRE_CXC.PTEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_DESCUADRE_CXPRow
        Inherits System.Data.DataRow
        
        Private tableREPORTE_DESCUADRE_CXP As REPORTE_DESCUADRE_CXPDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_DESCUADRE_CXP = CType(Me.Table,REPORTE_DESCUADRE_CXPDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_SUCURSAL() As String
            Get
                Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.COD_SUCURSALColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.COD_SUCURSALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_SUCURSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.DESC_SUCURSALColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_SUCURSAL' de la tabla 'REPORTE_DESCUADRE_CXP' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.DESC_SUCURSALColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.COD_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property desc_doc() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.desc_docColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'desc_doc' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.desc_docColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.NRO_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.COD_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.DESC_PERColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.DESC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_AÑO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.FE_AÑOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_AÑO' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.FE_AÑOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FE_MES() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.FE_MESColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FE_MES' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.FE_MESColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.NRO_COMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NRO_COMP' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.NRO_COMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.COD_MPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_MP' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.COD_MPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_MP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.NRO_MPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NRO_MP' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.NRO_MPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.NRO_DOC_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.NRO_DOC_PERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.FECHA_DOCColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FECHA_DOC' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.FECHA_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_VEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.FECHA_VENColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'FECHA_VEN' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.FECHA_VENColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_D_H() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.COD_D_HColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_D_H' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.COD_D_HColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.COD_MONEDAColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'COD_MONEDA' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.COD_MONEDAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CAMBIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.TIPO_CAMBIOColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'TIPO_CAMBIO' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.TIPO_CAMBIOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_DOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.IMP_DOCColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IMP_DOC' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.IMP_DOCColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.INGRESOColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'INGRESO' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.INGRESOColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_OPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.TIPO_OPEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'TIPO_OPE' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.TIPO_OPEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Desc_moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.Desc_monedaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Desc_moneda' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.Desc_monedaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PENDIENTE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.PENDIENTEColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PENDIENTE' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.PENDIENTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANCELACION() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.CANCELACIONColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CANCELACION' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.CANCELACIONColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PTE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_DESCUADRE_CXP.PTEColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PTE' de la tabla 'REPORTE_DESCUADRE_CXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_DESCUADRE_CXP.PTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_SUCURSALNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.DESC_SUCURSALColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_SUCURSALNull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.DESC_SUCURSALColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdesc_docNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.desc_docColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdesc_docNull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.desc_docColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.DESC_PERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.DESC_PERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_AÑONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.FE_AÑOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_AÑONull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.FE_AÑOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFE_MESNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.FE_MESColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFE_MESNull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.FE_MESColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.NRO_COMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMPNull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.NRO_COMPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.COD_MPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MPNull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.COD_MPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_MPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.NRO_MPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_MPNull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.NRO_MPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.FECHA_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DOCNull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.FECHA_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_VENNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.FECHA_VENColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_VENNull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.FECHA_VENColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_D_HNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.COD_D_HColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_D_HNull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.COD_D_HColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.COD_MONEDAColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MONEDANull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.COD_MONEDAColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CAMBIONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.TIPO_CAMBIOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CAMBIONull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.TIPO_CAMBIOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.IMP_DOCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DOCNull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.IMP_DOCColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.INGRESOColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESONull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.INGRESOColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_OPENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.TIPO_OPEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_OPENull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.TIPO_OPEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesc_monedaNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.Desc_monedaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesc_monedaNull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.Desc_monedaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPENDIENTENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.PENDIENTEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPENDIENTENull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.PENDIENTEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANCELACIONNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.CANCELACIONColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANCELACIONNull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.CANCELACIONColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPTENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_DESCUADRE_CXP.PTEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPTENull()
            Me(Me.tableREPORTE_DESCUADRE_CXP.PTEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_CXC_CANC1RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As REPORTE_CXC_CANC1Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_CXC_CANC1Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_CXC_CANC1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_CXC_PTES1RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As REPORTE_CXC_PTES1Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_CXC_PTES1Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_CXC_PTES1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_CXC_PTES2RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As REPORTE_CXC_PTES2Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_CXC_PTES2Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_CXC_PTES2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_CXC_PTES3RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As REPORTE_CXC_PTES3Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_CXC_PTES3Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_CXC_PTES3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_CXP_CANC1RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As REPORTE_CXP_CANC1Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_CXP_CANC1Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_CXP_CANC1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_CXP_PTES1RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As REPORTE_CXP_PTES1Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_CXP_PTES1Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_CXP_PTES1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_CXP_PTES2RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As REPORTE_CXP_PTES2Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_CXP_PTES2Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_CXP_PTES2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_CXP_PTES3RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As REPORTE_CXP_PTES3Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_CXP_PTES3Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_CXP_PTES3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_DESCUADRE_COMPRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As REPORTE_DESCUADRE_COMPRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_DESCUADRE_COMPRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_DESCUADRE_COMPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_DESCUADRE_CXCRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As REPORTE_DESCUADRE_CXCRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_DESCUADRE_CXCRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_DESCUADRE_CXCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_DESCUADRE_CXPRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As REPORTE_DESCUADRE_CXPRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_DESCUADRE_CXPRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_DESCUADRE_CXPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DT_REPORTESTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_CXC_CANC1TableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_CXC_CANC1"
            tableMapping.ColumnMappings.Add("COD_SUCURSAL", "COD_SUCURSAL")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("FE_AÑO", "FE_AÑO")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("FE_MES", "FE_MES")
            tableMapping.ColumnMappings.Add("COD_BANCO", "COD_BANCO")
            tableMapping.ColumnMappings.Add("COD_MP", "COD_MP")
            tableMapping.ColumnMappings.Add("NRO_MP", "NRO_MP")
            tableMapping.ColumnMappings.Add("NRO_DOC_PER", "NRO_DOC_PER")
            tableMapping.ColumnMappings.Add("FECHA_DOC", "FECHA_DOC")
            tableMapping.ColumnMappings.Add("COD_D_H", "COD_D_H")
            tableMapping.ColumnMappings.Add("COD_MONEDA", "COD_MONEDA")
            tableMapping.ColumnMappings.Add("TIPO_CAMBIO", "TIPO_CAMBIO")
            tableMapping.ColumnMappings.Add("IMP_DOC", "IMP_DOC")
            tableMapping.ColumnMappings.Add("TIPO_OPE", "TIPO_OPE")
            tableMapping.ColumnMappings.Add("desc_mp", "desc_mp")
            tableMapping.ColumnMappings.Add("DESC_SUCURSAL", "DESC_SUCURSAL")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("Desc_moneda", "Desc_moneda")
            tableMapping.ColumnMappings.Add("desc_doc", "desc_doc")
            tableMapping.ColumnMappings.Add("desc_corta", "desc_corta")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_CXC_CANC1"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_SUC", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_SUCURSAL", System.Data.SqlDbType.[Char], 4, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_PER", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_PER", System.Data.SqlDbType.[Char], 5, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA1", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA2", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REPORTES.REPORTE_CXC_CANC1DataTable, ByVal ST_SUC As String, ByVal COD_SUCURSAL As String, ByVal ST_PER As String, ByVal COD_PER As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ST_SUC,String)
            End If
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(COD_PER,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ST_SUC As String, ByVal COD_SUCURSAL As String, ByVal ST_PER As String, ByVal COD_PER As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date)) As DT_REPORTES.REPORTE_CXC_CANC1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ST_SUC,String)
            End If
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(COD_PER,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim dataTable As DT_REPORTES.REPORTE_CXC_CANC1DataTable = New DT_REPORTES.REPORTE_CXC_CANC1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_CXC_PTES1TableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_CXC_PTES1"
            tableMapping.ColumnMappings.Add("SUC", "SUC")
            tableMapping.ColumnMappings.Add("SUCURSAL", "SUCURSAL")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("DOC", "DOC")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("RUC", "RUC")
            tableMapping.ColumnMappings.Add("FE_DOC", "FE_DOC")
            tableMapping.ColumnMappings.Add("FE_VEN", "FE_VEN")
            tableMapping.ColumnMappings.Add("IMP_INI", "IMP_INI")
            tableMapping.ColumnMappings.Add("IMP_DOC", "IMP_DOC")
            tableMapping.ColumnMappings.Add("MON", "MON")
            tableMapping.ColumnMappings.Add("DESC_MON", "DESC_MON")
            tableMapping.ColumnMappings.Add("DESC_MONEDA", "DESC_MONEDA")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_CXC_PTES1"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_SUCURSAL", System.Data.SqlDbType.[Char], 4, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_SUC", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA1", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA2", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_PER", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_PER", System.Data.SqlDbType.[Char], 5, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_DOC", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_DOC", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_CUENTA", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_CUENTA", System.Data.SqlDbType.VarChar, 8, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REPORTES.REPORTE_CXC_PTES1DataTable, ByVal COD_SUCURSAL As String, ByVal ST_SUC As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date), ByVal ST_PER As String, ByVal COD_PER As String, ByVal ST_DOC As String, ByVal COD_DOC As String, ByVal ST_CUENTA As String, ByVal COD_CUENTA As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ST_SUC,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(COD_PER,String)
            End If
            If (ST_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ST_DOC,String)
            End If
            If (COD_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(COD_DOC,String)
            End If
            If (ST_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(ST_CUENTA,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(COD_CUENTA,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal COD_SUCURSAL As String, ByVal ST_SUC As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date), ByVal ST_PER As String, ByVal COD_PER As String, ByVal ST_DOC As String, ByVal COD_DOC As String, ByVal ST_CUENTA As String, ByVal COD_CUENTA As String) As DT_REPORTES.REPORTE_CXC_PTES1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ST_SUC,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(COD_PER,String)
            End If
            If (ST_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ST_DOC,String)
            End If
            If (COD_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(COD_DOC,String)
            End If
            If (ST_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(ST_CUENTA,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(COD_CUENTA,String)
            End If
            Dim dataTable As DT_REPORTES.REPORTE_CXC_PTES1DataTable = New DT_REPORTES.REPORTE_CXC_PTES1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_CXC_PTES2TableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_CXC_PTES2"
            tableMapping.ColumnMappings.Add("SUC", "SUC")
            tableMapping.ColumnMappings.Add("SUCURSAL", "SUCURSAL")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("DOC", "DOC")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("RUC", "RUC")
            tableMapping.ColumnMappings.Add("FE_DOC", "FE_DOC")
            tableMapping.ColumnMappings.Add("FE_VEN", "FE_VEN")
            tableMapping.ColumnMappings.Add("IMP_INI", "IMP_INI")
            tableMapping.ColumnMappings.Add("IMP_DOC", "IMP_DOC")
            tableMapping.ColumnMappings.Add("MON", "MON")
            tableMapping.ColumnMappings.Add("DESC_MON", "DESC_MON")
            tableMapping.ColumnMappings.Add("DESC_MONEDA", "DESC_MONEDA")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_CXC_PTES2"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_SUCURSAL", System.Data.SqlDbType.[Char], 4, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_SUC", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA1", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA2", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_PER", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_PER", System.Data.SqlDbType.[Char], 5, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_DOC", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_DOC", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_CUENTA", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_CUENTA", System.Data.SqlDbType.VarChar, 8, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REPORTES.REPORTE_CXC_PTES2DataTable, ByVal COD_SUCURSAL As String, ByVal ST_SUC As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date), ByVal ST_PER As String, ByVal COD_PER As String, ByVal ST_DOC As String, ByVal COD_DOC As String, ByVal ST_CUENTA As String, ByVal COD_CUENTA As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ST_SUC,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(COD_PER,String)
            End If
            If (ST_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ST_DOC,String)
            End If
            If (COD_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(COD_DOC,String)
            End If
            If (ST_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(ST_CUENTA,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(COD_CUENTA,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal COD_SUCURSAL As String, ByVal ST_SUC As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date), ByVal ST_PER As String, ByVal COD_PER As String, ByVal ST_DOC As String, ByVal COD_DOC As String, ByVal ST_CUENTA As String, ByVal COD_CUENTA As String) As DT_REPORTES.REPORTE_CXC_PTES2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ST_SUC,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(COD_PER,String)
            End If
            If (ST_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ST_DOC,String)
            End If
            If (COD_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(COD_DOC,String)
            End If
            If (ST_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(ST_CUENTA,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(COD_CUENTA,String)
            End If
            Dim dataTable As DT_REPORTES.REPORTE_CXC_PTES2DataTable = New DT_REPORTES.REPORTE_CXC_PTES2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_CXC_PTES3TableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_CXC_PTES3"
            tableMapping.ColumnMappings.Add("SUC", "SUC")
            tableMapping.ColumnMappings.Add("SUCURSAL", "SUCURSAL")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("DOC", "DOC")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("RUC", "RUC")
            tableMapping.ColumnMappings.Add("FE_DOC", "FE_DOC")
            tableMapping.ColumnMappings.Add("FE_VEN", "FE_VEN")
            tableMapping.ColumnMappings.Add("IMP_INI", "IMP_INI")
            tableMapping.ColumnMappings.Add("IMP_DOC", "IMP_DOC")
            tableMapping.ColumnMappings.Add("MON", "MON")
            tableMapping.ColumnMappings.Add("DESC_MON", "DESC_MON")
            tableMapping.ColumnMappings.Add("DESC_MONEDA", "DESC_MONEDA")
            tableMapping.ColumnMappings.Add("soles", "soles")
            tableMapping.ColumnMappings.Add("dolares", "dolares")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_CXC_PTES3"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_SUCURSAL", System.Data.SqlDbType.[Char], 4, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_SUC", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA1", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA2", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_PER", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_PER", System.Data.SqlDbType.[Char], 5, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_DOC", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_DOC", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_CUENTA", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_CUENTA", System.Data.SqlDbType.VarChar, 8, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REPORTES.REPORTE_CXC_PTES3DataTable, ByVal COD_SUCURSAL As String, ByVal ST_SUC As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date), ByVal ST_PER As String, ByVal COD_PER As String, ByVal ST_DOC As String, ByVal COD_DOC As String, ByVal ST_CUENTA As String, ByVal COD_CUENTA As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ST_SUC,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(COD_PER,String)
            End If
            If (ST_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ST_DOC,String)
            End If
            If (COD_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(COD_DOC,String)
            End If
            If (ST_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(ST_CUENTA,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(COD_CUENTA,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal COD_SUCURSAL As String, ByVal ST_SUC As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date), ByVal ST_PER As String, ByVal COD_PER As String, ByVal ST_DOC As String, ByVal COD_DOC As String, ByVal ST_CUENTA As String, ByVal COD_CUENTA As String) As DT_REPORTES.REPORTE_CXC_PTES3DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ST_SUC,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(COD_PER,String)
            End If
            If (ST_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ST_DOC,String)
            End If
            If (COD_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(COD_DOC,String)
            End If
            If (ST_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(ST_CUENTA,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(COD_CUENTA,String)
            End If
            Dim dataTable As DT_REPORTES.REPORTE_CXC_PTES3DataTable = New DT_REPORTES.REPORTE_CXC_PTES3DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_CXP_CANC1TableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_CXP_CANC1"
            tableMapping.ColumnMappings.Add("COD_SUCURSAL", "COD_SUCURSAL")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("FE_AÑO", "FE_AÑO")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("FE_MES", "FE_MES")
            tableMapping.ColumnMappings.Add("COD_BANCO", "COD_BANCO")
            tableMapping.ColumnMappings.Add("COD_MP", "COD_MP")
            tableMapping.ColumnMappings.Add("NRO_MP", "NRO_MP")
            tableMapping.ColumnMappings.Add("NRO_DOC_PER", "NRO_DOC_PER")
            tableMapping.ColumnMappings.Add("FECHA_DOC", "FECHA_DOC")
            tableMapping.ColumnMappings.Add("COD_D_H", "COD_D_H")
            tableMapping.ColumnMappings.Add("COD_MONEDA", "COD_MONEDA")
            tableMapping.ColumnMappings.Add("TIPO_CAMBIO", "TIPO_CAMBIO")
            tableMapping.ColumnMappings.Add("IMP_DOC", "IMP_DOC")
            tableMapping.ColumnMappings.Add("TIPO_OPE", "TIPO_OPE")
            tableMapping.ColumnMappings.Add("desc_mp", "desc_mp")
            tableMapping.ColumnMappings.Add("DESC_SUCURSAL", "DESC_SUCURSAL")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("Desc_moneda", "Desc_moneda")
            tableMapping.ColumnMappings.Add("desc_doc", "desc_doc")
            tableMapping.ColumnMappings.Add("desc_corta", "desc_corta")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_CXP_CANC1"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_SUC", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_SUCURSAL", System.Data.SqlDbType.[Char], 4, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_PER", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_PER", System.Data.SqlDbType.[Char], 5, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA1", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA2", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_CUENTA", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_CUENTA", System.Data.SqlDbType.VarChar, 8, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REPORTES.REPORTE_CXP_CANC1DataTable, ByVal ST_SUC As String, ByVal COD_SUCURSAL As String, ByVal ST_PER As String, ByVal COD_PER As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date), ByVal ST_CUENTA As String, ByVal COD_CUENTA As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ST_SUC,String)
            End If
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(COD_PER,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (ST_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ST_CUENTA,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(COD_CUENTA,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ST_SUC As String, ByVal COD_SUCURSAL As String, ByVal ST_PER As String, ByVal COD_PER As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date), ByVal ST_CUENTA As String, ByVal COD_CUENTA As String) As DT_REPORTES.REPORTE_CXP_CANC1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ST_SUC,String)
            End If
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(COD_PER,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (ST_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ST_CUENTA,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(COD_CUENTA,String)
            End If
            Dim dataTable As DT_REPORTES.REPORTE_CXP_CANC1DataTable = New DT_REPORTES.REPORTE_CXP_CANC1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_CXP_PTES1TableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_CXP_PTES1"
            tableMapping.ColumnMappings.Add("SUC", "SUC")
            tableMapping.ColumnMappings.Add("SUCURSAL", "SUCURSAL")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("DOC", "DOC")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("RUC", "RUC")
            tableMapping.ColumnMappings.Add("FE_DOC", "FE_DOC")
            tableMapping.ColumnMappings.Add("FE_VEN", "FE_VEN")
            tableMapping.ColumnMappings.Add("IMP_INI", "IMP_INI")
            tableMapping.ColumnMappings.Add("IMP_DOC", "IMP_DOC")
            tableMapping.ColumnMappings.Add("MON", "MON")
            tableMapping.ColumnMappings.Add("DESC_MON", "DESC_MON")
            tableMapping.ColumnMappings.Add("DESC_MONEDA", "DESC_MONEDA")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_CXP_PTES1"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_SUCURSAL", System.Data.SqlDbType.[Char], 4, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_SUC", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA1", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA2", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_PER", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_PER", System.Data.SqlDbType.[Char], 5, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_DOC", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_DOC", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_CUENTA", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_CUENTA", System.Data.SqlDbType.VarChar, 8, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REPORTES.REPORTE_CXP_PTES1DataTable, ByVal COD_SUCURSAL As String, ByVal ST_SUC As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date), ByVal ST_PER As String, ByVal COD_PER As String, ByVal ST_DOC As String, ByVal COD_DOC As String, ByVal ST_CUENTA As String, ByVal COD_CUENTA As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ST_SUC,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(COD_PER,String)
            End If
            If (ST_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ST_DOC,String)
            End If
            If (COD_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(COD_DOC,String)
            End If
            If (ST_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(ST_CUENTA,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(COD_CUENTA,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal COD_SUCURSAL As String, ByVal ST_SUC As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date), ByVal ST_PER As String, ByVal COD_PER As String, ByVal ST_DOC As String, ByVal COD_DOC As String, ByVal ST_CUENTA As String, ByVal COD_CUENTA As String) As DT_REPORTES.REPORTE_CXP_PTES1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ST_SUC,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(COD_PER,String)
            End If
            If (ST_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ST_DOC,String)
            End If
            If (COD_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(COD_DOC,String)
            End If
            If (ST_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(ST_CUENTA,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(COD_CUENTA,String)
            End If
            Dim dataTable As DT_REPORTES.REPORTE_CXP_PTES1DataTable = New DT_REPORTES.REPORTE_CXP_PTES1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_CXP_PTES2TableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_CXP_PTES2"
            tableMapping.ColumnMappings.Add("SUC", "SUC")
            tableMapping.ColumnMappings.Add("SUCURSAL", "SUCURSAL")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("DOC", "DOC")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("RUC", "RUC")
            tableMapping.ColumnMappings.Add("FE_DOC", "FE_DOC")
            tableMapping.ColumnMappings.Add("FE_VEN", "FE_VEN")
            tableMapping.ColumnMappings.Add("IMP_INI", "IMP_INI")
            tableMapping.ColumnMappings.Add("IMP_DOC", "IMP_DOC")
            tableMapping.ColumnMappings.Add("MON", "MON")
            tableMapping.ColumnMappings.Add("DESC_MON", "DESC_MON")
            tableMapping.ColumnMappings.Add("DESC_MONEDA", "DESC_MONEDA")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_CXP_PTES2"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_SUCURSAL", System.Data.SqlDbType.[Char], 4, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_SUC", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA1", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA2", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_PER", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_PER", System.Data.SqlDbType.[Char], 5, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_DOC", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_DOC", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_CUENTA", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_CUENTA", System.Data.SqlDbType.VarChar, 8, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REPORTES.REPORTE_CXP_PTES2DataTable, ByVal COD_SUCURSAL As String, ByVal ST_SUC As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date), ByVal ST_PER As String, ByVal COD_PER As String, ByVal ST_DOC As String, ByVal COD_DOC As String, ByVal ST_CUENTA As String, ByVal COD_CUENTA As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ST_SUC,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(COD_PER,String)
            End If
            If (ST_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ST_DOC,String)
            End If
            If (COD_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(COD_DOC,String)
            End If
            If (ST_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(ST_CUENTA,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(COD_CUENTA,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal COD_SUCURSAL As String, ByVal ST_SUC As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date), ByVal ST_PER As String, ByVal COD_PER As String, ByVal ST_DOC As String, ByVal COD_DOC As String, ByVal ST_CUENTA As String, ByVal COD_CUENTA As String) As DT_REPORTES.REPORTE_CXP_PTES2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ST_SUC,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(COD_PER,String)
            End If
            If (ST_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ST_DOC,String)
            End If
            If (COD_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(COD_DOC,String)
            End If
            If (ST_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(ST_CUENTA,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(COD_CUENTA,String)
            End If
            Dim dataTable As DT_REPORTES.REPORTE_CXP_PTES2DataTable = New DT_REPORTES.REPORTE_CXP_PTES2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_CXP_PTES3TableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_CXP_PTES3"
            tableMapping.ColumnMappings.Add("SUC", "SUC")
            tableMapping.ColumnMappings.Add("SUCURSAL", "SUCURSAL")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("DOC", "DOC")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("RUC", "RUC")
            tableMapping.ColumnMappings.Add("FE_DOC", "FE_DOC")
            tableMapping.ColumnMappings.Add("FE_VEN", "FE_VEN")
            tableMapping.ColumnMappings.Add("IMP_INI", "IMP_INI")
            tableMapping.ColumnMappings.Add("IMP_DOC", "IMP_DOC")
            tableMapping.ColumnMappings.Add("MON", "MON")
            tableMapping.ColumnMappings.Add("DESC_MON", "DESC_MON")
            tableMapping.ColumnMappings.Add("DESC_MONEDA", "DESC_MONEDA")
            tableMapping.ColumnMappings.Add("soles", "soles")
            tableMapping.ColumnMappings.Add("dolares", "dolares")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_CXP_PTES3"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_SUCURSAL", System.Data.SqlDbType.[Char], 4, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_SUC", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA1", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FECHA2", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_PER", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_PER", System.Data.SqlDbType.[Char], 5, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_DOC", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_DOC", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ST_CUENTA", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_CUENTA", System.Data.SqlDbType.VarChar, 8, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REPORTES.REPORTE_CXP_PTES3DataTable, ByVal COD_SUCURSAL As String, ByVal ST_SUC As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date), ByVal ST_PER As String, ByVal COD_PER As String, ByVal ST_DOC As String, ByVal COD_DOC As String, ByVal ST_CUENTA As String, ByVal COD_CUENTA As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ST_SUC,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(COD_PER,String)
            End If
            If (ST_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ST_DOC,String)
            End If
            If (COD_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(COD_DOC,String)
            End If
            If (ST_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(ST_CUENTA,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(COD_CUENTA,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal COD_SUCURSAL As String, ByVal ST_SUC As String, ByVal FECHA1 As System.Nullable(Of Date), ByVal FECHA2 As System.Nullable(Of Date), ByVal ST_PER As String, ByVal COD_PER As String, ByVal ST_DOC As String, ByVal COD_DOC As String, ByVal ST_CUENTA As String, ByVal COD_CUENTA As String) As DT_REPORTES.REPORTE_CXP_PTES3DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (ST_SUC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ST_SUC,String)
            End If
            If (FECHA1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FECHA1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (FECHA2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FECHA2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (ST_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(ST_PER,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(COD_PER,String)
            End If
            If (ST_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(ST_DOC,String)
            End If
            If (COD_DOC Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(COD_DOC,String)
            End If
            If (ST_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(ST_CUENTA,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(COD_CUENTA,String)
            End If
            Dim dataTable As DT_REPORTES.REPORTE_CXP_PTES3DataTable = New DT_REPORTES.REPORTE_CXP_PTES3DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_DESCUADRE_COMPTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_DESCUADRE_COMP"
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("DESC_AUX", "DESC_AUX")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("DESC_COMP", "DESC_COMP")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("DEBE", "DEBE")
            tableMapping.ColumnMappings.Add("HABER", "HABER")
            tableMapping.ColumnMappings.Add("COD_USU", "COD_USU")
            tableMapping.ColumnMappings.Add("NICK", "NICK")
            tableMapping.ColumnMappings.Add("FECHA_COMP", "FECHA_COMP")
            tableMapping.ColumnMappings.Add("STATUS_MODULO", "STATUS_MODULO")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_DESCUADRE_COMP"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@TIPO", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FE_AÑO", System.Data.SqlDbType.[Char], 4, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FE_MES", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REPORTES.REPORTE_DESCUADRE_COMPDataTable, ByVal TIPO As String, ByVal FE_AÑO As String, ByVal FE_MES As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (TIPO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(TIPO,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FE_MES,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal TIPO As String, ByVal FE_AÑO As String, ByVal FE_MES As String) As DT_REPORTES.REPORTE_DESCUADRE_COMPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (TIPO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(TIPO,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FE_MES,String)
            End If
            Dim dataTable As DT_REPORTES.REPORTE_DESCUADRE_COMPDataTable = New DT_REPORTES.REPORTE_DESCUADRE_COMPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_DESCUADRE_CXCTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_DESCUADRE_CXC"
            tableMapping.ColumnMappings.Add("COD_SUCURSAL", "COD_SUCURSAL")
            tableMapping.ColumnMappings.Add("DESC_SUCURSAL", "DESC_SUCURSAL")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("desc_doc", "desc_doc")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("FE_AÑO", "FE_AÑO")
            tableMapping.ColumnMappings.Add("FE_MES", "FE_MES")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("COD_MP", "COD_MP")
            tableMapping.ColumnMappings.Add("NRO_MP", "NRO_MP")
            tableMapping.ColumnMappings.Add("NRO_DOC_PER", "NRO_DOC_PER")
            tableMapping.ColumnMappings.Add("FECHA_DOC", "FECHA_DOC")
            tableMapping.ColumnMappings.Add("FECHA_VEN", "FECHA_VEN")
            tableMapping.ColumnMappings.Add("COD_D_H", "COD_D_H")
            tableMapping.ColumnMappings.Add("COD_MONEDA", "COD_MONEDA")
            tableMapping.ColumnMappings.Add("TIPO_CAMBIO", "TIPO_CAMBIO")
            tableMapping.ColumnMappings.Add("IMP_DOC", "IMP_DOC")
            tableMapping.ColumnMappings.Add("INGRESO", "INGRESO")
            tableMapping.ColumnMappings.Add("TIPO_OPE", "TIPO_OPE")
            tableMapping.ColumnMappings.Add("Desc_moneda", "Desc_moneda")
            tableMapping.ColumnMappings.Add("PENDIENTE", "PENDIENTE")
            tableMapping.ColumnMappings.Add("CANCELACION", "CANCELACION")
            tableMapping.ColumnMappings.Add("PTE", "PTE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_DESCUADRE_CXC"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_SUCURSAL", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@STATUS_SUCURSAL", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FE_AÑO", System.Data.SqlDbType.[Char], 4, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FE_MES", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REPORTES.REPORTE_DESCUADRE_CXCDataTable, ByVal COD_SUCURSAL As String, ByVal STATUS_SUCURSAL As String, ByVal FE_AÑO As String, ByVal FE_MES As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (STATUS_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(STATUS_SUCURSAL,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FE_MES,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal COD_SUCURSAL As String, ByVal STATUS_SUCURSAL As String, ByVal FE_AÑO As String, ByVal FE_MES As String) As DT_REPORTES.REPORTE_DESCUADRE_CXCDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (STATUS_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(STATUS_SUCURSAL,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FE_MES,String)
            End If
            Dim dataTable As DT_REPORTES.REPORTE_DESCUADRE_CXCDataTable = New DT_REPORTES.REPORTE_DESCUADRE_CXCDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_DESCUADRE_CXPTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_DESCUADRE_CXP"
            tableMapping.ColumnMappings.Add("COD_SUCURSAL", "COD_SUCURSAL")
            tableMapping.ColumnMappings.Add("DESC_SUCURSAL", "DESC_SUCURSAL")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("desc_doc", "desc_doc")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("FE_AÑO", "FE_AÑO")
            tableMapping.ColumnMappings.Add("FE_MES", "FE_MES")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("COD_MP", "COD_MP")
            tableMapping.ColumnMappings.Add("NRO_MP", "NRO_MP")
            tableMapping.ColumnMappings.Add("NRO_DOC_PER", "NRO_DOC_PER")
            tableMapping.ColumnMappings.Add("FECHA_DOC", "FECHA_DOC")
            tableMapping.ColumnMappings.Add("FECHA_VEN", "FECHA_VEN")
            tableMapping.ColumnMappings.Add("COD_D_H", "COD_D_H")
            tableMapping.ColumnMappings.Add("COD_MONEDA", "COD_MONEDA")
            tableMapping.ColumnMappings.Add("TIPO_CAMBIO", "TIPO_CAMBIO")
            tableMapping.ColumnMappings.Add("IMP_DOC", "IMP_DOC")
            tableMapping.ColumnMappings.Add("INGRESO", "INGRESO")
            tableMapping.ColumnMappings.Add("TIPO_OPE", "TIPO_OPE")
            tableMapping.ColumnMappings.Add("Desc_moneda", "Desc_moneda")
            tableMapping.ColumnMappings.Add("PENDIENTE", "PENDIENTE")
            tableMapping.ColumnMappings.Add("CANCELACION", "CANCELACION")
            tableMapping.ColumnMappings.Add("PTE", "PTE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_DESCUADRE_CXP"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COD_SUCURSAL", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@STATUS_SUCURSAL", System.Data.SqlDbType.[Char], 1, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FE_AÑO", System.Data.SqlDbType.[Char], 4, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FE_MES", System.Data.SqlDbType.[Char], 2, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REPORTES.REPORTE_DESCUADRE_CXPDataTable, ByVal COD_SUCURSAL As String, ByVal STATUS_SUCURSAL As String, ByVal FE_AÑO As String, ByVal FE_MES As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (STATUS_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(STATUS_SUCURSAL,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FE_MES,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal COD_SUCURSAL As String, ByVal STATUS_SUCURSAL As String, ByVal FE_AÑO As String, ByVal FE_MES As String) As DT_REPORTES.REPORTE_DESCUADRE_CXPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_SUCURSAL,String)
            End If
            If (STATUS_SUCURSAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(STATUS_SUCURSAL,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(FE_MES,String)
            End If
            Dim dataTable As DT_REPORTES.REPORTE_DESCUADRE_CXPDataTable = New DT_REPORTES.REPORTE_DESCUADRE_CXPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace

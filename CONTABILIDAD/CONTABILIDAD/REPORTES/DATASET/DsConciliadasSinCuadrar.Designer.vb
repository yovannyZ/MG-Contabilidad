'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5485
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DsConciliadasSinCuadrar"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DsConciliadasSinCuadrar
    Inherits Global.System.Data.DataSet
    
    Private tableDt_01 As Dt_01DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Dt_01")) Is Nothing) Then
                MyBase.Tables.Add(New Dt_01DataTable(ds.Tables("Dt_01")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Dt_01() As Dt_01DataTable
        Get
            Return Me.tableDt_01
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DsConciliadasSinCuadrar = CType(MyBase.Clone,DsConciliadasSinCuadrar)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Dt_01")) Is Nothing) Then
                MyBase.Tables.Add(New Dt_01DataTable(ds.Tables("Dt_01")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDt_01 = CType(MyBase.Tables("Dt_01"),Dt_01DataTable)
        If (initTable = true) Then
            If (Not (Me.tableDt_01) Is Nothing) Then
                Me.tableDt_01.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DsConciliadasSinCuadrar"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsConciliadasSinCuadrar.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDt_01 = New Dt_01DataTable
        MyBase.Tables.Add(Me.tableDt_01)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDt_01() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DsConciliadasSinCuadrar = New DsConciliadasSinCuadrar
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Dt_01RowChangeEventHandler(ByVal sender As Object, ByVal e As Dt_01RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Dt_01DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCodMoneda As Global.System.Data.DataColumn
        
        Private columnDescMoneda As Global.System.Data.DataColumn
        
        Private columnFechaComp As Global.System.Data.DataColumn
        
        Private columnCodAux As Global.System.Data.DataColumn
        
        Private columnCodComp As Global.System.Data.DataColumn
        
        Private columnNroComp As Global.System.Data.DataColumn
        
        Private columnFechaDoc As Global.System.Data.DataColumn
        
        Private columnNrodoc As Global.System.Data.DataColumn
        
        Private columnCodDoc As Global.System.Data.DataColumn
        
        Private columnCodPer As Global.System.Data.DataColumn
        
        Private columnDescPer As Global.System.Data.DataColumn
        
        Private columnCodDH As Global.System.Data.DataColumn
        
        Private columnImpS As Global.System.Data.DataColumn
        
        Private columnImpD As Global.System.Data.DataColumn
        
        Private columnGlosa As Global.System.Data.DataColumn
        
        Private columnCodCuenta As Global.System.Data.DataColumn
        
        Private columnTipoCambio As Global.System.Data.DataColumn
        
        Private columnStatusConci As Global.System.Data.DataColumn
        
        Private columnFechaVenc As Global.System.Data.DataColumn
        
        Private columnNroDocPer As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Dt_01"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescMonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCompColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaComp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodAuxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodAux
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodCompColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodComp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NroCompColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNroComp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaDocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaDoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NrodocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNrodoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodDocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodDoc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodPerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodPer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescPerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescPer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodDHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodDH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GlosaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGlosa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodCuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoCambioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoCambio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusConciColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusConci
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaVencColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaVenc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NroDocPerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNroDocPer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Dt_01Row
            Get
                Return CType(Me.Rows(index),Dt_01Row)
            End Get
        End Property
        
        Public Event Dt_01RowChanging As Dt_01RowChangeEventHandler
        
        Public Event Dt_01RowChanged As Dt_01RowChangeEventHandler
        
        Public Event Dt_01RowDeleting As Dt_01RowChangeEventHandler
        
        Public Event Dt_01RowDeleted As Dt_01RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDt_01Row(ByVal row As Dt_01Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDt_01Row( _
                    ByVal CodMoneda As String,  _
                    ByVal DescMoneda As String,  _
                    ByVal FechaComp As Date,  _
                    ByVal CodAux As String,  _
                    ByVal CodComp As String,  _
                    ByVal NroComp As String,  _
                    ByVal FechaDoc As Date,  _
                    ByVal Nrodoc As String,  _
                    ByVal CodDoc As String,  _
                    ByVal CodPer As String,  _
                    ByVal DescPer As String,  _
                    ByVal CodDH As String,  _
                    ByVal ImpS As Decimal,  _
                    ByVal ImpD As Decimal,  _
                    ByVal Glosa As String,  _
                    ByVal CodCuenta As String,  _
                    ByVal TipoCambio As Decimal,  _
                    ByVal StatusConci As String,  _
                    ByVal FechaVenc As Date,  _
                    ByVal NroDocPer As String) As Dt_01Row
            Dim rowDt_01Row As Dt_01Row = CType(Me.NewRow,Dt_01Row)
            Dim columnValuesArray() As Object = New Object() {CodMoneda, DescMoneda, FechaComp, CodAux, CodComp, NroComp, FechaDoc, Nrodoc, CodDoc, CodPer, DescPer, CodDH, ImpS, ImpD, Glosa, CodCuenta, TipoCambio, StatusConci, FechaVenc, NroDocPer}
            rowDt_01Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowDt_01Row)
            Return rowDt_01Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Dt_01DataTable = CType(MyBase.Clone,Dt_01DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Dt_01DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodMoneda = MyBase.Columns("CodMoneda")
            Me.columnDescMoneda = MyBase.Columns("DescMoneda")
            Me.columnFechaComp = MyBase.Columns("FechaComp")
            Me.columnCodAux = MyBase.Columns("CodAux")
            Me.columnCodComp = MyBase.Columns("CodComp")
            Me.columnNroComp = MyBase.Columns("NroComp")
            Me.columnFechaDoc = MyBase.Columns("FechaDoc")
            Me.columnNrodoc = MyBase.Columns("Nrodoc")
            Me.columnCodDoc = MyBase.Columns("CodDoc")
            Me.columnCodPer = MyBase.Columns("CodPer")
            Me.columnDescPer = MyBase.Columns("DescPer")
            Me.columnCodDH = MyBase.Columns("CodDH")
            Me.columnImpS = MyBase.Columns("ImpS")
            Me.columnImpD = MyBase.Columns("ImpD")
            Me.columnGlosa = MyBase.Columns("Glosa")
            Me.columnCodCuenta = MyBase.Columns("CodCuenta")
            Me.columnTipoCambio = MyBase.Columns("TipoCambio")
            Me.columnStatusConci = MyBase.Columns("StatusConci")
            Me.columnFechaVenc = MyBase.Columns("FechaVenc")
            Me.columnNroDocPer = MyBase.Columns("NroDocPer")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodMoneda = New Global.System.Data.DataColumn("CodMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodMoneda)
            Me.columnDescMoneda = New Global.System.Data.DataColumn("DescMoneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescMoneda)
            Me.columnFechaComp = New Global.System.Data.DataColumn("FechaComp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaComp)
            Me.columnCodAux = New Global.System.Data.DataColumn("CodAux", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodAux)
            Me.columnCodComp = New Global.System.Data.DataColumn("CodComp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodComp)
            Me.columnNroComp = New Global.System.Data.DataColumn("NroComp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNroComp)
            Me.columnFechaDoc = New Global.System.Data.DataColumn("FechaDoc", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaDoc)
            Me.columnNrodoc = New Global.System.Data.DataColumn("Nrodoc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNrodoc)
            Me.columnCodDoc = New Global.System.Data.DataColumn("CodDoc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodDoc)
            Me.columnCodPer = New Global.System.Data.DataColumn("CodPer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodPer)
            Me.columnDescPer = New Global.System.Data.DataColumn("DescPer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescPer)
            Me.columnCodDH = New Global.System.Data.DataColumn("CodDH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodDH)
            Me.columnImpS = New Global.System.Data.DataColumn("ImpS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpS)
            Me.columnImpD = New Global.System.Data.DataColumn("ImpD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpD)
            Me.columnGlosa = New Global.System.Data.DataColumn("Glosa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGlosa)
            Me.columnCodCuenta = New Global.System.Data.DataColumn("CodCuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodCuenta)
            Me.columnTipoCambio = New Global.System.Data.DataColumn("TipoCambio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoCambio)
            Me.columnStatusConci = New Global.System.Data.DataColumn("StatusConci", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusConci)
            Me.columnFechaVenc = New Global.System.Data.DataColumn("FechaVenc", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaVenc)
            Me.columnNroDocPer = New Global.System.Data.DataColumn("NroDocPer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNroDocPer)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDt_01Row() As Dt_01Row
            Return CType(Me.NewRow,Dt_01Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Dt_01Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Dt_01Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Dt_01RowChangedEvent) Is Nothing) Then
                RaiseEvent Dt_01RowChanged(Me, New Dt_01RowChangeEvent(CType(e.Row,Dt_01Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Dt_01RowChangingEvent) Is Nothing) Then
                RaiseEvent Dt_01RowChanging(Me, New Dt_01RowChangeEvent(CType(e.Row,Dt_01Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Dt_01RowDeletedEvent) Is Nothing) Then
                RaiseEvent Dt_01RowDeleted(Me, New Dt_01RowChangeEvent(CType(e.Row,Dt_01Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Dt_01RowDeletingEvent) Is Nothing) Then
                RaiseEvent Dt_01RowDeleting(Me, New Dt_01RowChangeEvent(CType(e.Row,Dt_01Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDt_01Row(ByVal row As Dt_01Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsConciliadasSinCuadrar = New DsConciliadasSinCuadrar
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Dt_01DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Dt_01Row
        Inherits Global.System.Data.DataRow
        
        Private tableDt_01 As Dt_01DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDt_01 = CType(Me.Table,Dt_01DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodMoneda() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.CodMonedaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodMoneda' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.CodMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescMoneda() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.DescMonedaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescMoneda' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.DescMonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaComp() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.FechaCompColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaComp' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.FechaCompColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodAux() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.CodAuxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodAux' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.CodAuxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodComp() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.CodCompColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodComp' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.CodCompColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NroComp() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.NroCompColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NroComp' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.NroCompColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaDoc() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.FechaDocColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaDoc' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.FechaDocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nrodoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.NrodocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nrodoc' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.NrodocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodDoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.CodDocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodDoc' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.CodDocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodPer() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.CodPerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodPer' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.CodPerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescPer() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.DescPerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescPer' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.DescPerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodDH() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.CodDHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodDH' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.CodDHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.ImpSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImpS' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.ImpSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.ImpDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImpD' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.ImpDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Glosa() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.GlosaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Glosa' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.GlosaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodCuenta() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.CodCuentaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodCuenta' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.CodCuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoCambio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.TipoCambioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoCambio' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.TipoCambioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusConci() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.StatusConciColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'StatusConci' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.StatusConciColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaVenc() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.FechaVencColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaVenc' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.FechaVencColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NroDocPer() As String
            Get
                Try 
                    Return CType(Me(Me.tableDt_01.NroDocPerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NroDocPer' de la tabla 'Dt_01' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDt_01.NroDocPerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodMonedaNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.CodMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodMonedaNull()
            Me(Me.tableDt_01.CodMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescMonedaNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.DescMonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescMonedaNull()
            Me(Me.tableDt_01.DescMonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaCompNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.FechaCompColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaCompNull()
            Me(Me.tableDt_01.FechaCompColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodAuxNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.CodAuxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodAuxNull()
            Me(Me.tableDt_01.CodAuxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodCompNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.CodCompColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodCompNull()
            Me(Me.tableDt_01.CodCompColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNroCompNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.NroCompColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNroCompNull()
            Me(Me.tableDt_01.NroCompColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaDocNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.FechaDocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaDocNull()
            Me(Me.tableDt_01.FechaDocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNrodocNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.NrodocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNrodocNull()
            Me(Me.tableDt_01.NrodocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodDocNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.CodDocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodDocNull()
            Me(Me.tableDt_01.CodDocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodPerNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.CodPerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodPerNull()
            Me(Me.tableDt_01.CodPerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescPerNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.DescPerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescPerNull()
            Me(Me.tableDt_01.DescPerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodDHNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.CodDHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodDHNull()
            Me(Me.tableDt_01.CodDHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpSNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.ImpSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpSNull()
            Me(Me.tableDt_01.ImpSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpDNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.ImpDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpDNull()
            Me(Me.tableDt_01.ImpDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGlosaNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.GlosaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGlosaNull()
            Me(Me.tableDt_01.GlosaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodCuentaNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.CodCuentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodCuentaNull()
            Me(Me.tableDt_01.CodCuentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoCambioNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.TipoCambioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoCambioNull()
            Me(Me.tableDt_01.TipoCambioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusConciNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.StatusConciColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusConciNull()
            Me(Me.tableDt_01.StatusConciColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaVencNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.FechaVencColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaVencNull()
            Me(Me.tableDt_01.FechaVencColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNroDocPerNull() As Boolean
            Return Me.IsNull(Me.tableDt_01.NroDocPerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNroDocPerNull()
            Me(Me.tableDt_01.NroDocPerColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Dt_01RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Dt_01Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Dt_01Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Dt_01Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.8000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DT_REP_ANA_CXP"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DT_REP_ANA_CXP
    Inherits Global.System.Data.DataSet
    
    Private tableREPORTE_CONCILIADAS As REPORTE_CONCILIADASDataTable
    
    Private tableREPORTE_SALDOS_TCXP As REPORTE_SALDOS_TCXPDataTable
    
    Private tableREPORTE_TCXP_KARDEX_ACUMULADO As REPORTE_TCXP_KARDEX_ACUMULADODataTable
    
    Private tableREPORTE_TCXP_KARDEX_NO_ACUMULADO As REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable
    
    Private tableREPORTE_SALDOS_TCXP2 As REPORTE_SALDOS_TCXP2DataTable
    
    Private tableREPORTE_ACTUALIZADO As REPORTE_ACTUALIZADODataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("REPORTE_CONCILIADAS")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CONCILIADASDataTable(ds.Tables("REPORTE_CONCILIADAS")))
            End If
            If (Not (ds.Tables("REPORTE_SALDOS_TCXP")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_SALDOS_TCXPDataTable(ds.Tables("REPORTE_SALDOS_TCXP")))
            End If
            If (Not (ds.Tables("REPORTE_TCXP_KARDEX_ACUMULADO")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_TCXP_KARDEX_ACUMULADODataTable(ds.Tables("REPORTE_TCXP_KARDEX_ACUMULADO")))
            End If
            If (Not (ds.Tables("REPORTE_TCXP_KARDEX_NO_ACUMULADO")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable(ds.Tables("REPORTE_TCXP_KARDEX_NO_ACUMULADO")))
            End If
            If (Not (ds.Tables("REPORTE_SALDOS_TCXP2")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_SALDOS_TCXP2DataTable(ds.Tables("REPORTE_SALDOS_TCXP2")))
            End If
            If (Not (ds.Tables("REPORTE_ACTUALIZADO")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_ACTUALIZADODataTable(ds.Tables("REPORTE_ACTUALIZADO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_CONCILIADAS() As REPORTE_CONCILIADASDataTable
        Get
            Return Me.tableREPORTE_CONCILIADAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_SALDOS_TCXP() As REPORTE_SALDOS_TCXPDataTable
        Get
            Return Me.tableREPORTE_SALDOS_TCXP
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_TCXP_KARDEX_ACUMULADO() As REPORTE_TCXP_KARDEX_ACUMULADODataTable
        Get
            Return Me.tableREPORTE_TCXP_KARDEX_ACUMULADO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_TCXP_KARDEX_NO_ACUMULADO() As REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable
        Get
            Return Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_SALDOS_TCXP2() As REPORTE_SALDOS_TCXP2DataTable
        Get
            Return Me.tableREPORTE_SALDOS_TCXP2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_ACTUALIZADO() As REPORTE_ACTUALIZADODataTable
        Get
            Return Me.tableREPORTE_ACTUALIZADO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DT_REP_ANA_CXP = CType(MyBase.Clone,DT_REP_ANA_CXP)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("REPORTE_CONCILIADAS")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_CONCILIADASDataTable(ds.Tables("REPORTE_CONCILIADAS")))
            End If
            If (Not (ds.Tables("REPORTE_SALDOS_TCXP")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_SALDOS_TCXPDataTable(ds.Tables("REPORTE_SALDOS_TCXP")))
            End If
            If (Not (ds.Tables("REPORTE_TCXP_KARDEX_ACUMULADO")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_TCXP_KARDEX_ACUMULADODataTable(ds.Tables("REPORTE_TCXP_KARDEX_ACUMULADO")))
            End If
            If (Not (ds.Tables("REPORTE_TCXP_KARDEX_NO_ACUMULADO")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable(ds.Tables("REPORTE_TCXP_KARDEX_NO_ACUMULADO")))
            End If
            If (Not (ds.Tables("REPORTE_SALDOS_TCXP2")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_SALDOS_TCXP2DataTable(ds.Tables("REPORTE_SALDOS_TCXP2")))
            End If
            If (Not (ds.Tables("REPORTE_ACTUALIZADO")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_ACTUALIZADODataTable(ds.Tables("REPORTE_ACTUALIZADO")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableREPORTE_CONCILIADAS = CType(MyBase.Tables("REPORTE_CONCILIADAS"),REPORTE_CONCILIADASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_CONCILIADAS) Is Nothing) Then
                Me.tableREPORTE_CONCILIADAS.InitVars
            End If
        End If
        Me.tableREPORTE_SALDOS_TCXP = CType(MyBase.Tables("REPORTE_SALDOS_TCXP"),REPORTE_SALDOS_TCXPDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_SALDOS_TCXP) Is Nothing) Then
                Me.tableREPORTE_SALDOS_TCXP.InitVars
            End If
        End If
        Me.tableREPORTE_TCXP_KARDEX_ACUMULADO = CType(MyBase.Tables("REPORTE_TCXP_KARDEX_ACUMULADO"),REPORTE_TCXP_KARDEX_ACUMULADODataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_TCXP_KARDEX_ACUMULADO) Is Nothing) Then
                Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.InitVars
            End If
        End If
        Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO = CType(MyBase.Tables("REPORTE_TCXP_KARDEX_NO_ACUMULADO"),REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO) Is Nothing) Then
                Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.InitVars
            End If
        End If
        Me.tableREPORTE_SALDOS_TCXP2 = CType(MyBase.Tables("REPORTE_SALDOS_TCXP2"),REPORTE_SALDOS_TCXP2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_SALDOS_TCXP2) Is Nothing) Then
                Me.tableREPORTE_SALDOS_TCXP2.InitVars
            End If
        End If
        Me.tableREPORTE_ACTUALIZADO = CType(MyBase.Tables("REPORTE_ACTUALIZADO"),REPORTE_ACTUALIZADODataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_ACTUALIZADO) Is Nothing) Then
                Me.tableREPORTE_ACTUALIZADO.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DT_REP_ANA_CXP"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DT_REP_ANA_CXP.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableREPORTE_CONCILIADAS = New REPORTE_CONCILIADASDataTable
        MyBase.Tables.Add(Me.tableREPORTE_CONCILIADAS)
        Me.tableREPORTE_SALDOS_TCXP = New REPORTE_SALDOS_TCXPDataTable
        MyBase.Tables.Add(Me.tableREPORTE_SALDOS_TCXP)
        Me.tableREPORTE_TCXP_KARDEX_ACUMULADO = New REPORTE_TCXP_KARDEX_ACUMULADODataTable
        MyBase.Tables.Add(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO)
        Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO = New REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable
        MyBase.Tables.Add(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO)
        Me.tableREPORTE_SALDOS_TCXP2 = New REPORTE_SALDOS_TCXP2DataTable
        MyBase.Tables.Add(Me.tableREPORTE_SALDOS_TCXP2)
        Me.tableREPORTE_ACTUALIZADO = New REPORTE_ACTUALIZADODataTable
        MyBase.Tables.Add(Me.tableREPORTE_ACTUALIZADO)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_CONCILIADAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_SALDOS_TCXP() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_TCXP_KARDEX_ACUMULADO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_TCXP_KARDEX_NO_ACUMULADO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_SALDOS_TCXP2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_ACTUALIZADO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DT_REP_ANA_CXP = New DT_REP_ANA_CXP
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub REPORTE_CONCILIADASRowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_CONCILIADASRowChangeEvent)
    
    Public Delegate Sub REPORTE_SALDOS_TCXPRowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_SALDOS_TCXPRowChangeEvent)
    
    Public Delegate Sub REPORTE_TCXP_KARDEX_ACUMULADORowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_TCXP_KARDEX_ACUMULADORowChangeEvent)
    
    Public Delegate Sub REPORTE_TCXP_KARDEX_NO_ACUMULADORowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_TCXP_KARDEX_NO_ACUMULADORowChangeEvent)
    
    Public Delegate Sub REPORTE_SALDOS_TCXP2RowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_SALDOS_TCXP2RowChangeEvent)
    
    Public Delegate Sub REPORTE_ACTUALIZADORowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_ACTUALIZADORowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_CONCILIADASDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_MONEDA As Global.System.Data.DataColumn
        
        Private columnDESC_MONEDA As Global.System.Data.DataColumn
        
        Private columnFECHA_COMP As Global.System.Data.DataColumn
        
        Private columnCOD_AUX As Global.System.Data.DataColumn
        
        Private columnNRO_COMP As Global.System.Data.DataColumn
        
        Private columnFECHA_DOC As Global.System.Data.DataColumn
        
        Private columnNRO_DOC As Global.System.Data.DataColumn
        
        Private columnCOD_DOC As Global.System.Data.DataColumn
        
        Private columnTIPO_CAMBIO As Global.System.Data.DataColumn
        
        Private columnCOD_D_H As Global.System.Data.DataColumn
        
        Private columnIMP_S As Global.System.Data.DataColumn
        
        Private columnIMP_D As Global.System.Data.DataColumn
        
        Private columnSTATUS_CONCILIADO As Global.System.Data.DataColumn
        
        Private columnCOD_PER As Global.System.Data.DataColumn
        
        Private columnDESC_PER As Global.System.Data.DataColumn
        
        Private columnGLOSA As Global.System.Data.DataColumn
        
        Private columnCOD_CUENTA As Global.System.Data.DataColumn
        
        Private columnCOD_COMP As Global.System.Data.DataColumn
        
        Private columnFECHA_VEN As Global.System.Data.DataColumn
        
        Private columnNRO_DOC_PER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_CONCILIADAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CAMBIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_CAMBIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_D_HColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_D_H
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_CONCILIADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_CONCILIADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLOSAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLOSA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_VENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_VEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_CONCILIADASRow
            Get
                Return CType(Me.Rows(index),REPORTE_CONCILIADASRow)
            End Get
        End Property
        
        Public Event REPORTE_CONCILIADASRowChanging As REPORTE_CONCILIADASRowChangeEventHandler
        
        Public Event REPORTE_CONCILIADASRowChanged As REPORTE_CONCILIADASRowChangeEventHandler
        
        Public Event REPORTE_CONCILIADASRowDeleting As REPORTE_CONCILIADASRowChangeEventHandler
        
        Public Event REPORTE_CONCILIADASRowDeleted As REPORTE_CONCILIADASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_CONCILIADASRow(ByVal row As REPORTE_CONCILIADASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_CONCILIADASRow( _
                    ByVal COD_MONEDA As String,  _
                    ByVal DESC_MONEDA As String,  _
                    ByVal FECHA_COMP As Date,  _
                    ByVal COD_AUX As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal FECHA_DOC As Date,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal TIPO_CAMBIO As Decimal,  _
                    ByVal COD_D_H As String,  _
                    ByVal IMP_S As Decimal,  _
                    ByVal IMP_D As Decimal,  _
                    ByVal STATUS_CONCILIADO As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal GLOSA As String,  _
                    ByVal COD_CUENTA As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal FECHA_VEN As Date,  _
                    ByVal NRO_DOC_PER As String) As REPORTE_CONCILIADASRow
            Dim rowREPORTE_CONCILIADASRow As REPORTE_CONCILIADASRow = CType(Me.NewRow,REPORTE_CONCILIADASRow)
            Dim columnValuesArray() As Object = New Object() {COD_MONEDA, DESC_MONEDA, FECHA_COMP, COD_AUX, NRO_COMP, FECHA_DOC, NRO_DOC, COD_DOC, TIPO_CAMBIO, COD_D_H, IMP_S, IMP_D, STATUS_CONCILIADO, COD_PER, DESC_PER, GLOSA, COD_CUENTA, COD_COMP, FECHA_VEN, NRO_DOC_PER}
            rowREPORTE_CONCILIADASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_CONCILIADASRow)
            Return rowREPORTE_CONCILIADASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_CONCILIADASDataTable = CType(MyBase.Clone,REPORTE_CONCILIADASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_CONCILIADASDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_MONEDA = MyBase.Columns("COD_MONEDA")
            Me.columnDESC_MONEDA = MyBase.Columns("DESC_MONEDA")
            Me.columnFECHA_COMP = MyBase.Columns("FECHA_COMP")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnFECHA_DOC = MyBase.Columns("FECHA_DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnTIPO_CAMBIO = MyBase.Columns("TIPO_CAMBIO")
            Me.columnCOD_D_H = MyBase.Columns("COD_D_H")
            Me.columnIMP_S = MyBase.Columns("IMP_S")
            Me.columnIMP_D = MyBase.Columns("IMP_D")
            Me.columnSTATUS_CONCILIADO = MyBase.Columns("STATUS_CONCILIADO")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnGLOSA = MyBase.Columns("GLOSA")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnFECHA_VEN = MyBase.Columns("FECHA_VEN")
            Me.columnNRO_DOC_PER = MyBase.Columns("NRO_DOC_PER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_MONEDA = New Global.System.Data.DataColumn("COD_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MONEDA)
            Me.columnDESC_MONEDA = New Global.System.Data.DataColumn("DESC_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MONEDA)
            Me.columnFECHA_COMP = New Global.System.Data.DataColumn("FECHA_COMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_COMP)
            Me.columnCOD_AUX = New Global.System.Data.DataColumn("COD_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnNRO_COMP = New Global.System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnFECHA_DOC = New Global.System.Data.DataColumn("FECHA_DOC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DOC)
            Me.columnNRO_DOC = New Global.System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_DOC = New Global.System.Data.DataColumn("COD_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnTIPO_CAMBIO = New Global.System.Data.DataColumn("TIPO_CAMBIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CAMBIO)
            Me.columnCOD_D_H = New Global.System.Data.DataColumn("COD_D_H", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_D_H)
            Me.columnIMP_S = New Global.System.Data.DataColumn("IMP_S", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_S)
            Me.columnIMP_D = New Global.System.Data.DataColumn("IMP_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_D)
            Me.columnSTATUS_CONCILIADO = New Global.System.Data.DataColumn("STATUS_CONCILIADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_CONCILIADO)
            Me.columnCOD_PER = New Global.System.Data.DataColumn("COD_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New Global.System.Data.DataColumn("DESC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnGLOSA = New Global.System.Data.DataColumn("GLOSA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLOSA)
            Me.columnCOD_CUENTA = New Global.System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnCOD_COMP = New Global.System.Data.DataColumn("COD_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnFECHA_VEN = New Global.System.Data.DataColumn("FECHA_VEN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_VEN)
            Me.columnNRO_DOC_PER = New Global.System.Data.DataColumn("NRO_DOC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC_PER)
            Me.columnCOD_MONEDA.MaxLength = 1
            Me.columnDESC_MONEDA.MaxLength = 20
            Me.columnCOD_AUX.AllowDBNull = false
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnNRO_COMP.AllowDBNull = false
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 20
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnCOD_D_H.MaxLength = 1
            Me.columnSTATUS_CONCILIADO.MaxLength = 1
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnGLOSA.MaxLength = 60
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
            Me.columnCOD_COMP.AllowDBNull = false
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnNRO_DOC_PER.AllowDBNull = false
            Me.columnNRO_DOC_PER.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_CONCILIADASRow() As REPORTE_CONCILIADASRow
            Return CType(Me.NewRow,REPORTE_CONCILIADASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_CONCILIADASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_CONCILIADASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_CONCILIADASRowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CONCILIADASRowChanged(Me, New REPORTE_CONCILIADASRowChangeEvent(CType(e.Row,REPORTE_CONCILIADASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_CONCILIADASRowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CONCILIADASRowChanging(Me, New REPORTE_CONCILIADASRowChangeEvent(CType(e.Row,REPORTE_CONCILIADASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_CONCILIADASRowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_CONCILIADASRowDeleted(Me, New REPORTE_CONCILIADASRowChangeEvent(CType(e.Row,REPORTE_CONCILIADASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_CONCILIADASRowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_CONCILIADASRowDeleting(Me, New REPORTE_CONCILIADASRowChangeEvent(CType(e.Row,REPORTE_CONCILIADASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_CONCILIADASRow(ByVal row As REPORTE_CONCILIADASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REP_ANA_CXP = New DT_REP_ANA_CXP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_CONCILIADASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_SALDOS_TCXPDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_MONEDA As Global.System.Data.DataColumn
        
        Private columnDESC_MONEDA As Global.System.Data.DataColumn
        
        Private columnFECHA_COMP As Global.System.Data.DataColumn
        
        Private columnCOD_AUX As Global.System.Data.DataColumn
        
        Private columnNRO_COMP As Global.System.Data.DataColumn
        
        Private columnFECHA_DOC As Global.System.Data.DataColumn
        
        Private columnNRO_DOC As Global.System.Data.DataColumn
        
        Private columnCOD_DOC As Global.System.Data.DataColumn
        
        Private columnTIPO_CAMBIO As Global.System.Data.DataColumn
        
        Private columnCOD_D_H As Global.System.Data.DataColumn
        
        Private columnIMPORTE As Global.System.Data.DataColumn
        
        Private columnSTATUS_CONCILIADO As Global.System.Data.DataColumn
        
        Private columnCOD_PER As Global.System.Data.DataColumn
        
        Private columnDESC_PER As Global.System.Data.DataColumn
        
        Private columnGLOSA As Global.System.Data.DataColumn
        
        Private columnCOD_CUENTA As Global.System.Data.DataColumn
        
        Private columnCOD_COMP As Global.System.Data.DataColumn
        
        Private columnFECHA_VEN As Global.System.Data.DataColumn
        
        Private columnCOD_DOC1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_SALDOS_TCXP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CAMBIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_CAMBIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_D_HColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_D_H
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_CONCILIADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_CONCILIADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLOSAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLOSA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_VENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_VEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOC1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_SALDOS_TCXPRow
            Get
                Return CType(Me.Rows(index),REPORTE_SALDOS_TCXPRow)
            End Get
        End Property
        
        Public Event REPORTE_SALDOS_TCXPRowChanging As REPORTE_SALDOS_TCXPRowChangeEventHandler
        
        Public Event REPORTE_SALDOS_TCXPRowChanged As REPORTE_SALDOS_TCXPRowChangeEventHandler
        
        Public Event REPORTE_SALDOS_TCXPRowDeleting As REPORTE_SALDOS_TCXPRowChangeEventHandler
        
        Public Event REPORTE_SALDOS_TCXPRowDeleted As REPORTE_SALDOS_TCXPRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_SALDOS_TCXPRow(ByVal row As REPORTE_SALDOS_TCXPRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_SALDOS_TCXPRow( _
                    ByVal COD_MONEDA As String,  _
                    ByVal DESC_MONEDA As String,  _
                    ByVal FECHA_COMP As Date,  _
                    ByVal COD_AUX As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal FECHA_DOC As Date,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal TIPO_CAMBIO As Decimal,  _
                    ByVal COD_D_H As String,  _
                    ByVal IMPORTE As Decimal,  _
                    ByVal STATUS_CONCILIADO As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal GLOSA As String,  _
                    ByVal COD_CUENTA As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal FECHA_VEN As Date,  _
                    ByVal COD_DOC1 As String) As REPORTE_SALDOS_TCXPRow
            Dim rowREPORTE_SALDOS_TCXPRow As REPORTE_SALDOS_TCXPRow = CType(Me.NewRow,REPORTE_SALDOS_TCXPRow)
            Dim columnValuesArray() As Object = New Object() {COD_MONEDA, DESC_MONEDA, FECHA_COMP, COD_AUX, NRO_COMP, FECHA_DOC, NRO_DOC, COD_DOC, TIPO_CAMBIO, COD_D_H, IMPORTE, STATUS_CONCILIADO, COD_PER, DESC_PER, GLOSA, COD_CUENTA, COD_COMP, FECHA_VEN, COD_DOC1}
            rowREPORTE_SALDOS_TCXPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_SALDOS_TCXPRow)
            Return rowREPORTE_SALDOS_TCXPRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_SALDOS_TCXPDataTable = CType(MyBase.Clone,REPORTE_SALDOS_TCXPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_SALDOS_TCXPDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_MONEDA = MyBase.Columns("COD_MONEDA")
            Me.columnDESC_MONEDA = MyBase.Columns("DESC_MONEDA")
            Me.columnFECHA_COMP = MyBase.Columns("FECHA_COMP")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnFECHA_DOC = MyBase.Columns("FECHA_DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnTIPO_CAMBIO = MyBase.Columns("TIPO_CAMBIO")
            Me.columnCOD_D_H = MyBase.Columns("COD_D_H")
            Me.columnIMPORTE = MyBase.Columns("IMPORTE")
            Me.columnSTATUS_CONCILIADO = MyBase.Columns("STATUS_CONCILIADO")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnGLOSA = MyBase.Columns("GLOSA")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnFECHA_VEN = MyBase.Columns("FECHA_VEN")
            Me.columnCOD_DOC1 = MyBase.Columns("COD_DOC1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_MONEDA = New Global.System.Data.DataColumn("COD_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MONEDA)
            Me.columnDESC_MONEDA = New Global.System.Data.DataColumn("DESC_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MONEDA)
            Me.columnFECHA_COMP = New Global.System.Data.DataColumn("FECHA_COMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_COMP)
            Me.columnCOD_AUX = New Global.System.Data.DataColumn("COD_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnNRO_COMP = New Global.System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnFECHA_DOC = New Global.System.Data.DataColumn("FECHA_DOC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DOC)
            Me.columnNRO_DOC = New Global.System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_DOC = New Global.System.Data.DataColumn("COD_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnTIPO_CAMBIO = New Global.System.Data.DataColumn("TIPO_CAMBIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CAMBIO)
            Me.columnCOD_D_H = New Global.System.Data.DataColumn("COD_D_H", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_D_H)
            Me.columnIMPORTE = New Global.System.Data.DataColumn("IMPORTE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTE)
            Me.columnSTATUS_CONCILIADO = New Global.System.Data.DataColumn("STATUS_CONCILIADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_CONCILIADO)
            Me.columnCOD_PER = New Global.System.Data.DataColumn("COD_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New Global.System.Data.DataColumn("DESC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnGLOSA = New Global.System.Data.DataColumn("GLOSA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLOSA)
            Me.columnCOD_CUENTA = New Global.System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnCOD_COMP = New Global.System.Data.DataColumn("COD_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnFECHA_VEN = New Global.System.Data.DataColumn("FECHA_VEN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_VEN)
            Me.columnCOD_DOC1 = New Global.System.Data.DataColumn("COD_DOC1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC1)
            Me.columnCOD_MONEDA.MaxLength = 1
            Me.columnDESC_MONEDA.MaxLength = 20
            Me.columnCOD_AUX.AllowDBNull = false
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnNRO_COMP.AllowDBNull = false
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 20
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnCOD_D_H.MaxLength = 1
            Me.columnIMPORTE.ReadOnly = true
            Me.columnSTATUS_CONCILIADO.MaxLength = 1
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnGLOSA.MaxLength = 60
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
            Me.columnCOD_COMP.AllowDBNull = false
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnCOD_DOC1.AllowDBNull = false
            Me.columnCOD_DOC1.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_SALDOS_TCXPRow() As REPORTE_SALDOS_TCXPRow
            Return CType(Me.NewRow,REPORTE_SALDOS_TCXPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_SALDOS_TCXPRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_SALDOS_TCXPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_SALDOS_TCXPRowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_SALDOS_TCXPRowChanged(Me, New REPORTE_SALDOS_TCXPRowChangeEvent(CType(e.Row,REPORTE_SALDOS_TCXPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_SALDOS_TCXPRowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_SALDOS_TCXPRowChanging(Me, New REPORTE_SALDOS_TCXPRowChangeEvent(CType(e.Row,REPORTE_SALDOS_TCXPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_SALDOS_TCXPRowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_SALDOS_TCXPRowDeleted(Me, New REPORTE_SALDOS_TCXPRowChangeEvent(CType(e.Row,REPORTE_SALDOS_TCXPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_SALDOS_TCXPRowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_SALDOS_TCXPRowDeleting(Me, New REPORTE_SALDOS_TCXPRowChangeEvent(CType(e.Row,REPORTE_SALDOS_TCXPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_SALDOS_TCXPRow(ByVal row As REPORTE_SALDOS_TCXPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REP_ANA_CXP = New DT_REP_ANA_CXP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_SALDOS_TCXPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_TCXP_KARDEX_ACUMULADODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_MONEDA As Global.System.Data.DataColumn
        
        Private columnDESC_MONEDA As Global.System.Data.DataColumn
        
        Private columnFECHA_COMP As Global.System.Data.DataColumn
        
        Private columnCOD_AUX As Global.System.Data.DataColumn
        
        Private columnNRO_COMP As Global.System.Data.DataColumn
        
        Private columnFECHA_DOC As Global.System.Data.DataColumn
        
        Private columnNRO_DOC As Global.System.Data.DataColumn
        
        Private columnCOD_DOC As Global.System.Data.DataColumn
        
        Private columnTIPO_CAMBIO As Global.System.Data.DataColumn
        
        Private columnCOD_D_H As Global.System.Data.DataColumn
        
        Private columnIMP_S As Global.System.Data.DataColumn
        
        Private columnIMP_D As Global.System.Data.DataColumn
        
        Private columnSTATUS_CONCILIADO As Global.System.Data.DataColumn
        
        Private columnCOD_PER As Global.System.Data.DataColumn
        
        Private columnDESC_PER As Global.System.Data.DataColumn
        
        Private columnGLOSA As Global.System.Data.DataColumn
        
        Private columnCOD_CUENTA As Global.System.Data.DataColumn
        
        Private columnIMPORTE_SOLES_DEBE As Global.System.Data.DataColumn
        
        Private columnIMPORTE_SOLES_HABER As Global.System.Data.DataColumn
        
        Private columnIMPORTE_DOLARES_DEBE As Global.System.Data.DataColumn
        
        Private columnIMPORTE_DOLARES_HABER As Global.System.Data.DataColumn
        
        Private columnCOD_COMP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_TCXP_KARDEX_ACUMULADO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CAMBIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_CAMBIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_D_HColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_D_H
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_CONCILIADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_CONCILIADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLOSAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLOSA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTE_SOLES_DEBEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTE_SOLES_DEBE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTE_SOLES_HABERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTE_SOLES_HABER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTE_DOLARES_DEBEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTE_DOLARES_DEBE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTE_DOLARES_HABERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTE_DOLARES_HABER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_TCXP_KARDEX_ACUMULADORow
            Get
                Return CType(Me.Rows(index),REPORTE_TCXP_KARDEX_ACUMULADORow)
            End Get
        End Property
        
        Public Event REPORTE_TCXP_KARDEX_ACUMULADORowChanging As REPORTE_TCXP_KARDEX_ACUMULADORowChangeEventHandler
        
        Public Event REPORTE_TCXP_KARDEX_ACUMULADORowChanged As REPORTE_TCXP_KARDEX_ACUMULADORowChangeEventHandler
        
        Public Event REPORTE_TCXP_KARDEX_ACUMULADORowDeleting As REPORTE_TCXP_KARDEX_ACUMULADORowChangeEventHandler
        
        Public Event REPORTE_TCXP_KARDEX_ACUMULADORowDeleted As REPORTE_TCXP_KARDEX_ACUMULADORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_TCXP_KARDEX_ACUMULADORow(ByVal row As REPORTE_TCXP_KARDEX_ACUMULADORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_TCXP_KARDEX_ACUMULADORow( _
                    ByVal COD_MONEDA As String,  _
                    ByVal DESC_MONEDA As String,  _
                    ByVal FECHA_COMP As Date,  _
                    ByVal COD_AUX As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal FECHA_DOC As Date,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal TIPO_CAMBIO As Decimal,  _
                    ByVal COD_D_H As String,  _
                    ByVal IMP_S As Decimal,  _
                    ByVal IMP_D As Decimal,  _
                    ByVal STATUS_CONCILIADO As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal GLOSA As String,  _
                    ByVal COD_CUENTA As String,  _
                    ByVal IMPORTE_SOLES_DEBE As Decimal,  _
                    ByVal IMPORTE_SOLES_HABER As Decimal,  _
                    ByVal IMPORTE_DOLARES_DEBE As Decimal,  _
                    ByVal IMPORTE_DOLARES_HABER As Decimal,  _
                    ByVal COD_COMP As String) As REPORTE_TCXP_KARDEX_ACUMULADORow
            Dim rowREPORTE_TCXP_KARDEX_ACUMULADORow As REPORTE_TCXP_KARDEX_ACUMULADORow = CType(Me.NewRow,REPORTE_TCXP_KARDEX_ACUMULADORow)
            Dim columnValuesArray() As Object = New Object() {COD_MONEDA, DESC_MONEDA, FECHA_COMP, COD_AUX, NRO_COMP, FECHA_DOC, NRO_DOC, COD_DOC, TIPO_CAMBIO, COD_D_H, IMP_S, IMP_D, STATUS_CONCILIADO, COD_PER, DESC_PER, GLOSA, COD_CUENTA, IMPORTE_SOLES_DEBE, IMPORTE_SOLES_HABER, IMPORTE_DOLARES_DEBE, IMPORTE_DOLARES_HABER, COD_COMP}
            rowREPORTE_TCXP_KARDEX_ACUMULADORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_TCXP_KARDEX_ACUMULADORow)
            Return rowREPORTE_TCXP_KARDEX_ACUMULADORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_TCXP_KARDEX_ACUMULADODataTable = CType(MyBase.Clone,REPORTE_TCXP_KARDEX_ACUMULADODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_TCXP_KARDEX_ACUMULADODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_MONEDA = MyBase.Columns("COD_MONEDA")
            Me.columnDESC_MONEDA = MyBase.Columns("DESC_MONEDA")
            Me.columnFECHA_COMP = MyBase.Columns("FECHA_COMP")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnFECHA_DOC = MyBase.Columns("FECHA_DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnTIPO_CAMBIO = MyBase.Columns("TIPO_CAMBIO")
            Me.columnCOD_D_H = MyBase.Columns("COD_D_H")
            Me.columnIMP_S = MyBase.Columns("IMP_S")
            Me.columnIMP_D = MyBase.Columns("IMP_D")
            Me.columnSTATUS_CONCILIADO = MyBase.Columns("STATUS_CONCILIADO")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnGLOSA = MyBase.Columns("GLOSA")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
            Me.columnIMPORTE_SOLES_DEBE = MyBase.Columns("IMPORTE_SOLES_DEBE")
            Me.columnIMPORTE_SOLES_HABER = MyBase.Columns("IMPORTE_SOLES_HABER")
            Me.columnIMPORTE_DOLARES_DEBE = MyBase.Columns("IMPORTE_DOLARES_DEBE")
            Me.columnIMPORTE_DOLARES_HABER = MyBase.Columns("IMPORTE_DOLARES_HABER")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_MONEDA = New Global.System.Data.DataColumn("COD_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MONEDA)
            Me.columnDESC_MONEDA = New Global.System.Data.DataColumn("DESC_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MONEDA)
            Me.columnFECHA_COMP = New Global.System.Data.DataColumn("FECHA_COMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_COMP)
            Me.columnCOD_AUX = New Global.System.Data.DataColumn("COD_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnNRO_COMP = New Global.System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnFECHA_DOC = New Global.System.Data.DataColumn("FECHA_DOC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DOC)
            Me.columnNRO_DOC = New Global.System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_DOC = New Global.System.Data.DataColumn("COD_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnTIPO_CAMBIO = New Global.System.Data.DataColumn("TIPO_CAMBIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CAMBIO)
            Me.columnCOD_D_H = New Global.System.Data.DataColumn("COD_D_H", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_D_H)
            Me.columnIMP_S = New Global.System.Data.DataColumn("IMP_S", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_S)
            Me.columnIMP_D = New Global.System.Data.DataColumn("IMP_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_D)
            Me.columnSTATUS_CONCILIADO = New Global.System.Data.DataColumn("STATUS_CONCILIADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_CONCILIADO)
            Me.columnCOD_PER = New Global.System.Data.DataColumn("COD_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New Global.System.Data.DataColumn("DESC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnGLOSA = New Global.System.Data.DataColumn("GLOSA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLOSA)
            Me.columnCOD_CUENTA = New Global.System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnIMPORTE_SOLES_DEBE = New Global.System.Data.DataColumn("IMPORTE_SOLES_DEBE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTE_SOLES_DEBE)
            Me.columnIMPORTE_SOLES_HABER = New Global.System.Data.DataColumn("IMPORTE_SOLES_HABER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTE_SOLES_HABER)
            Me.columnIMPORTE_DOLARES_DEBE = New Global.System.Data.DataColumn("IMPORTE_DOLARES_DEBE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTE_DOLARES_DEBE)
            Me.columnIMPORTE_DOLARES_HABER = New Global.System.Data.DataColumn("IMPORTE_DOLARES_HABER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTE_DOLARES_HABER)
            Me.columnCOD_COMP = New Global.System.Data.DataColumn("COD_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnCOD_MONEDA.MaxLength = 1
            Me.columnDESC_MONEDA.MaxLength = 20
            Me.columnCOD_AUX.AllowDBNull = false
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnNRO_COMP.AllowDBNull = false
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 20
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnCOD_D_H.MaxLength = 1
            Me.columnSTATUS_CONCILIADO.MaxLength = 1
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnGLOSA.MaxLength = 60
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
            Me.columnIMPORTE_SOLES_DEBE.ReadOnly = true
            Me.columnIMPORTE_SOLES_HABER.ReadOnly = true
            Me.columnIMPORTE_DOLARES_DEBE.ReadOnly = true
            Me.columnIMPORTE_DOLARES_HABER.ReadOnly = true
            Me.columnCOD_COMP.AllowDBNull = false
            Me.columnCOD_COMP.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_TCXP_KARDEX_ACUMULADORow() As REPORTE_TCXP_KARDEX_ACUMULADORow
            Return CType(Me.NewRow,REPORTE_TCXP_KARDEX_ACUMULADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_TCXP_KARDEX_ACUMULADORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_TCXP_KARDEX_ACUMULADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_TCXP_KARDEX_ACUMULADORowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_TCXP_KARDEX_ACUMULADORowChanged(Me, New REPORTE_TCXP_KARDEX_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TCXP_KARDEX_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_TCXP_KARDEX_ACUMULADORowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_TCXP_KARDEX_ACUMULADORowChanging(Me, New REPORTE_TCXP_KARDEX_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TCXP_KARDEX_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_TCXP_KARDEX_ACUMULADORowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_TCXP_KARDEX_ACUMULADORowDeleted(Me, New REPORTE_TCXP_KARDEX_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TCXP_KARDEX_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_TCXP_KARDEX_ACUMULADORowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_TCXP_KARDEX_ACUMULADORowDeleting(Me, New REPORTE_TCXP_KARDEX_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TCXP_KARDEX_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_TCXP_KARDEX_ACUMULADORow(ByVal row As REPORTE_TCXP_KARDEX_ACUMULADORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REP_ANA_CXP = New DT_REP_ANA_CXP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_TCXP_KARDEX_ACUMULADODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_MONEDA As Global.System.Data.DataColumn
        
        Private columnDESC_MONEDA As Global.System.Data.DataColumn
        
        Private columnFECHA_COMP As Global.System.Data.DataColumn
        
        Private columnCOD_AUX As Global.System.Data.DataColumn
        
        Private columnNRO_COMP As Global.System.Data.DataColumn
        
        Private columnFECHA_DOC As Global.System.Data.DataColumn
        
        Private columnNRO_DOC As Global.System.Data.DataColumn
        
        Private columnCOD_DOC As Global.System.Data.DataColumn
        
        Private columnTIPO_CAMBIO As Global.System.Data.DataColumn
        
        Private columnCOD_D_H As Global.System.Data.DataColumn
        
        Private columnIMP_S As Global.System.Data.DataColumn
        
        Private columnIMP_D As Global.System.Data.DataColumn
        
        Private columnSTATUS_CONCILIADO As Global.System.Data.DataColumn
        
        Private columnCOD_PER As Global.System.Data.DataColumn
        
        Private columnDESC_PER As Global.System.Data.DataColumn
        
        Private columnGLOSA As Global.System.Data.DataColumn
        
        Private columnCOD_CUENTA As Global.System.Data.DataColumn
        
        Private columnIMPORTE_SOLES_DEBE As Global.System.Data.DataColumn
        
        Private columnIMPORTE_SOLES_HABER As Global.System.Data.DataColumn
        
        Private columnIMPORTE_DOLARES_DEBE As Global.System.Data.DataColumn
        
        Private columnIMPORTE_DOLARES_HABER As Global.System.Data.DataColumn
        
        Private columnCOD_COMP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_TCXP_KARDEX_NO_ACUMULADO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CAMBIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_CAMBIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_D_HColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_D_H
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_CONCILIADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_CONCILIADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLOSAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLOSA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTE_SOLES_DEBEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTE_SOLES_DEBE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTE_SOLES_HABERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTE_SOLES_HABER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTE_DOLARES_DEBEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTE_DOLARES_DEBE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMPORTE_DOLARES_HABERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMPORTE_DOLARES_HABER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_TCXP_KARDEX_NO_ACUMULADORow
            Get
                Return CType(Me.Rows(index),REPORTE_TCXP_KARDEX_NO_ACUMULADORow)
            End Get
        End Property
        
        Public Event REPORTE_TCXP_KARDEX_NO_ACUMULADORowChanging As REPORTE_TCXP_KARDEX_NO_ACUMULADORowChangeEventHandler
        
        Public Event REPORTE_TCXP_KARDEX_NO_ACUMULADORowChanged As REPORTE_TCXP_KARDEX_NO_ACUMULADORowChangeEventHandler
        
        Public Event REPORTE_TCXP_KARDEX_NO_ACUMULADORowDeleting As REPORTE_TCXP_KARDEX_NO_ACUMULADORowChangeEventHandler
        
        Public Event REPORTE_TCXP_KARDEX_NO_ACUMULADORowDeleted As REPORTE_TCXP_KARDEX_NO_ACUMULADORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_TCXP_KARDEX_NO_ACUMULADORow(ByVal row As REPORTE_TCXP_KARDEX_NO_ACUMULADORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_TCXP_KARDEX_NO_ACUMULADORow( _
                    ByVal COD_MONEDA As String,  _
                    ByVal DESC_MONEDA As String,  _
                    ByVal FECHA_COMP As Date,  _
                    ByVal COD_AUX As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal FECHA_DOC As Date,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal TIPO_CAMBIO As Decimal,  _
                    ByVal COD_D_H As String,  _
                    ByVal IMP_S As Decimal,  _
                    ByVal IMP_D As Decimal,  _
                    ByVal STATUS_CONCILIADO As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal GLOSA As String,  _
                    ByVal COD_CUENTA As String,  _
                    ByVal IMPORTE_SOLES_DEBE As Decimal,  _
                    ByVal IMPORTE_SOLES_HABER As Decimal,  _
                    ByVal IMPORTE_DOLARES_DEBE As Decimal,  _
                    ByVal IMPORTE_DOLARES_HABER As Decimal,  _
                    ByVal COD_COMP As String) As REPORTE_TCXP_KARDEX_NO_ACUMULADORow
            Dim rowREPORTE_TCXP_KARDEX_NO_ACUMULADORow As REPORTE_TCXP_KARDEX_NO_ACUMULADORow = CType(Me.NewRow,REPORTE_TCXP_KARDEX_NO_ACUMULADORow)
            Dim columnValuesArray() As Object = New Object() {COD_MONEDA, DESC_MONEDA, FECHA_COMP, COD_AUX, NRO_COMP, FECHA_DOC, NRO_DOC, COD_DOC, TIPO_CAMBIO, COD_D_H, IMP_S, IMP_D, STATUS_CONCILIADO, COD_PER, DESC_PER, GLOSA, COD_CUENTA, IMPORTE_SOLES_DEBE, IMPORTE_SOLES_HABER, IMPORTE_DOLARES_DEBE, IMPORTE_DOLARES_HABER, COD_COMP}
            rowREPORTE_TCXP_KARDEX_NO_ACUMULADORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_TCXP_KARDEX_NO_ACUMULADORow)
            Return rowREPORTE_TCXP_KARDEX_NO_ACUMULADORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable = CType(MyBase.Clone,REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_MONEDA = MyBase.Columns("COD_MONEDA")
            Me.columnDESC_MONEDA = MyBase.Columns("DESC_MONEDA")
            Me.columnFECHA_COMP = MyBase.Columns("FECHA_COMP")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnFECHA_DOC = MyBase.Columns("FECHA_DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnTIPO_CAMBIO = MyBase.Columns("TIPO_CAMBIO")
            Me.columnCOD_D_H = MyBase.Columns("COD_D_H")
            Me.columnIMP_S = MyBase.Columns("IMP_S")
            Me.columnIMP_D = MyBase.Columns("IMP_D")
            Me.columnSTATUS_CONCILIADO = MyBase.Columns("STATUS_CONCILIADO")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnGLOSA = MyBase.Columns("GLOSA")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
            Me.columnIMPORTE_SOLES_DEBE = MyBase.Columns("IMPORTE_SOLES_DEBE")
            Me.columnIMPORTE_SOLES_HABER = MyBase.Columns("IMPORTE_SOLES_HABER")
            Me.columnIMPORTE_DOLARES_DEBE = MyBase.Columns("IMPORTE_DOLARES_DEBE")
            Me.columnIMPORTE_DOLARES_HABER = MyBase.Columns("IMPORTE_DOLARES_HABER")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_MONEDA = New Global.System.Data.DataColumn("COD_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MONEDA)
            Me.columnDESC_MONEDA = New Global.System.Data.DataColumn("DESC_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MONEDA)
            Me.columnFECHA_COMP = New Global.System.Data.DataColumn("FECHA_COMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_COMP)
            Me.columnCOD_AUX = New Global.System.Data.DataColumn("COD_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnNRO_COMP = New Global.System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnFECHA_DOC = New Global.System.Data.DataColumn("FECHA_DOC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DOC)
            Me.columnNRO_DOC = New Global.System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_DOC = New Global.System.Data.DataColumn("COD_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnTIPO_CAMBIO = New Global.System.Data.DataColumn("TIPO_CAMBIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CAMBIO)
            Me.columnCOD_D_H = New Global.System.Data.DataColumn("COD_D_H", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_D_H)
            Me.columnIMP_S = New Global.System.Data.DataColumn("IMP_S", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_S)
            Me.columnIMP_D = New Global.System.Data.DataColumn("IMP_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_D)
            Me.columnSTATUS_CONCILIADO = New Global.System.Data.DataColumn("STATUS_CONCILIADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_CONCILIADO)
            Me.columnCOD_PER = New Global.System.Data.DataColumn("COD_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New Global.System.Data.DataColumn("DESC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnGLOSA = New Global.System.Data.DataColumn("GLOSA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLOSA)
            Me.columnCOD_CUENTA = New Global.System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnIMPORTE_SOLES_DEBE = New Global.System.Data.DataColumn("IMPORTE_SOLES_DEBE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTE_SOLES_DEBE)
            Me.columnIMPORTE_SOLES_HABER = New Global.System.Data.DataColumn("IMPORTE_SOLES_HABER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTE_SOLES_HABER)
            Me.columnIMPORTE_DOLARES_DEBE = New Global.System.Data.DataColumn("IMPORTE_DOLARES_DEBE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTE_DOLARES_DEBE)
            Me.columnIMPORTE_DOLARES_HABER = New Global.System.Data.DataColumn("IMPORTE_DOLARES_HABER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMPORTE_DOLARES_HABER)
            Me.columnCOD_COMP = New Global.System.Data.DataColumn("COD_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnCOD_MONEDA.MaxLength = 1
            Me.columnDESC_MONEDA.MaxLength = 20
            Me.columnCOD_AUX.AllowDBNull = false
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnNRO_COMP.AllowDBNull = false
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 20
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnCOD_D_H.MaxLength = 1
            Me.columnSTATUS_CONCILIADO.MaxLength = 1
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnGLOSA.MaxLength = 60
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
            Me.columnIMPORTE_SOLES_DEBE.ReadOnly = true
            Me.columnIMPORTE_SOLES_HABER.ReadOnly = true
            Me.columnIMPORTE_DOLARES_DEBE.ReadOnly = true
            Me.columnIMPORTE_DOLARES_HABER.ReadOnly = true
            Me.columnCOD_COMP.AllowDBNull = false
            Me.columnCOD_COMP.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_TCXP_KARDEX_NO_ACUMULADORow() As REPORTE_TCXP_KARDEX_NO_ACUMULADORow
            Return CType(Me.NewRow,REPORTE_TCXP_KARDEX_NO_ACUMULADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_TCXP_KARDEX_NO_ACUMULADORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_TCXP_KARDEX_NO_ACUMULADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_TCXP_KARDEX_NO_ACUMULADORowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_TCXP_KARDEX_NO_ACUMULADORowChanged(Me, New REPORTE_TCXP_KARDEX_NO_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TCXP_KARDEX_NO_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_TCXP_KARDEX_NO_ACUMULADORowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_TCXP_KARDEX_NO_ACUMULADORowChanging(Me, New REPORTE_TCXP_KARDEX_NO_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TCXP_KARDEX_NO_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_TCXP_KARDEX_NO_ACUMULADORowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_TCXP_KARDEX_NO_ACUMULADORowDeleted(Me, New REPORTE_TCXP_KARDEX_NO_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TCXP_KARDEX_NO_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_TCXP_KARDEX_NO_ACUMULADORowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_TCXP_KARDEX_NO_ACUMULADORowDeleting(Me, New REPORTE_TCXP_KARDEX_NO_ACUMULADORowChangeEvent(CType(e.Row,REPORTE_TCXP_KARDEX_NO_ACUMULADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_TCXP_KARDEX_NO_ACUMULADORow(ByVal row As REPORTE_TCXP_KARDEX_NO_ACUMULADORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REP_ANA_CXP = New DT_REP_ANA_CXP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_SALDOS_TCXP2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSALDO_SOLES As Global.System.Data.DataColumn
        
        Private columnSALDO_DOLARES As Global.System.Data.DataColumn
        
        Private columnCOD_PER As Global.System.Data.DataColumn
        
        Private columnDESC_PER As Global.System.Data.DataColumn
        
        Private columnNRO_DOC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_SALDOS_TCXP2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO_SOLESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO_SOLES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO_DOLARESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO_DOLARES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_SALDOS_TCXP2Row
            Get
                Return CType(Me.Rows(index),REPORTE_SALDOS_TCXP2Row)
            End Get
        End Property
        
        Public Event REPORTE_SALDOS_TCXP2RowChanging As REPORTE_SALDOS_TCXP2RowChangeEventHandler
        
        Public Event REPORTE_SALDOS_TCXP2RowChanged As REPORTE_SALDOS_TCXP2RowChangeEventHandler
        
        Public Event REPORTE_SALDOS_TCXP2RowDeleting As REPORTE_SALDOS_TCXP2RowChangeEventHandler
        
        Public Event REPORTE_SALDOS_TCXP2RowDeleted As REPORTE_SALDOS_TCXP2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_SALDOS_TCXP2Row(ByVal row As REPORTE_SALDOS_TCXP2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_SALDOS_TCXP2Row(ByVal SALDO_SOLES As Decimal, ByVal SALDO_DOLARES As Decimal, ByVal COD_PER As String, ByVal DESC_PER As String, ByVal NRO_DOC As String) As REPORTE_SALDOS_TCXP2Row
            Dim rowREPORTE_SALDOS_TCXP2Row As REPORTE_SALDOS_TCXP2Row = CType(Me.NewRow,REPORTE_SALDOS_TCXP2Row)
            Dim columnValuesArray() As Object = New Object() {SALDO_SOLES, SALDO_DOLARES, COD_PER, DESC_PER, NRO_DOC}
            rowREPORTE_SALDOS_TCXP2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_SALDOS_TCXP2Row)
            Return rowREPORTE_SALDOS_TCXP2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_SALDOS_TCXP2DataTable = CType(MyBase.Clone,REPORTE_SALDOS_TCXP2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_SALDOS_TCXP2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSALDO_SOLES = MyBase.Columns("SALDO_SOLES")
            Me.columnSALDO_DOLARES = MyBase.Columns("SALDO_DOLARES")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSALDO_SOLES = New Global.System.Data.DataColumn("SALDO_SOLES", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO_SOLES)
            Me.columnSALDO_DOLARES = New Global.System.Data.DataColumn("SALDO_DOLARES", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO_DOLARES)
            Me.columnCOD_PER = New Global.System.Data.DataColumn("COD_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New Global.System.Data.DataColumn("DESC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnNRO_DOC = New Global.System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnSALDO_SOLES.ReadOnly = true
            Me.columnSALDO_DOLARES.ReadOnly = true
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnNRO_DOC.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_SALDOS_TCXP2Row() As REPORTE_SALDOS_TCXP2Row
            Return CType(Me.NewRow,REPORTE_SALDOS_TCXP2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_SALDOS_TCXP2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_SALDOS_TCXP2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_SALDOS_TCXP2RowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_SALDOS_TCXP2RowChanged(Me, New REPORTE_SALDOS_TCXP2RowChangeEvent(CType(e.Row,REPORTE_SALDOS_TCXP2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_SALDOS_TCXP2RowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_SALDOS_TCXP2RowChanging(Me, New REPORTE_SALDOS_TCXP2RowChangeEvent(CType(e.Row,REPORTE_SALDOS_TCXP2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_SALDOS_TCXP2RowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_SALDOS_TCXP2RowDeleted(Me, New REPORTE_SALDOS_TCXP2RowChangeEvent(CType(e.Row,REPORTE_SALDOS_TCXP2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_SALDOS_TCXP2RowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_SALDOS_TCXP2RowDeleting(Me, New REPORTE_SALDOS_TCXP2RowChangeEvent(CType(e.Row,REPORTE_SALDOS_TCXP2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_SALDOS_TCXP2Row(ByVal row As REPORTE_SALDOS_TCXP2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REP_ANA_CXP = New DT_REP_ANA_CXP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_SALDOS_TCXP2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_ACTUALIZADODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_MONEDA As Global.System.Data.DataColumn
        
        Private columnDESC_MONEDA As Global.System.Data.DataColumn
        
        Private columnFECHA_COMP As Global.System.Data.DataColumn
        
        Private columnCOD_AUX As Global.System.Data.DataColumn
        
        Private columnCOD_COMP As Global.System.Data.DataColumn
        
        Private columnNRO_COMP As Global.System.Data.DataColumn
        
        Private columnFECHA_DOC As Global.System.Data.DataColumn
        
        Private columnNRO_DOC As Global.System.Data.DataColumn
        
        Private columnCOD_DOC As Global.System.Data.DataColumn
        
        Private columnCOD_PER As Global.System.Data.DataColumn
        
        Private columnDESC_PER As Global.System.Data.DataColumn
        
        Private columnCOD_D_H As Global.System.Data.DataColumn
        
        Private columnIMP_S As Global.System.Data.DataColumn
        
        Private columnIMP_D As Global.System.Data.DataColumn
        
        Private columnGLOSA As Global.System.Data.DataColumn
        
        Private columnCOD_CUENTA As Global.System.Data.DataColumn
        
        Private columnTIPO_CAMBIO As Global.System.Data.DataColumn
        
        Private columnSTATUS_CONCILIADO As Global.System.Data.DataColumn
        
        Private columnFECHA_VEN As Global.System.Data.DataColumn
        
        Private columnNRO_DOC_PER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_ACTUALIZADO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_D_HColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_D_H
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLOSAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLOSA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPO_CAMBIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO_CAMBIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_CONCILIADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_CONCILIADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_VENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_VEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_ACTUALIZADORow
            Get
                Return CType(Me.Rows(index),REPORTE_ACTUALIZADORow)
            End Get
        End Property
        
        Public Event REPORTE_ACTUALIZADORowChanging As REPORTE_ACTUALIZADORowChangeEventHandler
        
        Public Event REPORTE_ACTUALIZADORowChanged As REPORTE_ACTUALIZADORowChangeEventHandler
        
        Public Event REPORTE_ACTUALIZADORowDeleting As REPORTE_ACTUALIZADORowChangeEventHandler
        
        Public Event REPORTE_ACTUALIZADORowDeleted As REPORTE_ACTUALIZADORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_ACTUALIZADORow(ByVal row As REPORTE_ACTUALIZADORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_ACTUALIZADORow( _
                    ByVal COD_MONEDA As String,  _
                    ByVal DESC_MONEDA As String,  _
                    ByVal FECHA_COMP As Date,  _
                    ByVal COD_AUX As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal FECHA_DOC As Date,  _
                    ByVal NRO_DOC As String,  _
                    ByVal COD_DOC As String,  _
                    ByVal COD_PER As String,  _
                    ByVal DESC_PER As String,  _
                    ByVal COD_D_H As String,  _
                    ByVal IMP_S As Decimal,  _
                    ByVal IMP_D As Decimal,  _
                    ByVal GLOSA As String,  _
                    ByVal COD_CUENTA As String,  _
                    ByVal TIPO_CAMBIO As Decimal,  _
                    ByVal STATUS_CONCILIADO As String,  _
                    ByVal FECHA_VEN As Date,  _
                    ByVal NRO_DOC_PER As String) As REPORTE_ACTUALIZADORow
            Dim rowREPORTE_ACTUALIZADORow As REPORTE_ACTUALIZADORow = CType(Me.NewRow,REPORTE_ACTUALIZADORow)
            Dim columnValuesArray() As Object = New Object() {COD_MONEDA, DESC_MONEDA, FECHA_COMP, COD_AUX, COD_COMP, NRO_COMP, FECHA_DOC, NRO_DOC, COD_DOC, COD_PER, DESC_PER, COD_D_H, IMP_S, IMP_D, GLOSA, COD_CUENTA, TIPO_CAMBIO, STATUS_CONCILIADO, FECHA_VEN, NRO_DOC_PER}
            rowREPORTE_ACTUALIZADORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_ACTUALIZADORow)
            Return rowREPORTE_ACTUALIZADORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_ACTUALIZADODataTable = CType(MyBase.Clone,REPORTE_ACTUALIZADODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_ACTUALIZADODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_MONEDA = MyBase.Columns("COD_MONEDA")
            Me.columnDESC_MONEDA = MyBase.Columns("DESC_MONEDA")
            Me.columnFECHA_COMP = MyBase.Columns("FECHA_COMP")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnFECHA_DOC = MyBase.Columns("FECHA_DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnCOD_D_H = MyBase.Columns("COD_D_H")
            Me.columnIMP_S = MyBase.Columns("IMP_S")
            Me.columnIMP_D = MyBase.Columns("IMP_D")
            Me.columnGLOSA = MyBase.Columns("GLOSA")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
            Me.columnTIPO_CAMBIO = MyBase.Columns("TIPO_CAMBIO")
            Me.columnSTATUS_CONCILIADO = MyBase.Columns("STATUS_CONCILIADO")
            Me.columnFECHA_VEN = MyBase.Columns("FECHA_VEN")
            Me.columnNRO_DOC_PER = MyBase.Columns("NRO_DOC_PER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_MONEDA = New Global.System.Data.DataColumn("COD_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MONEDA)
            Me.columnDESC_MONEDA = New Global.System.Data.DataColumn("DESC_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_MONEDA)
            Me.columnFECHA_COMP = New Global.System.Data.DataColumn("FECHA_COMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_COMP)
            Me.columnCOD_AUX = New Global.System.Data.DataColumn("COD_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnCOD_COMP = New Global.System.Data.DataColumn("COD_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnNRO_COMP = New Global.System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnFECHA_DOC = New Global.System.Data.DataColumn("FECHA_DOC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DOC)
            Me.columnNRO_DOC = New Global.System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnCOD_DOC = New Global.System.Data.DataColumn("COD_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnCOD_PER = New Global.System.Data.DataColumn("COD_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New Global.System.Data.DataColumn("DESC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnCOD_D_H = New Global.System.Data.DataColumn("COD_D_H", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_D_H)
            Me.columnIMP_S = New Global.System.Data.DataColumn("IMP_S", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_S)
            Me.columnIMP_D = New Global.System.Data.DataColumn("IMP_D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_D)
            Me.columnGLOSA = New Global.System.Data.DataColumn("GLOSA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLOSA)
            Me.columnCOD_CUENTA = New Global.System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnTIPO_CAMBIO = New Global.System.Data.DataColumn("TIPO_CAMBIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO_CAMBIO)
            Me.columnSTATUS_CONCILIADO = New Global.System.Data.DataColumn("STATUS_CONCILIADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_CONCILIADO)
            Me.columnFECHA_VEN = New Global.System.Data.DataColumn("FECHA_VEN", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_VEN)
            Me.columnNRO_DOC_PER = New Global.System.Data.DataColumn("NRO_DOC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC_PER)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_ACTUALIZADORow() As REPORTE_ACTUALIZADORow
            Return CType(Me.NewRow,REPORTE_ACTUALIZADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_ACTUALIZADORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_ACTUALIZADORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_ACTUALIZADORowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_ACTUALIZADORowChanged(Me, New REPORTE_ACTUALIZADORowChangeEvent(CType(e.Row,REPORTE_ACTUALIZADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_ACTUALIZADORowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_ACTUALIZADORowChanging(Me, New REPORTE_ACTUALIZADORowChangeEvent(CType(e.Row,REPORTE_ACTUALIZADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_ACTUALIZADORowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_ACTUALIZADORowDeleted(Me, New REPORTE_ACTUALIZADORowChangeEvent(CType(e.Row,REPORTE_ACTUALIZADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_ACTUALIZADORowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_ACTUALIZADORowDeleting(Me, New REPORTE_ACTUALIZADORowChangeEvent(CType(e.Row,REPORTE_ACTUALIZADORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_ACTUALIZADORow(ByVal row As REPORTE_ACTUALIZADORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REP_ANA_CXP = New DT_REP_ANA_CXP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_ACTUALIZADODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_CONCILIADASRow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_CONCILIADAS As REPORTE_CONCILIADASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_CONCILIADAS = CType(Me.Table,REPORTE_CONCILIADASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS.COD_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_MONEDA' de la tabla 'REPORTE_CONCILIADAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.COD_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS.DESC_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_MONEDA' de la tabla 'REPORTE_CONCILIADAS' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.DESC_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_COMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS.FECHA_COMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_COMP' de la tabla 'REPORTE_CONCILIADAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.FECHA_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS.COD_AUXColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.COD_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS.NRO_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.NRO_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS.FECHA_DOCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_DOC' de la tabla 'REPORTE_CONCILIADAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.FECHA_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.NRO_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.COD_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CAMBIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS.TIPO_CAMBIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_CAMBIO' de la tabla 'REPORTE_CONCILIADAS' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.TIPO_CAMBIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_D_H() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS.COD_D_HColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_D_H' de la tabla 'REPORTE_CONCILIADAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.COD_D_HColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_S() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS.IMP_SColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_S' de la tabla 'REPORTE_CONCILIADAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.IMP_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS.IMP_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_D' de la tabla 'REPORTE_CONCILIADAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.IMP_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_CONCILIADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS.STATUS_CONCILIADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_CONCILIADO' de la tabla 'REPORTE_CONCILIADAS' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.STATUS_CONCILIADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.COD_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS.DESC_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_CONCILIADAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.DESC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLOSA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS.GLOSAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GLOSA' de la tabla 'REPORTE_CONCILIADAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.GLOSAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS.COD_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.COD_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_VEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_CONCILIADAS.FECHA_VENColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_VEN' de la tabla 'REPORTE_CONCILIADAS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.FECHA_VENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_CONCILIADAS.NRO_DOC_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_CONCILIADAS.NRO_DOC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS.COD_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MONEDANull()
            Me(Me.tableREPORTE_CONCILIADAS.COD_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS.DESC_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONEDANull()
            Me(Me.tableREPORTE_CONCILIADAS.DESC_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS.FECHA_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_COMPNull()
            Me(Me.tableREPORTE_CONCILIADAS.FECHA_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS.FECHA_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DOCNull()
            Me(Me.tableREPORTE_CONCILIADAS.FECHA_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CAMBIONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS.TIPO_CAMBIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CAMBIONull()
            Me(Me.tableREPORTE_CONCILIADAS.TIPO_CAMBIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_D_HNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS.COD_D_HColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_D_HNull()
            Me(Me.tableREPORTE_CONCILIADAS.COD_D_HColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_SNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS.IMP_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_SNull()
            Me(Me.tableREPORTE_CONCILIADAS.IMP_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS.IMP_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DNull()
            Me(Me.tableREPORTE_CONCILIADAS.IMP_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_CONCILIADONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS.STATUS_CONCILIADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_CONCILIADONull()
            Me(Me.tableREPORTE_CONCILIADAS.STATUS_CONCILIADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS.DESC_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_CONCILIADAS.DESC_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLOSANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS.GLOSAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLOSANull()
            Me(Me.tableREPORTE_CONCILIADAS.GLOSAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_VENNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_CONCILIADAS.FECHA_VENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_VENNull()
            Me(Me.tableREPORTE_CONCILIADAS.FECHA_VENColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_SALDOS_TCXPRow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_SALDOS_TCXP As REPORTE_SALDOS_TCXPDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_SALDOS_TCXP = CType(Me.Table,REPORTE_SALDOS_TCXPDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.COD_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_MONEDA' de la tabla 'REPORTE_SALDOS_TCXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.COD_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.DESC_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_MONEDA' de la tabla 'REPORTE_SALDOS_TCXP' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.DESC_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_COMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.FECHA_COMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_COMP' de la tabla 'REPORTE_SALDOS_TCXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.FECHA_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.COD_AUXColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.COD_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.NRO_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.NRO_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.FECHA_DOCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_DOC' de la tabla 'REPORTE_SALDOS_TCXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.FECHA_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.NRO_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.COD_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CAMBIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.TIPO_CAMBIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_CAMBIO' de la tabla 'REPORTE_SALDOS_TCXP' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.TIPO_CAMBIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_D_H() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.COD_D_HColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_D_H' de la tabla 'REPORTE_SALDOS_TCXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.COD_D_HColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.IMPORTEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMPORTE' de la tabla 'REPORTE_SALDOS_TCXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.IMPORTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_CONCILIADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.STATUS_CONCILIADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_CONCILIADO' de la tabla 'REPORTE_SALDOS_TCXP' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.STATUS_CONCILIADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.COD_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.DESC_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_SALDOS_TCXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.DESC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLOSA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.GLOSAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GLOSA' de la tabla 'REPORTE_SALDOS_TCXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.GLOSAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.COD_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.COD_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_VEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.FECHA_VENColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_VEN' de la tabla 'REPORTE_SALDOS_TCXP' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.FECHA_VENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC1() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TCXP.COD_DOC1Column),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP.COD_DOC1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TCXP.COD_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MONEDANull()
            Me(Me.tableREPORTE_SALDOS_TCXP.COD_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TCXP.DESC_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONEDANull()
            Me(Me.tableREPORTE_SALDOS_TCXP.DESC_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TCXP.FECHA_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_COMPNull()
            Me(Me.tableREPORTE_SALDOS_TCXP.FECHA_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TCXP.FECHA_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DOCNull()
            Me(Me.tableREPORTE_SALDOS_TCXP.FECHA_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CAMBIONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TCXP.TIPO_CAMBIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CAMBIONull()
            Me(Me.tableREPORTE_SALDOS_TCXP.TIPO_CAMBIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_D_HNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TCXP.COD_D_HColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_D_HNull()
            Me(Me.tableREPORTE_SALDOS_TCXP.COD_D_HColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORTENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TCXP.IMPORTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORTENull()
            Me(Me.tableREPORTE_SALDOS_TCXP.IMPORTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_CONCILIADONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TCXP.STATUS_CONCILIADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_CONCILIADONull()
            Me(Me.tableREPORTE_SALDOS_TCXP.STATUS_CONCILIADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TCXP.DESC_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_SALDOS_TCXP.DESC_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLOSANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TCXP.GLOSAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLOSANull()
            Me(Me.tableREPORTE_SALDOS_TCXP.GLOSAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_VENNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TCXP.FECHA_VENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_VENNull()
            Me(Me.tableREPORTE_SALDOS_TCXP.FECHA_VENColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_TCXP_KARDEX_ACUMULADORow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_TCXP_KARDEX_ACUMULADO As REPORTE_TCXP_KARDEX_ACUMULADODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_TCXP_KARDEX_ACUMULADO = CType(Me.Table,REPORTE_TCXP_KARDEX_ACUMULADODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_MONEDA' de la tabla 'REPORTE_TCXP_KARDEX_ACUMULADO' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.DESC_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_MONEDA' de la tabla 'REPORTE_TCXP_KARDEX_ACUMULADO' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.DESC_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_COMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.FECHA_COMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_COMP' de la tabla 'REPORTE_TCXP_KARDEX_ACUMULADO' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.FECHA_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_AUXColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.NRO_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.NRO_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.FECHA_DOCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_DOC' de la tabla 'REPORTE_TCXP_KARDEX_ACUMULADO' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.FECHA_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.NRO_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CAMBIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.TIPO_CAMBIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_CAMBIO' de la tabla 'REPORTE_TCXP_KARDEX_ACUMULADO' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.TIPO_CAMBIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_D_H() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_D_HColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_D_H' de la tabla 'REPORTE_TCXP_KARDEX_ACUMULADO' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_D_HColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_S() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMP_SColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_S' de la tabla 'REPORTE_TCXP_KARDEX_ACUMULADO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMP_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMP_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_D' de la tabla 'REPORTE_TCXP_KARDEX_ACUMULADO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMP_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_CONCILIADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.STATUS_CONCILIADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_CONCILIADO' de la tabla 'REPORTE_TCXP_KARDEX_ACUMU"& _ 
                            "LADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.STATUS_CONCILIADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.DESC_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_TCXP_KARDEX_ACUMULADO' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.DESC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLOSA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.GLOSAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GLOSA' de la tabla 'REPORTE_TCXP_KARDEX_ACUMULADO' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.GLOSAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTE_SOLES_DEBE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_SOLES_DEBEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMPORTE_SOLES_DEBE' de la tabla 'REPORTE_TCXP_KARDEX_ACUM"& _ 
                            "ULADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_SOLES_DEBEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTE_SOLES_HABER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_SOLES_HABERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMPORTE_SOLES_HABER' de la tabla 'REPORTE_TCXP_KARDEX_ACU"& _ 
                            "MULADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_SOLES_HABERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTE_DOLARES_DEBE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_DOLARES_DEBEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMPORTE_DOLARES_DEBE' de la tabla 'REPORTE_TCXP_KARDEX_AC"& _ 
                            "UMULADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_DOLARES_DEBEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTE_DOLARES_HABER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_DOLARES_HABERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMPORTE_DOLARES_HABER' de la tabla 'REPORTE_TCXP_KARDEX_A"& _ 
                            "CUMULADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_DOLARES_HABERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MONEDANull()
            Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.DESC_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONEDANull()
            Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.DESC_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.FECHA_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_COMPNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.FECHA_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.FECHA_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DOCNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.FECHA_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CAMBIONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.TIPO_CAMBIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CAMBIONull()
            Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.TIPO_CAMBIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_D_HNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_D_HColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_D_HNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.COD_D_HColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_SNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMP_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_SNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMP_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMP_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMP_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_CONCILIADONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.STATUS_CONCILIADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_CONCILIADONull()
            Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.STATUS_CONCILIADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.DESC_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.DESC_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLOSANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.GLOSAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLOSANull()
            Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.GLOSAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORTE_SOLES_DEBENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_SOLES_DEBEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORTE_SOLES_DEBENull()
            Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_SOLES_DEBEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORTE_SOLES_HABERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_SOLES_HABERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORTE_SOLES_HABERNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_SOLES_HABERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORTE_DOLARES_DEBENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_DOLARES_DEBEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORTE_DOLARES_DEBENull()
            Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_DOLARES_DEBEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORTE_DOLARES_HABERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_DOLARES_HABERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORTE_DOLARES_HABERNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_ACUMULADO.IMPORTE_DOLARES_HABERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_TCXP_KARDEX_NO_ACUMULADORow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_TCXP_KARDEX_NO_ACUMULADO As REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO = CType(Me.Table,REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_MONEDA' de la tabla 'REPORTE_TCXP_KARDEX_NO_ACUMULADO"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.DESC_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_MONEDA' de la tabla 'REPORTE_TCXP_KARDEX_NO_ACUMULAD"& _ 
                            "O' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.DESC_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_COMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.FECHA_COMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_COMP' de la tabla 'REPORTE_TCXP_KARDEX_NO_ACUMULADO"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.FECHA_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_AUXColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.NRO_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.NRO_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.FECHA_DOCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_DOC' de la tabla 'REPORTE_TCXP_KARDEX_NO_ACUMULADO'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.FECHA_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.NRO_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CAMBIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.TIPO_CAMBIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_CAMBIO' de la tabla 'REPORTE_TCXP_KARDEX_NO_ACUMULAD"& _ 
                            "O' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.TIPO_CAMBIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_D_H() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_D_HColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_D_H' de la tabla 'REPORTE_TCXP_KARDEX_NO_ACUMULADO' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_D_HColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_S() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMP_SColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_S' de la tabla 'REPORTE_TCXP_KARDEX_NO_ACUMULADO' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMP_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMP_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_D' de la tabla 'REPORTE_TCXP_KARDEX_NO_ACUMULADO' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMP_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_CONCILIADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.STATUS_CONCILIADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_CONCILIADO' de la tabla 'REPORTE_TCXP_KARDEX_NO_AC"& _ 
                            "UMULADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.STATUS_CONCILIADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.DESC_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_TCXP_KARDEX_NO_ACUMULADO' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.DESC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLOSA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.GLOSAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GLOSA' de la tabla 'REPORTE_TCXP_KARDEX_NO_ACUMULADO' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.GLOSAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTE_SOLES_DEBE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_SOLES_DEBEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMPORTE_SOLES_DEBE' de la tabla 'REPORTE_TCXP_KARDEX_NO_A"& _ 
                            "CUMULADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_SOLES_DEBEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTE_SOLES_HABER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_SOLES_HABERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMPORTE_SOLES_HABER' de la tabla 'REPORTE_TCXP_KARDEX_NO_"& _ 
                            "ACUMULADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_SOLES_HABERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTE_DOLARES_DEBE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_DOLARES_DEBEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMPORTE_DOLARES_DEBE' de la tabla 'REPORTE_TCXP_KARDEX_NO"& _ 
                            "_ACUMULADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_DOLARES_DEBEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMPORTE_DOLARES_HABER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_DOLARES_HABERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMPORTE_DOLARES_HABER' de la tabla 'REPORTE_TCXP_KARDEX_N"& _ 
                            "O_ACUMULADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_DOLARES_HABERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MONEDANull()
            Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.DESC_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONEDANull()
            Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.DESC_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.FECHA_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_COMPNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.FECHA_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.FECHA_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DOCNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.FECHA_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CAMBIONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.TIPO_CAMBIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CAMBIONull()
            Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.TIPO_CAMBIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_D_HNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_D_HColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_D_HNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.COD_D_HColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_SNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMP_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_SNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMP_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMP_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMP_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_CONCILIADONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.STATUS_CONCILIADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_CONCILIADONull()
            Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.STATUS_CONCILIADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.DESC_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.DESC_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLOSANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.GLOSAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLOSANull()
            Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.GLOSAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORTE_SOLES_DEBENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_SOLES_DEBEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORTE_SOLES_DEBENull()
            Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_SOLES_DEBEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORTE_SOLES_HABERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_SOLES_HABERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORTE_SOLES_HABERNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_SOLES_HABERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORTE_DOLARES_DEBENull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_DOLARES_DEBEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORTE_DOLARES_DEBENull()
            Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_DOLARES_DEBEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMPORTE_DOLARES_HABERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_DOLARES_HABERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMPORTE_DOLARES_HABERNull()
            Me(Me.tableREPORTE_TCXP_KARDEX_NO_ACUMULADO.IMPORTE_DOLARES_HABERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_SALDOS_TCXP2Row
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_SALDOS_TCXP2 As REPORTE_SALDOS_TCXP2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_SALDOS_TCXP2 = CType(Me.Table,REPORTE_SALDOS_TCXP2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO_SOLES() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TCXP2.SALDO_SOLESColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO_SOLES' de la tabla 'REPORTE_SALDOS_TCXP2' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP2.SALDO_SOLESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO_DOLARES() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TCXP2.SALDO_DOLARESColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO_DOLARES' de la tabla 'REPORTE_SALDOS_TCXP2' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP2.SALDO_DOLARESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_SALDOS_TCXP2.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP2.COD_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TCXP2.DESC_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_SALDOS_TCXP2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP2.DESC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_SALDOS_TCXP2.NRO_DOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_DOC' de la tabla 'REPORTE_SALDOS_TCXP2' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_SALDOS_TCXP2.NRO_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO_SOLESNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TCXP2.SALDO_SOLESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO_SOLESNull()
            Me(Me.tableREPORTE_SALDOS_TCXP2.SALDO_SOLESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO_DOLARESNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TCXP2.SALDO_DOLARESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO_DOLARESNull()
            Me(Me.tableREPORTE_SALDOS_TCXP2.SALDO_DOLARESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TCXP2.DESC_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_SALDOS_TCXP2.DESC_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_SALDOS_TCXP2.NRO_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_DOCNull()
            Me(Me.tableREPORTE_SALDOS_TCXP2.NRO_DOCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_ACTUALIZADORow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_ACTUALIZADO As REPORTE_ACTUALIZADODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_ACTUALIZADO = CType(Me.Table,REPORTE_ACTUALIZADODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.COD_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_MONEDA' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.COD_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.DESC_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_MONEDA' de la tabla 'REPORTE_ACTUALIZADO' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.DESC_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_COMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.FECHA_COMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_COMP' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.FECHA_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.COD_AUXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_AUX' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.COD_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.COD_COMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_COMP' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.COD_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.NRO_COMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_COMP' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.NRO_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.FECHA_DOCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_DOC' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.FECHA_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.NRO_DOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_DOC' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.NRO_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.COD_DOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_DOC' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.COD_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.COD_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_PER' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.COD_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.DESC_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.DESC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_D_H() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.COD_D_HColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_D_H' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.COD_D_HColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_S() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.IMP_SColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_S' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.IMP_SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_D() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.IMP_DColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_D' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.IMP_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLOSA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.GLOSAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GLOSA' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.GLOSAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.COD_CUENTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_CUENTA' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO_CAMBIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.TIPO_CAMBIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO_CAMBIO' de la tabla 'REPORTE_ACTUALIZADO' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.TIPO_CAMBIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_CONCILIADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.STATUS_CONCILIADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'STATUS_CONCILIADO' de la tabla 'REPORTE_ACTUALIZADO' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.STATUS_CONCILIADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_VEN() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.FECHA_VENColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_VEN' de la tabla 'REPORTE_ACTUALIZADO' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.FECHA_VENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ACTUALIZADO.NRO_DOC_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_DOC_PER' de la tabla 'REPORTE_ACTUALIZADO' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ACTUALIZADO.NRO_DOC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.COD_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MONEDANull()
            Me(Me.tableREPORTE_ACTUALIZADO.COD_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.DESC_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_MONEDANull()
            Me(Me.tableREPORTE_ACTUALIZADO.DESC_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.FECHA_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_COMPNull()
            Me(Me.tableREPORTE_ACTUALIZADO.FECHA_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_AUXNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.COD_AUXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_AUXNull()
            Me(Me.tableREPORTE_ACTUALIZADO.COD_AUXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.COD_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_COMPNull()
            Me(Me.tableREPORTE_ACTUALIZADO.COD_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMPNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.NRO_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMPNull()
            Me(Me.tableREPORTE_ACTUALIZADO.NRO_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.FECHA_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DOCNull()
            Me(Me.tableREPORTE_ACTUALIZADO.FECHA_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.NRO_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_DOCNull()
            Me(Me.tableREPORTE_ACTUALIZADO.NRO_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.COD_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_DOCNull()
            Me(Me.tableREPORTE_ACTUALIZADO.COD_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.COD_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_PERNull()
            Me(Me.tableREPORTE_ACTUALIZADO.COD_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.DESC_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_ACTUALIZADO.DESC_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_D_HNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.COD_D_HColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_D_HNull()
            Me(Me.tableREPORTE_ACTUALIZADO.COD_D_HColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_SNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.IMP_SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_SNull()
            Me(Me.tableREPORTE_ACTUALIZADO.IMP_SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.IMP_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DNull()
            Me(Me.tableREPORTE_ACTUALIZADO.IMP_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLOSANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.GLOSAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLOSANull()
            Me(Me.tableREPORTE_ACTUALIZADO.GLOSAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_CUENTANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.COD_CUENTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_CUENTANull()
            Me(Me.tableREPORTE_ACTUALIZADO.COD_CUENTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPO_CAMBIONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.TIPO_CAMBIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPO_CAMBIONull()
            Me(Me.tableREPORTE_ACTUALIZADO.TIPO_CAMBIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_CONCILIADONull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.STATUS_CONCILIADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_CONCILIADONull()
            Me(Me.tableREPORTE_ACTUALIZADO.STATUS_CONCILIADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_VENNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.FECHA_VENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_VENNull()
            Me(Me.tableREPORTE_ACTUALIZADO.FECHA_VENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_DOC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ACTUALIZADO.NRO_DOC_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_DOC_PERNull()
            Me(Me.tableREPORTE_ACTUALIZADO.NRO_DOC_PERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_CONCILIADASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_CONCILIADASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_CONCILIADASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_CONCILIADASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_SALDOS_TCXPRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_SALDOS_TCXPRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_SALDOS_TCXPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_SALDOS_TCXPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_TCXP_KARDEX_ACUMULADORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_TCXP_KARDEX_ACUMULADORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_TCXP_KARDEX_ACUMULADORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_TCXP_KARDEX_ACUMULADORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_TCXP_KARDEX_NO_ACUMULADORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_TCXP_KARDEX_NO_ACUMULADORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_TCXP_KARDEX_NO_ACUMULADORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_TCXP_KARDEX_NO_ACUMULADORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_SALDOS_TCXP2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_SALDOS_TCXP2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_SALDOS_TCXP2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_SALDOS_TCXP2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_ACTUALIZADORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_ACTUALIZADORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_ACTUALIZADORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_ACTUALIZADORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DT_REP_ANA_CXPTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_CONCILIADASTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_CONCILIADAS"
            tableMapping.ColumnMappings.Add("COD_MONEDA", "COD_MONEDA")
            tableMapping.ColumnMappings.Add("DESC_MONEDA", "DESC_MONEDA")
            tableMapping.ColumnMappings.Add("FECHA_COMP", "FECHA_COMP")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("FECHA_DOC", "FECHA_DOC")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("TIPO_CAMBIO", "TIPO_CAMBIO")
            tableMapping.ColumnMappings.Add("COD_D_H", "COD_D_H")
            tableMapping.ColumnMappings.Add("IMP_S", "IMP_S")
            tableMapping.ColumnMappings.Add("IMP_D", "IMP_D")
            tableMapping.ColumnMappings.Add("STATUS_CONCILIADO", "STATUS_CONCILIADO")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("GLOSA", "GLOSA")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("FECHA_VEN", "FECHA_VEN")
            tableMapping.ColumnMappings.Add("NRO_DOC_PER", "NRO_DOC_PER")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_CONCILIADAS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_MES", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_CUENTA", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS_CONCILIADO", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_PER", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@S_PER", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_CONC", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REP_ANA_CXP.REPORTE_CONCILIADASDataTable, ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String, ByVal STATUS_CONCILIADO As String, ByVal COD_PER As String, ByVal S_PER As String, ByVal FECHA_CONC As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (STATUS_CONCILIADO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(STATUS_CONCILIADO,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(COD_PER,String)
            End If
            If (S_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(S_PER,String)
            End If
            If (FECHA_CONC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(FECHA_CONC.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String, ByVal STATUS_CONCILIADO As String, ByVal COD_PER As String, ByVal S_PER As String, ByVal FECHA_CONC As Global.System.Nullable(Of Date)) As DT_REP_ANA_CXP.REPORTE_CONCILIADASDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (STATUS_CONCILIADO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(STATUS_CONCILIADO,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(COD_PER,String)
            End If
            If (S_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(S_PER,String)
            End If
            If (FECHA_CONC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(FECHA_CONC.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DT_REP_ANA_CXP.REPORTE_CONCILIADASDataTable = New DT_REP_ANA_CXP.REPORTE_CONCILIADASDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_SALDOS_TCXPTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_SALDOS_TCXP"
            tableMapping.ColumnMappings.Add("COD_MONEDA", "COD_MONEDA")
            tableMapping.ColumnMappings.Add("DESC_MONEDA", "DESC_MONEDA")
            tableMapping.ColumnMappings.Add("FECHA_COMP", "FECHA_COMP")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("FECHA_DOC", "FECHA_DOC")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("TIPO_CAMBIO", "TIPO_CAMBIO")
            tableMapping.ColumnMappings.Add("COD_D_H", "COD_D_H")
            tableMapping.ColumnMappings.Add("IMPORTE", "IMPORTE")
            tableMapping.ColumnMappings.Add("STATUS_CONCILIADO", "STATUS_CONCILIADO")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("GLOSA", "GLOSA")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("FECHA_VEN", "FECHA_VEN")
            tableMapping.ColumnMappings.Add("COD_DOC1", "COD_DOC1")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_SALDOS_TCXP"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_MES", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_CUENTA", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS_CONCILIADO", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_PER", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@S_PER", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_CONC", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REP_ANA_CXP.REPORTE_SALDOS_TCXPDataTable, ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String, ByVal STATUS_CONCILIADO As String, ByVal COD_PER As String, ByVal S_PER As String, ByVal FECHA_CONC As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (STATUS_CONCILIADO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(STATUS_CONCILIADO,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(COD_PER,String)
            End If
            If (S_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(S_PER,String)
            End If
            If (FECHA_CONC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(FECHA_CONC.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String, ByVal STATUS_CONCILIADO As String, ByVal COD_PER As String, ByVal S_PER As String, ByVal FECHA_CONC As Global.System.Nullable(Of Date)) As DT_REP_ANA_CXP.REPORTE_SALDOS_TCXPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (STATUS_CONCILIADO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(STATUS_CONCILIADO,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(COD_PER,String)
            End If
            If (S_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(S_PER,String)
            End If
            If (FECHA_CONC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(FECHA_CONC.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DT_REP_ANA_CXP.REPORTE_SALDOS_TCXPDataTable = New DT_REP_ANA_CXP.REPORTE_SALDOS_TCXPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_TCXP_KARDEX_ACUMULADOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_TCXP_KARDEX_ACUMULADO"
            tableMapping.ColumnMappings.Add("COD_MONEDA", "COD_MONEDA")
            tableMapping.ColumnMappings.Add("DESC_MONEDA", "DESC_MONEDA")
            tableMapping.ColumnMappings.Add("FECHA_COMP", "FECHA_COMP")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("FECHA_DOC", "FECHA_DOC")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("TIPO_CAMBIO", "TIPO_CAMBIO")
            tableMapping.ColumnMappings.Add("COD_D_H", "COD_D_H")
            tableMapping.ColumnMappings.Add("IMP_S", "IMP_S")
            tableMapping.ColumnMappings.Add("IMP_D", "IMP_D")
            tableMapping.ColumnMappings.Add("STATUS_CONCILIADO", "STATUS_CONCILIADO")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("GLOSA", "GLOSA")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            tableMapping.ColumnMappings.Add("IMPORTE_SOLES_DEBE", "IMPORTE_SOLES_DEBE")
            tableMapping.ColumnMappings.Add("IMPORTE_SOLES_HABER", "IMPORTE_SOLES_HABER")
            tableMapping.ColumnMappings.Add("IMPORTE_DOLARES_DEBE", "IMPORTE_DOLARES_DEBE")
            tableMapping.ColumnMappings.Add("IMPORTE_DOLARES_HABER", "IMPORTE_DOLARES_HABER")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_TCXP_KARDEX_ACUMULADO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_MES2", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_CUENTA", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_PER", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REP_ANA_CXP.REPORTE_TCXP_KARDEX_ACUMULADODataTable, ByVal FE_AÑO As String, ByVal FE_MES2 As String, ByVal COD_CUENTA As String, ByVal COD_PER As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES2,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(COD_PER,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FE_AÑO As String, ByVal FE_MES2 As String, ByVal COD_CUENTA As String, ByVal COD_PER As String) As DT_REP_ANA_CXP.REPORTE_TCXP_KARDEX_ACUMULADODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES2 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES2,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(COD_PER,String)
            End If
            Dim dataTable As DT_REP_ANA_CXP.REPORTE_TCXP_KARDEX_ACUMULADODataTable = New DT_REP_ANA_CXP.REPORTE_TCXP_KARDEX_ACUMULADODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_TCXP_KARDEX_NO_ACUMULADOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_TCXP_KARDEX_NO_ACUMULADO"
            tableMapping.ColumnMappings.Add("COD_MONEDA", "COD_MONEDA")
            tableMapping.ColumnMappings.Add("DESC_MONEDA", "DESC_MONEDA")
            tableMapping.ColumnMappings.Add("FECHA_COMP", "FECHA_COMP")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("FECHA_DOC", "FECHA_DOC")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("TIPO_CAMBIO", "TIPO_CAMBIO")
            tableMapping.ColumnMappings.Add("COD_D_H", "COD_D_H")
            tableMapping.ColumnMappings.Add("IMP_S", "IMP_S")
            tableMapping.ColumnMappings.Add("IMP_D", "IMP_D")
            tableMapping.ColumnMappings.Add("STATUS_CONCILIADO", "STATUS_CONCILIADO")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("GLOSA", "GLOSA")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            tableMapping.ColumnMappings.Add("IMPORTE_SOLES_DEBE", "IMPORTE_SOLES_DEBE")
            tableMapping.ColumnMappings.Add("IMPORTE_SOLES_HABER", "IMPORTE_SOLES_HABER")
            tableMapping.ColumnMappings.Add("IMPORTE_DOLARES_DEBE", "IMPORTE_DOLARES_DEBE")
            tableMapping.ColumnMappings.Add("IMPORTE_DOLARES_HABER", "IMPORTE_DOLARES_HABER")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_TCXP_KARDEX_NO_ACUMULADO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_MES", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_CUENTA", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_PER", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REP_ANA_CXP.REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable, ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String, ByVal COD_PER As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(COD_PER,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String, ByVal COD_PER As String) As DT_REP_ANA_CXP.REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (COD_PER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(COD_PER,String)
            End If
            Dim dataTable As DT_REP_ANA_CXP.REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable = New DT_REP_ANA_CXP.REPORTE_TCXP_KARDEX_NO_ACUMULADODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_SALDOS_TCXP2TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_SALDOS_TCXP2"
            tableMapping.ColumnMappings.Add("SALDO_SOLES", "SALDO_SOLES")
            tableMapping.ColumnMappings.Add("SALDO_DOLARES", "SALDO_DOLARES")
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_SALDOS_TCXP2"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_MES", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_CUENTA", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS_CONCILIADO", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FECHA_CONC", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TIPO", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REP_ANA_CXP.REPORTE_SALDOS_TCXP2DataTable, ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String, ByVal STATUS_CONCILIADO As String, ByVal FECHA_CONC As Global.System.Nullable(Of Date), ByVal TIPO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (STATUS_CONCILIADO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(STATUS_CONCILIADO,String)
            End If
            If (FECHA_CONC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(FECHA_CONC.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TIPO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(TIPO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String, ByVal STATUS_CONCILIADO As String, ByVal FECHA_CONC As Global.System.Nullable(Of Date), ByVal TIPO As String) As DT_REP_ANA_CXP.REPORTE_SALDOS_TCXP2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (STATUS_CONCILIADO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(STATUS_CONCILIADO,String)
            End If
            If (FECHA_CONC.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(FECHA_CONC.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TIPO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(TIPO,String)
            End If
            Dim dataTable As DT_REP_ANA_CXP.REPORTE_SALDOS_TCXP2DataTable = New DT_REP_ANA_CXP.REPORTE_SALDOS_TCXP2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace

'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.7905
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DT_REP_ANA_TP"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DT_REP_ANA_TP
    Inherits Global.System.Data.DataSet
    
    Private tableREPORTE_ANALISIS_VS_TCTAS As REPORTE_ANALISIS_VS_TCTASDataTable
    
    Private tableDataTable1 As DataTable1DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("REPORTE_ANALISIS_VS_TCTAS")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_ANALISIS_VS_TCTASDataTable(ds.Tables("REPORTE_ANALISIS_VS_TCTAS")))
            End If
            If (Not (ds.Tables("DataTable1")) Is Nothing) Then
                MyBase.Tables.Add(New DataTable1DataTable(ds.Tables("DataTable1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property REPORTE_ANALISIS_VS_TCTAS() As REPORTE_ANALISIS_VS_TCTASDataTable
        Get
            Return Me.tableREPORTE_ANALISIS_VS_TCTAS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataTable1() As DataTable1DataTable
        Get
            Return Me.tableDataTable1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DT_REP_ANA_TP = CType(MyBase.Clone,DT_REP_ANA_TP)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("REPORTE_ANALISIS_VS_TCTAS")) Is Nothing) Then
                MyBase.Tables.Add(New REPORTE_ANALISIS_VS_TCTASDataTable(ds.Tables("REPORTE_ANALISIS_VS_TCTAS")))
            End If
            If (Not (ds.Tables("DataTable1")) Is Nothing) Then
                MyBase.Tables.Add(New DataTable1DataTable(ds.Tables("DataTable1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableREPORTE_ANALISIS_VS_TCTAS = CType(MyBase.Tables("REPORTE_ANALISIS_VS_TCTAS"),REPORTE_ANALISIS_VS_TCTASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableREPORTE_ANALISIS_VS_TCTAS) Is Nothing) Then
                Me.tableREPORTE_ANALISIS_VS_TCTAS.InitVars
            End If
        End If
        Me.tableDataTable1 = CType(MyBase.Tables("DataTable1"),DataTable1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataTable1) Is Nothing) Then
                Me.tableDataTable1.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DT_REP_ANA_TP"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DT_REP_ANA_TP.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableREPORTE_ANALISIS_VS_TCTAS = New REPORTE_ANALISIS_VS_TCTASDataTable
        MyBase.Tables.Add(Me.tableREPORTE_ANALISIS_VS_TCTAS)
        Me.tableDataTable1 = New DataTable1DataTable
        MyBase.Tables.Add(Me.tableDataTable1)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeREPORTE_ANALISIS_VS_TCTAS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataTable1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DT_REP_ANA_TP = New DT_REP_ANA_TP
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub REPORTE_ANALISIS_VS_TCTASRowChangeEventHandler(ByVal sender As Object, ByVal e As REPORTE_ANALISIS_VS_TCTASRowChangeEvent)
    
    Public Delegate Sub DataTable1RowChangeEventHandler(ByVal sender As Object, ByVal e As DataTable1RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class REPORTE_ANALISIS_VS_TCTASDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_PER As Global.System.Data.DataColumn
        
        Private columnDESC_PER As Global.System.Data.DataColumn
        
        Private columnCOD_DOC As Global.System.Data.DataColumn
        
        Private columnNRO_DOC As Global.System.Data.DataColumn
        
        Private columnFECHA_DOC As Global.System.Data.DataColumn
        
        Private columnDOLARES As Global.System.Data.DataColumn
        
        Private columnSOLES As Global.System.Data.DataColumn
        
        Private columnDOLARES2 As Global.System.Data.DataColumn
        
        Private columnSOLES2 As Global.System.Data.DataColumn
        
        Private columnCOD_MONEDA As Global.System.Data.DataColumn
        
        Private columnCOD_CUENTA As Global.System.Data.DataColumn
        
        Private columnCOD_AUX As Global.System.Data.DataColumn
        
        Private columnCOD_COMP As Global.System.Data.DataColumn
        
        Private columnNRO_COMP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "REPORTE_ANALISIS_VS_TCTAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOLARESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOLARES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SOLESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOLES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOLARES2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOLARES2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SOLES2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOLES2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As REPORTE_ANALISIS_VS_TCTASRow
            Get
                Return CType(Me.Rows(index),REPORTE_ANALISIS_VS_TCTASRow)
            End Get
        End Property
        
        Public Event REPORTE_ANALISIS_VS_TCTASRowChanging As REPORTE_ANALISIS_VS_TCTASRowChangeEventHandler
        
        Public Event REPORTE_ANALISIS_VS_TCTASRowChanged As REPORTE_ANALISIS_VS_TCTASRowChangeEventHandler
        
        Public Event REPORTE_ANALISIS_VS_TCTASRowDeleting As REPORTE_ANALISIS_VS_TCTASRowChangeEventHandler
        
        Public Event REPORTE_ANALISIS_VS_TCTASRowDeleted As REPORTE_ANALISIS_VS_TCTASRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddREPORTE_ANALISIS_VS_TCTASRow(ByVal row As REPORTE_ANALISIS_VS_TCTASRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddREPORTE_ANALISIS_VS_TCTASRow(ByVal COD_PER As String, ByVal DESC_PER As String, ByVal COD_DOC As String, ByVal NRO_DOC As String, ByVal FECHA_DOC As Date, ByVal DOLARES As Decimal, ByVal SOLES As Decimal, ByVal DOLARES2 As Decimal, ByVal SOLES2 As Decimal, ByVal COD_MONEDA As String, ByVal COD_CUENTA As String, ByVal COD_AUX As String, ByVal COD_COMP As String, ByVal NRO_COMP As String) As REPORTE_ANALISIS_VS_TCTASRow
            Dim rowREPORTE_ANALISIS_VS_TCTASRow As REPORTE_ANALISIS_VS_TCTASRow = CType(Me.NewRow,REPORTE_ANALISIS_VS_TCTASRow)
            Dim columnValuesArray() As Object = New Object() {COD_PER, DESC_PER, COD_DOC, NRO_DOC, FECHA_DOC, DOLARES, SOLES, DOLARES2, SOLES2, COD_MONEDA, COD_CUENTA, COD_AUX, COD_COMP, NRO_COMP}
            rowREPORTE_ANALISIS_VS_TCTASRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowREPORTE_ANALISIS_VS_TCTASRow)
            Return rowREPORTE_ANALISIS_VS_TCTASRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOD_PERCOD_DOCNRO_DOCCOD_CUENTACOD_AUXCOD_COMPNRO_COMP(ByVal COD_PER As String, ByVal COD_DOC As String, ByVal NRO_DOC As String, ByVal COD_CUENTA As String, ByVal COD_AUX As String, ByVal COD_COMP As String, ByVal NRO_COMP As String) As REPORTE_ANALISIS_VS_TCTASRow
            Return CType(Me.Rows.Find(New Object() {COD_PER, COD_DOC, NRO_DOC, COD_CUENTA, COD_AUX, COD_COMP, NRO_COMP}),REPORTE_ANALISIS_VS_TCTASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As REPORTE_ANALISIS_VS_TCTASDataTable = CType(MyBase.Clone,REPORTE_ANALISIS_VS_TCTASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New REPORTE_ANALISIS_VS_TCTASDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnFECHA_DOC = MyBase.Columns("FECHA_DOC")
            Me.columnDOLARES = MyBase.Columns("DOLARES")
            Me.columnSOLES = MyBase.Columns("SOLES")
            Me.columnDOLARES2 = MyBase.Columns("DOLARES2")
            Me.columnSOLES2 = MyBase.Columns("SOLES2")
            Me.columnCOD_MONEDA = MyBase.Columns("COD_MONEDA")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_PER = New Global.System.Data.DataColumn("COD_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New Global.System.Data.DataColumn("DESC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnCOD_DOC = New Global.System.Data.DataColumn("COD_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnNRO_DOC = New Global.System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnFECHA_DOC = New Global.System.Data.DataColumn("FECHA_DOC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DOC)
            Me.columnDOLARES = New Global.System.Data.DataColumn("DOLARES", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOLARES)
            Me.columnSOLES = New Global.System.Data.DataColumn("SOLES", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOLES)
            Me.columnDOLARES2 = New Global.System.Data.DataColumn("DOLARES2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOLARES2)
            Me.columnSOLES2 = New Global.System.Data.DataColumn("SOLES2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOLES2)
            Me.columnCOD_MONEDA = New Global.System.Data.DataColumn("COD_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MONEDA)
            Me.columnCOD_CUENTA = New Global.System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnCOD_AUX = New Global.System.Data.DataColumn("COD_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnCOD_COMP = New Global.System.Data.DataColumn("COD_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnNRO_COMP = New Global.System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOD_PER, Me.columnCOD_DOC, Me.columnNRO_DOC, Me.columnCOD_CUENTA, Me.columnCOD_AUX, Me.columnCOD_COMP, Me.columnNRO_COMP}, true))
            Me.columnCOD_PER.AllowDBNull = false
            Me.columnCOD_PER.MaxLength = 5
            Me.columnDESC_PER.MaxLength = 60
            Me.columnCOD_DOC.AllowDBNull = false
            Me.columnCOD_DOC.MaxLength = 2
            Me.columnNRO_DOC.AllowDBNull = false
            Me.columnNRO_DOC.MaxLength = 20
            Me.columnDOLARES.ReadOnly = true
            Me.columnSOLES.ReadOnly = true
            Me.columnDOLARES2.ReadOnly = true
            Me.columnSOLES2.ReadOnly = true
            Me.columnCOD_MONEDA.MaxLength = 1
            Me.columnCOD_CUENTA.AllowDBNull = false
            Me.columnCOD_CUENTA.MaxLength = 8
            Me.columnCOD_AUX.AllowDBNull = false
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnCOD_COMP.AllowDBNull = false
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnNRO_COMP.AllowDBNull = false
            Me.columnNRO_COMP.MaxLength = 4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewREPORTE_ANALISIS_VS_TCTASRow() As REPORTE_ANALISIS_VS_TCTASRow
            Return CType(Me.NewRow,REPORTE_ANALISIS_VS_TCTASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New REPORTE_ANALISIS_VS_TCTASRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(REPORTE_ANALISIS_VS_TCTASRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.REPORTE_ANALISIS_VS_TCTASRowChangedEvent) Is Nothing) Then
                RaiseEvent REPORTE_ANALISIS_VS_TCTASRowChanged(Me, New REPORTE_ANALISIS_VS_TCTASRowChangeEvent(CType(e.Row,REPORTE_ANALISIS_VS_TCTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.REPORTE_ANALISIS_VS_TCTASRowChangingEvent) Is Nothing) Then
                RaiseEvent REPORTE_ANALISIS_VS_TCTASRowChanging(Me, New REPORTE_ANALISIS_VS_TCTASRowChangeEvent(CType(e.Row,REPORTE_ANALISIS_VS_TCTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.REPORTE_ANALISIS_VS_TCTASRowDeletedEvent) Is Nothing) Then
                RaiseEvent REPORTE_ANALISIS_VS_TCTASRowDeleted(Me, New REPORTE_ANALISIS_VS_TCTASRowChangeEvent(CType(e.Row,REPORTE_ANALISIS_VS_TCTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.REPORTE_ANALISIS_VS_TCTASRowDeletingEvent) Is Nothing) Then
                RaiseEvent REPORTE_ANALISIS_VS_TCTASRowDeleting(Me, New REPORTE_ANALISIS_VS_TCTASRowChangeEvent(CType(e.Row,REPORTE_ANALISIS_VS_TCTASRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveREPORTE_ANALISIS_VS_TCTASRow(ByVal row As REPORTE_ANALISIS_VS_TCTASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REP_ANA_TP = New DT_REP_ANA_TP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "REPORTE_ANALISIS_VS_TCTASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataTable1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_PER As Global.System.Data.DataColumn
        
        Private columnDESC_PER As Global.System.Data.DataColumn
        
        Private columnCOD_DOC As Global.System.Data.DataColumn
        
        Private columnNRO_DOC As Global.System.Data.DataColumn
        
        Private columnFECHA_DOC As Global.System.Data.DataColumn
        
        Private columnDOLARES As Global.System.Data.DataColumn
        
        Private columnSOLES As Global.System.Data.DataColumn
        
        Private columnDOLARES2 As Global.System.Data.DataColumn
        
        Private columnSOLES2 As Global.System.Data.DataColumn
        
        Private columnCOD_MONEDA As Global.System.Data.DataColumn
        
        Private columnCOD_CUENTA As Global.System.Data.DataColumn
        
        Private columnCOD_AUX As Global.System.Data.DataColumn
        
        Private columnCOD_COMP As Global.System.Data.DataColumn
        
        Private columnNRO_COMP As Global.System.Data.DataColumn
        
        Private columnMONEDA_ANA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataTable1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOLARESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOLARES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SOLESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOLES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOLARES2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOLARES2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SOLES2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOLES2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MONEDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_MONEDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_CUENTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_CUENTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONEDA_ANAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONEDA_ANA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataTable1Row
            Get
                Return CType(Me.Rows(index),DataTable1Row)
            End Get
        End Property
        
        Public Event DataTable1RowChanging As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowChanged As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowDeleting As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowDeleted As DataTable1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataTable1Row(ByVal row As DataTable1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataTable1Row(ByVal COD_PER As String, ByVal DESC_PER As String, ByVal COD_DOC As String, ByVal NRO_DOC As String, ByVal FECHA_DOC As String, ByVal DOLARES As String, ByVal SOLES As String, ByVal DOLARES2 As String, ByVal SOLES2 As String, ByVal COD_MONEDA As String, ByVal COD_CUENTA As String, ByVal COD_AUX As String, ByVal COD_COMP As String, ByVal NRO_COMP As String, ByVal MONEDA_ANA As String) As DataTable1Row
            Dim rowDataTable1Row As DataTable1Row = CType(Me.NewRow,DataTable1Row)
            Dim columnValuesArray() As Object = New Object() {COD_PER, DESC_PER, COD_DOC, NRO_DOC, FECHA_DOC, DOLARES, SOLES, DOLARES2, SOLES2, COD_MONEDA, COD_CUENTA, COD_AUX, COD_COMP, NRO_COMP, MONEDA_ANA}
            rowDataTable1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataTable1Row)
            Return rowDataTable1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataTable1DataTable = CType(MyBase.Clone,DataTable1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataTable1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_PER = MyBase.Columns("COD_PER")
            Me.columnDESC_PER = MyBase.Columns("DESC_PER")
            Me.columnCOD_DOC = MyBase.Columns("COD_DOC")
            Me.columnNRO_DOC = MyBase.Columns("NRO_DOC")
            Me.columnFECHA_DOC = MyBase.Columns("FECHA_DOC")
            Me.columnDOLARES = MyBase.Columns("DOLARES")
            Me.columnSOLES = MyBase.Columns("SOLES")
            Me.columnDOLARES2 = MyBase.Columns("DOLARES2")
            Me.columnSOLES2 = MyBase.Columns("SOLES2")
            Me.columnCOD_MONEDA = MyBase.Columns("COD_MONEDA")
            Me.columnCOD_CUENTA = MyBase.Columns("COD_CUENTA")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnMONEDA_ANA = MyBase.Columns("MONEDA_ANA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_PER = New Global.System.Data.DataColumn("COD_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_PER)
            Me.columnDESC_PER = New Global.System.Data.DataColumn("DESC_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_PER)
            Me.columnCOD_DOC = New Global.System.Data.DataColumn("COD_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_DOC)
            Me.columnNRO_DOC = New Global.System.Data.DataColumn("NRO_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_DOC)
            Me.columnFECHA_DOC = New Global.System.Data.DataColumn("FECHA_DOC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_DOC)
            Me.columnDOLARES = New Global.System.Data.DataColumn("DOLARES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOLARES)
            Me.columnSOLES = New Global.System.Data.DataColumn("SOLES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOLES)
            Me.columnDOLARES2 = New Global.System.Data.DataColumn("DOLARES2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOLARES2)
            Me.columnSOLES2 = New Global.System.Data.DataColumn("SOLES2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOLES2)
            Me.columnCOD_MONEDA = New Global.System.Data.DataColumn("COD_MONEDA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MONEDA)
            Me.columnCOD_CUENTA = New Global.System.Data.DataColumn("COD_CUENTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_CUENTA)
            Me.columnCOD_AUX = New Global.System.Data.DataColumn("COD_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnCOD_COMP = New Global.System.Data.DataColumn("COD_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnNRO_COMP = New Global.System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnMONEDA_ANA = New Global.System.Data.DataColumn("MONEDA_ANA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONEDA_ANA)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataTable1Row() As DataTable1Row
            Return CType(Me.NewRow,DataTable1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataTable1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataTable1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataTable1RowChangedEvent) Is Nothing) Then
                RaiseEvent DataTable1RowChanged(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataTable1RowChangingEvent) Is Nothing) Then
                RaiseEvent DataTable1RowChanging(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataTable1RowDeletedEvent) Is Nothing) Then
                RaiseEvent DataTable1RowDeleted(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataTable1RowDeletingEvent) Is Nothing) Then
                RaiseEvent DataTable1RowDeleting(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataTable1Row(ByVal row As DataTable1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REP_ANA_TP = New DT_REP_ANA_TP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataTable1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class REPORTE_ANALISIS_VS_TCTASRow
        Inherits Global.System.Data.DataRow
        
        Private tableREPORTE_ANALISIS_VS_TCTAS As REPORTE_ANALISIS_VS_TCTASDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableREPORTE_ANALISIS_VS_TCTAS = CType(Me.Table,REPORTE_ANALISIS_VS_TCTASDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Return CType(Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.COD_PERColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.COD_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.DESC_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'REPORTE_ANALISIS_VS_TCTAS' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.DESC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.COD_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.COD_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Return CType(Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.NRO_DOCColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.NRO_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DOC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.FECHA_DOCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_DOC' de la tabla 'REPORTE_ANALISIS_VS_TCTAS' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.FECHA_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOLARES() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.DOLARESColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DOLARES' de la tabla 'REPORTE_ANALISIS_VS_TCTAS' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.DOLARESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SOLES() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.SOLESColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SOLES' de la tabla 'REPORTE_ANALISIS_VS_TCTAS' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.SOLESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOLARES2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.DOLARES2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DOLARES2' de la tabla 'REPORTE_ANALISIS_VS_TCTAS' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.DOLARES2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SOLES2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.SOLES2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SOLES2' de la tabla 'REPORTE_ANALISIS_VS_TCTAS' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.SOLES2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.COD_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_MONEDA' de la tabla 'REPORTE_ANALISIS_VS_TCTAS' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.COD_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Return CType(Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.COD_CUENTAColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Return CType(Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.COD_AUXColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.COD_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.COD_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.COD_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Return CType(Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.NRO_COMPColumn),String)
            End Get
            Set
                Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.NRO_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ANALISIS_VS_TCTAS.DESC_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.DESC_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DOCNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ANALISIS_VS_TCTAS.FECHA_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DOCNull()
            Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.FECHA_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOLARESNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ANALISIS_VS_TCTAS.DOLARESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOLARESNull()
            Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.DOLARESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSOLESNull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ANALISIS_VS_TCTAS.SOLESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSOLESNull()
            Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.SOLESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOLARES2Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ANALISIS_VS_TCTAS.DOLARES2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOLARES2Null()
            Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.DOLARES2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSOLES2Null() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ANALISIS_VS_TCTAS.SOLES2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSOLES2Null()
            Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.SOLES2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableREPORTE_ANALISIS_VS_TCTAS.COD_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MONEDANull()
            Me(Me.tableREPORTE_ANALISIS_VS_TCTAS.COD_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataTable1Row
        Inherits Global.System.Data.DataRow
        
        Private tableDataTable1 As DataTable1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataTable1 = CType(Me.Table,DataTable1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.COD_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_PER' de la tabla 'DataTable1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.COD_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.DESC_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_PER' de la tabla 'DataTable1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.DESC_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_DOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.COD_DOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_DOC' de la tabla 'DataTable1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.COD_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_DOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.NRO_DOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_DOC' de la tabla 'DataTable1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.NRO_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_DOC() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.FECHA_DOCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_DOC' de la tabla 'DataTable1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.FECHA_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOLARES() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.DOLARESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DOLARES' de la tabla 'DataTable1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.DOLARESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SOLES() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.SOLESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SOLES' de la tabla 'DataTable1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.SOLESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOLARES2() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.DOLARES2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DOLARES2' de la tabla 'DataTable1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.DOLARES2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SOLES2() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.SOLES2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SOLES2' de la tabla 'DataTable1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.SOLES2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MONEDA() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.COD_MONEDAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_MONEDA' de la tabla 'DataTable1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.COD_MONEDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_CUENTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.COD_CUENTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_CUENTA' de la tabla 'DataTable1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.COD_CUENTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.COD_AUXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_AUX' de la tabla 'DataTable1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.COD_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.COD_COMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_COMP' de la tabla 'DataTable1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.COD_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.NRO_COMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_COMP' de la tabla 'DataTable1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.NRO_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONEDA_ANA() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.MONEDA_ANAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONEDA_ANA' de la tabla 'DataTable1' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.MONEDA_ANAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_PERNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.COD_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_PERNull()
            Me(Me.tableDataTable1.COD_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_PERNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.DESC_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_PERNull()
            Me(Me.tableDataTable1.DESC_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_DOCNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.COD_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_DOCNull()
            Me(Me.tableDataTable1.COD_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_DOCNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.NRO_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_DOCNull()
            Me(Me.tableDataTable1.NRO_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_DOCNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.FECHA_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_DOCNull()
            Me(Me.tableDataTable1.FECHA_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOLARESNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.DOLARESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOLARESNull()
            Me(Me.tableDataTable1.DOLARESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSOLESNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.SOLESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSOLESNull()
            Me(Me.tableDataTable1.SOLESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOLARES2Null() As Boolean
            Return Me.IsNull(Me.tableDataTable1.DOLARES2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOLARES2Null()
            Me(Me.tableDataTable1.DOLARES2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSOLES2Null() As Boolean
            Return Me.IsNull(Me.tableDataTable1.SOLES2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSOLES2Null()
            Me(Me.tableDataTable1.SOLES2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MONEDANull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.COD_MONEDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MONEDANull()
            Me(Me.tableDataTable1.COD_MONEDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_CUENTANull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.COD_CUENTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_CUENTANull()
            Me(Me.tableDataTable1.COD_CUENTAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_AUXNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.COD_AUXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_AUXNull()
            Me(Me.tableDataTable1.COD_AUXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_COMPNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.COD_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_COMPNull()
            Me(Me.tableDataTable1.COD_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMPNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.NRO_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMPNull()
            Me(Me.tableDataTable1.NRO_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONEDA_ANANull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.MONEDA_ANAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONEDA_ANANull()
            Me(Me.tableDataTable1.MONEDA_ANAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class REPORTE_ANALISIS_VS_TCTASRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As REPORTE_ANALISIS_VS_TCTASRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As REPORTE_ANALISIS_VS_TCTASRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As REPORTE_ANALISIS_VS_TCTASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataTable1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataTable1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataTable1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataTable1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DT_REP_ANA_TPTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class REPORTE_ANALISIS_VS_TCTASTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "REPORTE_ANALISIS_VS_TCTAS"
            tableMapping.ColumnMappings.Add("COD_PER", "COD_PER")
            tableMapping.ColumnMappings.Add("DESC_PER", "DESC_PER")
            tableMapping.ColumnMappings.Add("COD_DOC", "COD_DOC")
            tableMapping.ColumnMappings.Add("NRO_DOC", "NRO_DOC")
            tableMapping.ColumnMappings.Add("FECHA_DOC", "FECHA_DOC")
            tableMapping.ColumnMappings.Add("DOLARES", "DOLARES")
            tableMapping.ColumnMappings.Add("SOLES", "SOLES")
            tableMapping.ColumnMappings.Add("DOLARES2", "DOLARES2")
            tableMapping.ColumnMappings.Add("SOLES2", "SOLES2")
            tableMapping.ColumnMappings.Add("COD_MONEDA", "COD_MONEDA")
            tableMapping.ColumnMappings.Add("COD_CUENTA", "COD_CUENTA")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI01ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.REPORTE_ANALISIS_VS_TCTAS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_MES", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_CUENTA", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REP_ANA_TP.REPORTE_ANALISIS_VS_TCTASDataTable, ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FE_AÑO As String, ByVal FE_MES As String, ByVal COD_CUENTA As String) As DT_REP_ANA_TP.REPORTE_ANALISIS_VS_TCTASDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FE_AÑO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (COD_CUENTA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COD_CUENTA,String)
            End If
            Dim dataTable As DT_REP_ANA_TP.REPORTE_ANALISIS_VS_TCTASDataTable = New DT_REP_ANA_TP.REPORTE_ANALISIS_VS_TCTASDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace

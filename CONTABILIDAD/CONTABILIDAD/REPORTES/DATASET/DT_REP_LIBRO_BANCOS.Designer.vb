'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.7905
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DT_REP_LIBRO_BANCOS"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DT_REP_LIBRO_BANCOS
    Inherits Global.System.Data.DataSet
    
    Private tableLIBRO_BANCOS As LIBRO_BANCOSDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("LIBRO_BANCOS")) Is Nothing) Then
                MyBase.Tables.Add(New LIBRO_BANCOSDataTable(ds.Tables("LIBRO_BANCOS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LIBRO_BANCOS() As LIBRO_BANCOSDataTable
        Get
            Return Me.tableLIBRO_BANCOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DT_REP_LIBRO_BANCOS = CType(MyBase.Clone,DT_REP_LIBRO_BANCOS)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("LIBRO_BANCOS")) Is Nothing) Then
                MyBase.Tables.Add(New LIBRO_BANCOSDataTable(ds.Tables("LIBRO_BANCOS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableLIBRO_BANCOS = CType(MyBase.Tables("LIBRO_BANCOS"),LIBRO_BANCOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLIBRO_BANCOS) Is Nothing) Then
                Me.tableLIBRO_BANCOS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DT_REP_LIBRO_BANCOS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DT_REP_LIBRO_BANCOS.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableLIBRO_BANCOS = New LIBRO_BANCOSDataTable
        MyBase.Tables.Add(Me.tableLIBRO_BANCOS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLIBRO_BANCOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DT_REP_LIBRO_BANCOS = New DT_REP_LIBRO_BANCOS
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub LIBRO_BANCOSRowChangeEventHandler(ByVal sender As Object, ByVal e As LIBRO_BANCOSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LIBRO_BANCOSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOD_MP As Global.System.Data.DataColumn
        
        Private columnNRO_MP As Global.System.Data.DataColumn
        
        Private columnFECHA_MP As Global.System.Data.DataColumn
        
        Private columnDESC_OPE As Global.System.Data.DataColumn
        
        Private columnINGRESO As Global.System.Data.DataColumn
        
        Private columnEGRESO As Global.System.Data.DataColumn
        
        Private columnCOD_AUX As Global.System.Data.DataColumn
        
        Private columnCOD_COMP As Global.System.Data.DataColumn
        
        Private columnNRO_COMP As Global.System.Data.DataColumn
        
        Private columnIMP_DOC As Global.System.Data.DataColumn
        
        Private columnCOD_BANCO As Global.System.Data.DataColumn
        
        Private columnDESC_BANCO As Global.System.Data.DataColumn
        
        Private columnSALDO As Global.System.Data.DataColumn
        
        Private columnFILA As Global.System.Data.DataColumn
        
        Private columnSALDO_ANTERIOR As Global.System.Data.DataColumn
        
        Private _columnSALDO_ANTERIOR_ As Global.System.Data.DataColumn
        
        Private columnT_CAMBIO_ANTERIOR As Global.System.Data.DataColumn
        
        Private columnSALDO_ACTUAL As Global.System.Data.DataColumn
        
        Private _columnSALDO_ACTUAL_ As Global.System.Data.DataColumn
        
        Private columnT_CAMBIO_ACTUAL As Global.System.Data.DataColumn
        
        Private columnT_INGRESO As Global.System.Data.DataColumn
        
        Private columnT_EGRESO As Global.System.Data.DataColumn
        
        Private columnTC_COMPRA_ANT As Global.System.Data.DataColumn
        
        Private columnTC_VENTA_ANT As Global.System.Data.DataColumn
        
        Private columnTC_COMPRA_ACT As Global.System.Data.DataColumn
        
        Private columnTC_VENTA_ACT As Global.System.Data.DataColumn
        
        Private columnSALDO_CONTABLE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LIBRO_BANCOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_MPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_MP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_MPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_MP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_OPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_OPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGRESOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGRESO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EGRESOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEGRESO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_AUXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_AUX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NRO_COMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNRO_COMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMP_DOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMP_DOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_BANCOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_BANCO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESC_BANCOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC_BANCO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FILAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFILA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO_ANTERIORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO_ANTERIOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _SALDO_ANTERIOR_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnSALDO_ANTERIOR_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property T_CAMBIO_ANTERIORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnT_CAMBIO_ANTERIOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO_ACTUALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO_ACTUAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _SALDO_ACTUAL_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnSALDO_ACTUAL_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property T_CAMBIO_ACTUALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnT_CAMBIO_ACTUAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property T_INGRESOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnT_INGRESO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property T_EGRESOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnT_EGRESO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TC_COMPRA_ANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTC_COMPRA_ANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TC_VENTA_ANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTC_VENTA_ANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TC_COMPRA_ACTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTC_COMPRA_ACT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TC_VENTA_ACTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTC_VENTA_ACT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SALDO_CONTABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALDO_CONTABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LIBRO_BANCOSRow
            Get
                Return CType(Me.Rows(index),LIBRO_BANCOSRow)
            End Get
        End Property
        
        Public Event LIBRO_BANCOSRowChanging As LIBRO_BANCOSRowChangeEventHandler
        
        Public Event LIBRO_BANCOSRowChanged As LIBRO_BANCOSRowChangeEventHandler
        
        Public Event LIBRO_BANCOSRowDeleting As LIBRO_BANCOSRowChangeEventHandler
        
        Public Event LIBRO_BANCOSRowDeleted As LIBRO_BANCOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLIBRO_BANCOSRow(ByVal row As LIBRO_BANCOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLIBRO_BANCOSRow( _
                    ByVal COD_MP As String,  _
                    ByVal NRO_MP As String,  _
                    ByVal FECHA_MP As Date,  _
                    ByVal DESC_OPE As String,  _
                    ByVal INGRESO As Decimal,  _
                    ByVal EGRESO As Decimal,  _
                    ByVal COD_AUX As String,  _
                    ByVal COD_COMP As String,  _
                    ByVal NRO_COMP As String,  _
                    ByVal IMP_DOC As Decimal,  _
                    ByVal COD_BANCO As String,  _
                    ByVal DESC_BANCO As String,  _
                    ByVal SALDO As Decimal,  _
                    ByVal FILA As Integer,  _
                    ByVal SALDO_ANTERIOR As Decimal,  _
                    ByVal _SALDO_ANTERIOR_ As Decimal,  _
                    ByVal T_CAMBIO_ANTERIOR As Decimal,  _
                    ByVal SALDO_ACTUAL As Decimal,  _
                    ByVal _SALDO_ACTUAL_ As Decimal,  _
                    ByVal T_CAMBIO_ACTUAL As Decimal,  _
                    ByVal T_INGRESO As Decimal,  _
                    ByVal T_EGRESO As Decimal,  _
                    ByVal TC_COMPRA_ANT As Decimal,  _
                    ByVal TC_VENTA_ANT As Decimal,  _
                    ByVal TC_COMPRA_ACT As Decimal,  _
                    ByVal TC_VENTA_ACT As Decimal,  _
                    ByVal SALDO_CONTABLE As Decimal) As LIBRO_BANCOSRow
            Dim rowLIBRO_BANCOSRow As LIBRO_BANCOSRow = CType(Me.NewRow,LIBRO_BANCOSRow)
            Dim columnValuesArray() As Object = New Object() {COD_MP, NRO_MP, FECHA_MP, DESC_OPE, INGRESO, EGRESO, COD_AUX, COD_COMP, NRO_COMP, IMP_DOC, COD_BANCO, DESC_BANCO, SALDO, FILA, SALDO_ANTERIOR, _SALDO_ANTERIOR_, T_CAMBIO_ANTERIOR, SALDO_ACTUAL, _SALDO_ACTUAL_, T_CAMBIO_ACTUAL, T_INGRESO, T_EGRESO, TC_COMPRA_ANT, TC_VENTA_ANT, TC_COMPRA_ACT, TC_VENTA_ACT, SALDO_CONTABLE}
            rowLIBRO_BANCOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLIBRO_BANCOSRow)
            Return rowLIBRO_BANCOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LIBRO_BANCOSDataTable = CType(MyBase.Clone,LIBRO_BANCOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LIBRO_BANCOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOD_MP = MyBase.Columns("COD_MP")
            Me.columnNRO_MP = MyBase.Columns("NRO_MP")
            Me.columnFECHA_MP = MyBase.Columns("FECHA_MP")
            Me.columnDESC_OPE = MyBase.Columns("DESC_OPE")
            Me.columnINGRESO = MyBase.Columns("INGRESO")
            Me.columnEGRESO = MyBase.Columns("EGRESO")
            Me.columnCOD_AUX = MyBase.Columns("COD_AUX")
            Me.columnCOD_COMP = MyBase.Columns("COD_COMP")
            Me.columnNRO_COMP = MyBase.Columns("NRO_COMP")
            Me.columnIMP_DOC = MyBase.Columns("IMP_DOC")
            Me.columnCOD_BANCO = MyBase.Columns("COD_BANCO")
            Me.columnDESC_BANCO = MyBase.Columns("DESC_BANCO")
            Me.columnSALDO = MyBase.Columns("SALDO")
            Me.columnFILA = MyBase.Columns("FILA")
            Me.columnSALDO_ANTERIOR = MyBase.Columns("SALDO_ANTERIOR")
            Me._columnSALDO_ANTERIOR_ = MyBase.Columns("SALDO_ANTERIOR$")
            Me.columnT_CAMBIO_ANTERIOR = MyBase.Columns("T_CAMBIO_ANTERIOR")
            Me.columnSALDO_ACTUAL = MyBase.Columns("SALDO_ACTUAL")
            Me._columnSALDO_ACTUAL_ = MyBase.Columns("SALDO_ACTUAL$")
            Me.columnT_CAMBIO_ACTUAL = MyBase.Columns("T_CAMBIO_ACTUAL")
            Me.columnT_INGRESO = MyBase.Columns("T_INGRESO")
            Me.columnT_EGRESO = MyBase.Columns("T_EGRESO")
            Me.columnTC_COMPRA_ANT = MyBase.Columns("TC_COMPRA_ANT")
            Me.columnTC_VENTA_ANT = MyBase.Columns("TC_VENTA_ANT")
            Me.columnTC_COMPRA_ACT = MyBase.Columns("TC_COMPRA_ACT")
            Me.columnTC_VENTA_ACT = MyBase.Columns("TC_VENTA_ACT")
            Me.columnSALDO_CONTABLE = MyBase.Columns("SALDO_CONTABLE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOD_MP = New Global.System.Data.DataColumn("COD_MP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_MP)
            Me.columnNRO_MP = New Global.System.Data.DataColumn("NRO_MP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_MP)
            Me.columnFECHA_MP = New Global.System.Data.DataColumn("FECHA_MP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MP)
            Me.columnDESC_OPE = New Global.System.Data.DataColumn("DESC_OPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_OPE)
            Me.columnINGRESO = New Global.System.Data.DataColumn("INGRESO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGRESO)
            Me.columnEGRESO = New Global.System.Data.DataColumn("EGRESO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEGRESO)
            Me.columnCOD_AUX = New Global.System.Data.DataColumn("COD_AUX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_AUX)
            Me.columnCOD_COMP = New Global.System.Data.DataColumn("COD_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_COMP)
            Me.columnNRO_COMP = New Global.System.Data.DataColumn("NRO_COMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNRO_COMP)
            Me.columnIMP_DOC = New Global.System.Data.DataColumn("IMP_DOC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMP_DOC)
            Me.columnCOD_BANCO = New Global.System.Data.DataColumn("COD_BANCO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_BANCO)
            Me.columnDESC_BANCO = New Global.System.Data.DataColumn("DESC_BANCO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC_BANCO)
            Me.columnSALDO = New Global.System.Data.DataColumn("SALDO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO)
            Me.columnFILA = New Global.System.Data.DataColumn("FILA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFILA)
            Me.columnSALDO_ANTERIOR = New Global.System.Data.DataColumn("SALDO_ANTERIOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO_ANTERIOR)
            Me._columnSALDO_ANTERIOR_ = New Global.System.Data.DataColumn("SALDO_ANTERIOR$", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me._columnSALDO_ANTERIOR_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnSALDO_ANTERIOR_")
            Me._columnSALDO_ANTERIOR_.ExtendedProperties.Add("Generator_UserColumnName", "SALDO_ANTERIOR$")
            MyBase.Columns.Add(Me._columnSALDO_ANTERIOR_)
            Me.columnT_CAMBIO_ANTERIOR = New Global.System.Data.DataColumn("T_CAMBIO_ANTERIOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT_CAMBIO_ANTERIOR)
            Me.columnSALDO_ACTUAL = New Global.System.Data.DataColumn("SALDO_ACTUAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO_ACTUAL)
            Me._columnSALDO_ACTUAL_ = New Global.System.Data.DataColumn("SALDO_ACTUAL$", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me._columnSALDO_ACTUAL_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnSALDO_ACTUAL_")
            Me._columnSALDO_ACTUAL_.ExtendedProperties.Add("Generator_UserColumnName", "SALDO_ACTUAL$")
            MyBase.Columns.Add(Me._columnSALDO_ACTUAL_)
            Me.columnT_CAMBIO_ACTUAL = New Global.System.Data.DataColumn("T_CAMBIO_ACTUAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT_CAMBIO_ACTUAL)
            Me.columnT_INGRESO = New Global.System.Data.DataColumn("T_INGRESO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT_INGRESO)
            Me.columnT_EGRESO = New Global.System.Data.DataColumn("T_EGRESO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT_EGRESO)
            Me.columnTC_COMPRA_ANT = New Global.System.Data.DataColumn("TC_COMPRA_ANT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTC_COMPRA_ANT)
            Me.columnTC_VENTA_ANT = New Global.System.Data.DataColumn("TC_VENTA_ANT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTC_VENTA_ANT)
            Me.columnTC_COMPRA_ACT = New Global.System.Data.DataColumn("TC_COMPRA_ACT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTC_COMPRA_ACT)
            Me.columnTC_VENTA_ACT = New Global.System.Data.DataColumn("TC_VENTA_ACT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTC_VENTA_ACT)
            Me.columnSALDO_CONTABLE = New Global.System.Data.DataColumn("SALDO_CONTABLE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALDO_CONTABLE)
            Me.columnCOD_MP.MaxLength = 3
            Me.columnNRO_MP.MaxLength = 15
            Me.columnDESC_OPE.MaxLength = 60
            Me.columnCOD_AUX.MaxLength = 2
            Me.columnCOD_COMP.MaxLength = 3
            Me.columnNRO_COMP.MaxLength = 4
            Me.columnCOD_BANCO.MaxLength = 4
            Me.columnDESC_BANCO.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLIBRO_BANCOSRow() As LIBRO_BANCOSRow
            Return CType(Me.NewRow,LIBRO_BANCOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LIBRO_BANCOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LIBRO_BANCOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LIBRO_BANCOSRowChangedEvent) Is Nothing) Then
                RaiseEvent LIBRO_BANCOSRowChanged(Me, New LIBRO_BANCOSRowChangeEvent(CType(e.Row,LIBRO_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LIBRO_BANCOSRowChangingEvent) Is Nothing) Then
                RaiseEvent LIBRO_BANCOSRowChanging(Me, New LIBRO_BANCOSRowChangeEvent(CType(e.Row,LIBRO_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LIBRO_BANCOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent LIBRO_BANCOSRowDeleted(Me, New LIBRO_BANCOSRowChangeEvent(CType(e.Row,LIBRO_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LIBRO_BANCOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent LIBRO_BANCOSRowDeleting(Me, New LIBRO_BANCOSRowChangeEvent(CType(e.Row,LIBRO_BANCOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLIBRO_BANCOSRow(ByVal row As LIBRO_BANCOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DT_REP_LIBRO_BANCOS = New DT_REP_LIBRO_BANCOS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LIBRO_BANCOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LIBRO_BANCOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableLIBRO_BANCOS As LIBRO_BANCOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLIBRO_BANCOS = CType(Me.Table,LIBRO_BANCOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_MP() As String
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.COD_MPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_MP' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.COD_MPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_MP() As String
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.NRO_MPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_MP' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.NRO_MPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.FECHA_MPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA_MP' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.FECHA_MPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_OPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.DESC_OPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_OPE' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.DESC_OPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGRESO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.INGRESOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'INGRESO' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.INGRESOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EGRESO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.EGRESOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EGRESO' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.EGRESOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_AUX() As String
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.COD_AUXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_AUX' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.COD_AUXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.COD_COMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_COMP' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.COD_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NRO_COMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.NRO_COMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NRO_COMP' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.NRO_COMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMP_DOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.IMP_DOCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IMP_DOC' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.IMP_DOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_BANCO() As String
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.COD_BANCOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_BANCO' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.COD_BANCOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESC_BANCO() As String
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.DESC_BANCOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESC_BANCO' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.DESC_BANCOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.SALDOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.SALDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FILA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.FILAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FILA' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.FILAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO_ANTERIOR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.SALDO_ANTERIORColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO_ANTERIOR' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.SALDO_ANTERIORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _SALDO_ANTERIOR_() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS._SALDO_ANTERIOR_Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO_ANTERIOR$' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS._SALDO_ANTERIOR_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property T_CAMBIO_ANTERIOR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.T_CAMBIO_ANTERIORColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'T_CAMBIO_ANTERIOR' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.T_CAMBIO_ANTERIORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO_ACTUAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.SALDO_ACTUALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO_ACTUAL' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.SALDO_ACTUALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _SALDO_ACTUAL_() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS._SALDO_ACTUAL_Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO_ACTUAL$' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS._SALDO_ACTUAL_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property T_CAMBIO_ACTUAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.T_CAMBIO_ACTUALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'T_CAMBIO_ACTUAL' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.T_CAMBIO_ACTUALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property T_INGRESO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.T_INGRESOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'T_INGRESO' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.T_INGRESOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property T_EGRESO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.T_EGRESOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'T_EGRESO' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.T_EGRESOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TC_COMPRA_ANT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.TC_COMPRA_ANTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TC_COMPRA_ANT' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.TC_COMPRA_ANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TC_VENTA_ANT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.TC_VENTA_ANTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TC_VENTA_ANT' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.TC_VENTA_ANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TC_COMPRA_ACT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.TC_COMPRA_ACTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TC_COMPRA_ACT' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.TC_COMPRA_ACTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TC_VENTA_ACT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.TC_VENTA_ACTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TC_VENTA_ACT' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.TC_VENTA_ACTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SALDO_CONTABLE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLIBRO_BANCOS.SALDO_CONTABLEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SALDO_CONTABLE' de la tabla 'LIBRO_BANCOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIBRO_BANCOS.SALDO_CONTABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_MPNull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.COD_MPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_MPNull()
            Me(Me.tableLIBRO_BANCOS.COD_MPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_MPNull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.NRO_MPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_MPNull()
            Me(Me.tableLIBRO_BANCOS.NRO_MPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MPNull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.FECHA_MPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MPNull()
            Me(Me.tableLIBRO_BANCOS.FECHA_MPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_OPENull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.DESC_OPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_OPENull()
            Me(Me.tableLIBRO_BANCOS.DESC_OPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINGRESONull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.INGRESOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINGRESONull()
            Me(Me.tableLIBRO_BANCOS.INGRESOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEGRESONull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.EGRESOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEGRESONull()
            Me(Me.tableLIBRO_BANCOS.EGRESOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_AUXNull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.COD_AUXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_AUXNull()
            Me(Me.tableLIBRO_BANCOS.COD_AUXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_COMPNull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.COD_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_COMPNull()
            Me(Me.tableLIBRO_BANCOS.COD_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNRO_COMPNull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.NRO_COMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNRO_COMPNull()
            Me(Me.tableLIBRO_BANCOS.NRO_COMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMP_DOCNull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.IMP_DOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMP_DOCNull()
            Me(Me.tableLIBRO_BANCOS.IMP_DOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_BANCONull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.COD_BANCOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_BANCONull()
            Me(Me.tableLIBRO_BANCOS.COD_BANCOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESC_BANCONull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.DESC_BANCOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESC_BANCONull()
            Me(Me.tableLIBRO_BANCOS.DESC_BANCOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDONull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.SALDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDONull()
            Me(Me.tableLIBRO_BANCOS.SALDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFILANull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.FILAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFILANull()
            Me(Me.tableLIBRO_BANCOS.FILAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO_ANTERIORNull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.SALDO_ANTERIORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO_ANTERIORNull()
            Me(Me.tableLIBRO_BANCOS.SALDO_ANTERIORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_SALDO_ANTERIOR_Null() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS._SALDO_ANTERIOR_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_SALDO_ANTERIOR_Null()
            Me(Me.tableLIBRO_BANCOS._SALDO_ANTERIOR_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsT_CAMBIO_ANTERIORNull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.T_CAMBIO_ANTERIORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetT_CAMBIO_ANTERIORNull()
            Me(Me.tableLIBRO_BANCOS.T_CAMBIO_ANTERIORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO_ACTUALNull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.SALDO_ACTUALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO_ACTUALNull()
            Me(Me.tableLIBRO_BANCOS.SALDO_ACTUALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_SALDO_ACTUAL_Null() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS._SALDO_ACTUAL_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_SALDO_ACTUAL_Null()
            Me(Me.tableLIBRO_BANCOS._SALDO_ACTUAL_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsT_CAMBIO_ACTUALNull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.T_CAMBIO_ACTUALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetT_CAMBIO_ACTUALNull()
            Me(Me.tableLIBRO_BANCOS.T_CAMBIO_ACTUALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsT_INGRESONull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.T_INGRESOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetT_INGRESONull()
            Me(Me.tableLIBRO_BANCOS.T_INGRESOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsT_EGRESONull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.T_EGRESOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetT_EGRESONull()
            Me(Me.tableLIBRO_BANCOS.T_EGRESOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTC_COMPRA_ANTNull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.TC_COMPRA_ANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTC_COMPRA_ANTNull()
            Me(Me.tableLIBRO_BANCOS.TC_COMPRA_ANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTC_VENTA_ANTNull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.TC_VENTA_ANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTC_VENTA_ANTNull()
            Me(Me.tableLIBRO_BANCOS.TC_VENTA_ANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTC_COMPRA_ACTNull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.TC_COMPRA_ACTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTC_COMPRA_ACTNull()
            Me(Me.tableLIBRO_BANCOS.TC_COMPRA_ACTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTC_VENTA_ACTNull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.TC_VENTA_ACTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTC_VENTA_ACTNull()
            Me(Me.tableLIBRO_BANCOS.TC_VENTA_ACTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSALDO_CONTABLENull() As Boolean
            Return Me.IsNull(Me.tableLIBRO_BANCOS.SALDO_CONTABLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSALDO_CONTABLENull()
            Me(Me.tableLIBRO_BANCOS.SALDO_CONTABLEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LIBRO_BANCOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LIBRO_BANCOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LIBRO_BANCOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LIBRO_BANCOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DT_REP_LIBRO_BANCOSTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LIBRO_BANCOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LIBRO_BANCOS"
            tableMapping.ColumnMappings.Add("COD_MP", "COD_MP")
            tableMapping.ColumnMappings.Add("NRO_MP", "NRO_MP")
            tableMapping.ColumnMappings.Add("FECHA_MP", "FECHA_MP")
            tableMapping.ColumnMappings.Add("DESC_OPE", "DESC_OPE")
            tableMapping.ColumnMappings.Add("INGRESO", "INGRESO")
            tableMapping.ColumnMappings.Add("EGRESO", "EGRESO")
            tableMapping.ColumnMappings.Add("COD_AUX", "COD_AUX")
            tableMapping.ColumnMappings.Add("COD_COMP", "COD_COMP")
            tableMapping.ColumnMappings.Add("NRO_COMP", "NRO_COMP")
            tableMapping.ColumnMappings.Add("IMP_DOC", "IMP_DOC")
            tableMapping.ColumnMappings.Add("COD_BANCO", "COD_BANCO")
            tableMapping.ColumnMappings.Add("DESC_BANCO", "DESC_BANCO")
            tableMapping.ColumnMappings.Add("SALDO", "SALDO")
            tableMapping.ColumnMappings.Add("FILA", "FILA")
            tableMapping.ColumnMappings.Add("SALDO_ANTERIOR", "SALDO_ANTERIOR")
            tableMapping.ColumnMappings.Add("SALDO_ANTERIOR$", "SALDO_ANTERIOR$")
            tableMapping.ColumnMappings.Add("T_CAMBIO_ANTERIOR", "T_CAMBIO_ANTERIOR")
            tableMapping.ColumnMappings.Add("SALDO_ACTUAL", "SALDO_ACTUAL")
            tableMapping.ColumnMappings.Add("SALDO_ACTUAL$", "SALDO_ACTUAL$")
            tableMapping.ColumnMappings.Add("T_CAMBIO_ACTUAL", "T_CAMBIO_ACTUAL")
            tableMapping.ColumnMappings.Add("T_INGRESO", "T_INGRESO")
            tableMapping.ColumnMappings.Add("T_EGRESO", "T_EGRESO")
            tableMapping.ColumnMappings.Add("TC_COMPRA_ANT", "TC_COMPRA_ANT")
            tableMapping.ColumnMappings.Add("TC_VENTA_ANT", "TC_VENTA_ANT")
            tableMapping.ColumnMappings.Add("TC_COMPRA_ACT", "TC_COMPRA_ACT")
            tableMapping.ColumnMappings.Add("TC_VENTA_ACT", "TC_VENTA_ACT")
            tableMapping.ColumnMappings.Add("SALDO_CONTABLE", "SALDO_CONTABLE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CONTABILIDAD.My.MySettings.Default.BD_COI02
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.LIBRO_BANCOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COD_BANCO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_MES", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FE_AÑO", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DT_REP_LIBRO_BANCOS.LIBRO_BANCOSDataTable, ByVal COD_BANCO As String, ByVal FE_MES As String, ByVal FE_AÑO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_BANCO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_BANCO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FE_AÑO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal COD_BANCO As String, ByVal FE_MES As String, ByVal FE_AÑO As String) As DT_REP_LIBRO_BANCOS.LIBRO_BANCOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (COD_BANCO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COD_BANCO,String)
            End If
            If (FE_MES Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(FE_MES,String)
            End If
            If (FE_AÑO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(FE_AÑO,String)
            End If
            Dim dataTable As DT_REP_LIBRO_BANCOS.LIBRO_BANCOSDataTable = New DT_REP_LIBRO_BANCOS.LIBRO_BANCOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
